/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
//////////////////////////////////////////////////////////////////////////////

Text email_ = "vdebuen@tol-project.org"; 
Text summary_ = "checking a simple graph";

//Write here the initial test TOL code if needed
Real numErr0 = Copy(NError);
Real numWar0 = Copy(NWarning);


#Embed "../../graphtools.tol";

Real vertex.num =   20000;
Real edge.num   =  300000;

WriteLn("Creating graph with  "<<vertex.num+ " vertices and "<<
        edge.num+" edges ...");
Real t0 = Copy(Time);

GraphTools::@Graph graph = GraphTools::@Graph::New("test_0001");

Real graph::initialize(Set { vertex.names = For(1,vertex.num,Text(Real k)
{
   "Key_"<<FormatReal(k,"%6.0f")<<
       "_"+FormatReal(IntRand(0,999999999),"%9.0lf")
})});

Real graph::_.edge::add.feature.numeric("Length");
Real graph::_.edge::add.feature.numeric("Hight");

Real graph::edge.build(Matrix { data = 
  { InOut  = RandCombination(edge.num,vertex.num,2) } |
  { Length = Rand(edge.num, 1, 10, 100) } |
  { Hight  = Rand(edge.num, 1, 1, 10) }
});

Real t1 = Copy(Time);

WriteLn("Creating time "<<(t1-t0)+" seconds");

Real Ois.Store([[graph]],"graph.oza");
Real t2 = Copy(Time);

WriteLn("Saving OIS time "<<(t2-t1)+" seconds");

Set load = { Include("graph.oza") };
Real t3 = Copy(Time);

WriteLn("Loading OIS time "<<(t3-t2)+" seconds");

/*  
Real numErr1 = Copy(NError);
Real numWar1 = Copy(NWarning);

Set partialResults_ = [[numErr0, numErr1, ok]];

//This is a messure of the success of the test 
Real quality_ = And(numErr1 == numErr0, 
                    numWar1 == numWar0, 
                    ok);

//Return the results 
Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                  "Partial results = "<<partialResults_,
                  "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                  email_);
WriteLn(""<<resultStr_);
resultStr_;

/* */

