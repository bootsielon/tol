/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
//////////////////////////////////////////////////////////////////////////////

Text email_ = "vdebuen@tol-project.org"; 
Text link_ = ""; 
Text summary_ = "checking a simple graph";

//Write here the initial test TOL code if needed
Real numErr0 = Copy(NError);
Real numWar0 = Copy(NWarning);


#Embed "../../graphtools.tol";

Real vertex.num = 2000;
Real edge.num   =  300;
Real directed   = True;

WriteLn("Creating graph with  "<<vertex.num+ " vertices and close to "<<
        edge.num+" edges ...");
Real t0 = Copy(Time);


GraphTools::@Graph graph = GraphTools::@Graph::New("test_0001",directed);

Set vertex.names = For(1,vertex.num,Text(Real k)
{
   "Key_"<<FormatReal(k,"%06.0f")<<
       "_"+FormatReal(IntRand(0,999999999),"%09.0lf")
});

Real graph::initialize(vertex.names);

Real graph::_.edge::add.feature.numeric("Length");
Real graph::_.edge::add.feature.numeric("Hight");


Matrix data = 
  { InOut  = RandCombination(edge.num,vertex.num,2) } |
  { Length = Rand(edge.num, 1, 10, 100) } |
  { Hight  = Rand(edge.num, 1,  1,  10) };

Real graph::edge.build(data);

Real edge.idx = IntRand(1,edge.num);
Set edge.info = graph::get.edge.all(edge.idx);
Real edge.idx.1 = graph::get.edge.index(edge.info[1], edge.info[2]);
Real edge.idx.2 = graph::get.edge.index(edge.info[2], edge.info[1]);

WriteLn("edge.idx = "<<edge.idx);
WriteLn("edge.idx.1 = "<<edge.idx.1);
WriteLn("edge.idx.2 = "<<edge.idx.2);

Real ok.1 = If(directed,edge.idx.1==0,edge.idx.1==edge.idx);
Real ok.2 = edge.idx.2==edge.idx;

Set vertex.names_ = graph::get.vertex.names(?);

Real ok.3 = Card(vertex.names)==Card(vertex.names_);

Real vertex.idx = IntRand(1,vertex.num);

Text vertex.name_ = graph::get.vertex.name(vertex.idx);
Real ok.4 = vertex.name_==vertex.names[vertex.idx];

Real high = MatDat(data,edge.idx,4);
Real high.1 = graph::get.edge.feature(edge.idx,4);
Real high.2 = graph::get.edge.feature(edge.idx,"Hight");
Real ok.5 = Eq(high,high.1,high.2);

Real t1 = Copy(Time);

WriteLn("Creating time "<<(t1-t0)+" seconds");

Real Ois.Store([[graph]],"graph.oza");
Real t2 = Copy(Time);

WriteLn("Saving OIS time "<<(t2-t1)+" seconds");

Set load = { Include("graph.oza") };
Real t3 = Copy(Time);

WriteLn("Loading OIS time "<<(t3-t2)+" seconds");

Real numErr1 = Copy(NError);
Real numWar1 = Copy(NWarning);

Set partialResults_ = [[numErr0, numErr1, 
                        ok.1, ok.2, ok.3, ok.4]];

//This is a messure of the success of the test 
Real quality_ = And(numErr1 == numErr0, 
                    numWar1 == numWar0, 
                    ok.1, ok.2, ok.3, ok.4);

//Return the results 
Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                  "Partial results = "<<partialResults_,
                  "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                  email_);
WriteLn(""<<resultStr_);
resultStr_;

/* */

