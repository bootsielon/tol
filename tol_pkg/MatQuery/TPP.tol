/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : MatQuery.tol
// PURPOSE: Defines Class @TPP.Delaunay
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.TPP.Delaunay = 
"This class is part of the TOL-OOP-API for Triangle++: A Library for Delaunay "
"2D-Triangulation ";
Class @TPP.Delaunay
//////////////////////////////////////////////////////////////////////////////
{
  //TPP identifier of internal Delaunay
  Real _id = ?;
  
  ////////////////////////////////////////////////////////////////////////////
  Static @TPP.Delaunay New(Matrix X)
  ////////////////////////////////////////////////////////////////////////////
  {
    @TPP.Delaunay new = [[
      Real _.n = Columns(X);
      Real _.m = Rows(X);
      Matrix _.X = X;
      Real _id = TPP.Delaunay.New(_.X) ]]
  };
  ////////////////////////////////////////////////////////////////////////////
  Real __destroy(Real void)
  ////////////////////////////////////////////////////////////////////////////
  {
    If(!IsUnknown(_id) & _id, TPP.Delaunay.Delete(_id));
    Real _id := 0;
    True
  };
  ////////////////////////////////////////////////////////////////////////////
  Matrix get.vertices(Real void)
  ////////////////////////////////////////////////////////////////////////////
  {
    TPP.Delaunay.GetVertices(_id)
  };
  ////////////////////////////////////////////////////////////////////////////
  Matrix get.faces(Real void)
  ////////////////////////////////////////////////////////////////////////////
  {
    TPP.Delaunay.GetFaces(_id)
  }
};

