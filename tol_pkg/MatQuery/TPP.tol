/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : MatQuery.tol
// PURPOSE: Defines Class @TPP.Delaunay
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.TPP.Delaunay = 
"This class is part of the TOL-OOP-API for Triangle++: A Library for Delaunay "
"2D-Triangulation ";
Class @TPP.Delaunay
//////////////////////////////////////////////////////////////////////////////
{
  //TPP identifier of internal Delaunay
  Real _id = ?;
  
  ////////////////////////////////////////////////////////////////////////////
  Static @TPP.Delaunay New(Matrix X)
  ////////////////////////////////////////////////////////////////////////////
  {
    @TPP.Delaunay new = [[
      Real _.n = Columns(X);
      Real _.m = Rows(X);
      Matrix _.X = X;
      Real _id = TPP.Delaunay.New(_.X) ]]
  };
  ////////////////////////////////////////////////////////////////////////////
  Real __destroy(Real void)
  ////////////////////////////////////////////////////////////////////////////
  {
    If(!IsUnknown(_id) & _id, TPP.Delaunay.Delete(_id));
    Real _id := 0;
    True
  };
  ////////////////////////////////////////////////////////////////////////////
  Matrix get.vertices(Real void)
  ////////////////////////////////////////////////////////////////////////////
  {
    TPP.Delaunay.GetVertices(_id)
  };
  ////////////////////////////////////////////////////////////////////////////
  Matrix get.faces.idx(Real void)
  ////////////////////////////////////////////////////////////////////////////
  {
    TPP.Delaunay.GetFaces(_id)
  };
  ////////////////////////////////////////////////////////////////////////////
  Set get.faces(Real void)
  ////////////////////////////////////////////////////////////////////////////
  {
    Matrix faces = TPP.Delaunay.GetFaces(_id);
    Matrix xy = TPP.Delaunay.GetVertices(_id);
    Matrix A = SubRow(xy,Col2Set(SubCol(faces,[[1]]))); 
    Matrix B = SubRow(xy,Col2Set(SubCol(faces,[[2]]))); 
    Matrix C = SubRow(xy,Col2Set(SubCol(faces,[[3]]))); 
    [[A,B,C]]
  };
  ////////////////////////////////////////////////////////////////////////////
  Set get.circumcircles(Real void)
  //http://en.wikipedia.org/wiki/Circumscribed_circle
  ////////////////////////////////////////////////////////////////////////////
  {
    Set faces = get.faces(void);
    Matrix A = faces::A; 
    Matrix B = faces::B; 
    Matrix C = faces::C; 
    Matrix B_ = B-A; 
    Matrix C_ = C-A; 
    Matrix Bx = SubCol(B_,[[1]]);
    Matrix By = SubCol(B_,[[2]]);
    Matrix Cx = SubCol(C_,[[1]]);
    Matrix Cy = SubCol(C_,[[2]]);
    Matrix D  = (Bx$*Cy-By$*Cx)*2;
    Matrix B2 = Bx^2+By^2;
    Matrix C2 = Cx^2+Cy^2;
    Matrix Rx = (Cy$*B2-By$*C2)$/D;
    Matrix Ry = (Bx$*C2-Cx$*B2)$/D;
    Matrix radius = Sqrt(Rx^2+Ry^2); 
    Matrix center = (Rx|Ry)+A;
    [[center, radius]]
  }
};

