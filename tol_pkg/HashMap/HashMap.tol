/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : HashMap.tol
// PURPOSE: Defines Package HashMap
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
NameBlock HashMap =
//////////////////////////////////////////////////////////////////////////////
[[

Text _.autodoc.description = "Handling and storing generic hashed mapping "
"data using internal index by name features of set";
Text _.autodoc.url = "";
Set _.autodoc.keys = [["hash","index","map"]];
Set _.autodoc.authors = [[
   "vdebuen@tol-project.org"]];

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Glossary = "Implements a glossary of unique terms";
Class @Glossary
//////////////////////////////////////////////////////////////////////////////
{
  Text _.name;
  Set  _.terms = Copy(Empty);
  Real _.card  = 0;

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.search = "Searchs for an existent term and returns "
  "the position in the glossary if exists or 0 if not.";
  Real search(Text text)
  ////////////////////////////////////////////////////////////////////////////
  {
    FindIndexByName(_.terms, text)
  };
  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.findOrAppend = "Searchs for an existent term and "
  "returns the position in the glossary if exists or append it to the "
  "glossary and returns the cardinal that is the position for the last "
  "added element.";
  Real findOrAppend(Text text)
  ////////////////////////////////////////////////////////////////////////////
  {
    Real found = search(text);
    If(found>0, found,
    {
      Real c = _.card+1;
      Set s = [[c]];
      Real PutName(text, s[1]);
      Set Append(_.terms,s,True);
      Real _.card := _.card+1;
      s[1] 
    })
  };
  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.New = "Creates a new glossary";
  Static @Glossary New(Text name)
  ////////////////////////////////////////////////////////////////////////////
  {
    @Glossary new = 
    [[
      Text _.name = name
    ]]
  }
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Glossary = "Implements a glossary of unique terms "
"that refers to arbitrary objects";
Class @Glossary : 
//////////////////////////////////////////////////////////////////////////////
{
  Text _.name;
  Set  _.terms = Copy(Empty);
  Real _.card  = 0;
  Anything _.noFound;

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.search = "Searchs for an existent term and returns "
  "the position in the glossary if exists or 0 if not.";
  Real search(Text text)
  ////////////////////////////////////////////////////////////////////////////
  {
    If(!Card(_.terms), 0, FindIndexByName(_.terms, text))
  };
  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.searchObj = "Searchs for an existent term and returns "
  "it object if exists or _.noFound if not.";
  Anything searchObj(Text text)
  ////////////////////////////////////////////////////////////////////////////
  {
    Real idx = find(text);
    If(idx, _.terms[idx], _.noFound)
  };
  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.findOrAppend = "Searchs for an existent term and "
  "returns the position in the glossary if exists or append it to the "
  "glossary and returns the cardinal that is the position for the last "
  "added element.";
  Real findOrAppend(Text text, Anything obj)
  ////////////////////////////////////////////////////////////////////////////
  {
    Real found = search(text);
    If(found>0, found,
    {
      Set s = [[obj]];
      Real PutName(text, s[1]);
      Set Append(_.terms,s,True);
      Real _.card := _.card+1;
      Copy(_.card)
    })
  };
  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.New = "Creates a new glossary of arbitrary objects";
  Static @Glossary New(Text name, Anything noFound)
  ////////////////////////////////////////////////////////////////////////////
  {
    @Glossary new = 
    [[
      Text _.name = name;
      Anything _.noFound = noFound
    ]]
  }
};


//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Append.Indexed = "Adds and index a new element to a "
"set and returns 0 if it´s all right. If an element with given name exists "
"already then returns its index, else returns 0";
Real Append.Indexed(Set set, Anything newElement, Text name)
//////////////////////////////////////////////////////////////////////////////
{
  Real idx = FindIndexByName(set, name );
  If(idx != 0, 
  {
    WriteLn("[GraphTools::Append.Indexed] Cannot add an existant element "+
            Name(set)+"["<<idx+"] with name "+ name,"E");
    0
  },
  {
    Set aux =  [[ Copy(newElement) ]];
    Anything PutName(name, aux[1]);
    Set Append(set, aux, True);
    idx
  })
}

]];
