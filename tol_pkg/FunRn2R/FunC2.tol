/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : FunC2.tol
// PURPOSE: Defines Class @FunC2
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.FunC2 = 
"Abstract root class to handle with mutivariate functions R^n -> R of class "
"C2, ie, continuous and having first and second partial derivatives that are "
"also continuous. For efficience reasons the base evaluates over massive "
"arrays of points stored as rows in a matrix.\n";
Class @FunC2
//////////////////////////////////////////////////////////////////////////////
{
  VMatrix eval.function.v(VMatrix X);
  VMatrix eval.partial.derivative.1.v(VMatrix X, Real i);
  VMatrix eval.partial.derivative.2.v(VMatrix X, Real i, Real j);

  ////////////////////////////////////////////////////////////////////////////
  Real eval.function.r(VMatrix x)
  ////////////////////////////////////////////////////////////////////////////
  {
    MatDat(eval.function.v(x),1,1)
  };
  ////////////////////////////////////////////////////////////////////////////
  Real eval.partial.derivative.1.r(VMatrix x, Real i)
  ////////////////////////////////////////////////////////////////////////////
  {
    MatDat(eval.partial.derivative.1.v(x,i),1,1)
  };
  ////////////////////////////////////////////////////////////////////////////
  Real eval.partial.derivative.2.r(VMatrix x, Real i, Real j)
  ////////////////////////////////////////////////////////////////////////////
  {
    MatDat(eval.partial.derivative.2.v(x,i,j),1,1)
  }
};


//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.FunC2.InBaseC2 = 
"Mutivariate functions R^n -> R of class C2 that is implemented as a linear "
"combination of the elemnets of a base of C2 functions R^n -> R, ie, an "
"instance of @BaseC2";
Class @FunC2.InBaseC2 : @FunC2
//////////////////////////////////////////////////////////////////////////////
{
  @BaseC2 _.base;
  VMatrix _.linComb;

  ////////////////////////////////////////////////////////////////////////////
  Static Text _.autodoc.member.New = "Creates an specified instance of "
  "@FunC2.InBaseC2";
  Static @FunC2.InBaseC2 New(@BaseC2 base, VMatrix linComb)
  ////////////////////////////////////////////////////////////////////////////
  {
    @FunC2.InBaseC2 aux = [[
      @BaseC2 _.base = base;
      VMatrix _.linComb = linComb
  ]]};

  ////////////////////////////////////////////////////////////////////////////
  Static Text _.autodoc.member.Random = "Creates a random instance of "
  "@FunC2.InBaseC2 of given norm";
  Static @FunC2.InBaseC2 Random(@BaseC2 base, Real norm)
  ////////////////////////////////////////////////////////////////////////////
  {
    VMatrix v = Gaussian(base::_.K,1,0,1);
    VMatrix u = v*VMatDat(MtMSqr(v),1,1)^(-0.5);
    New(base, u*norm)
  };

  ////////////////////////////////////////////////////////////////////////////
  VMatrix eval.function.v(VMatrix X)
  ////////////////////////////////////////////////////////////////////////////
  {
    Real _.base::upgrade.cache(X,0,0);
    _.base::function.m(X)*_.linComb
  };
  ////////////////////////////////////////////////////////////////////////////
  VMatrix eval.partial.derivative.1.v(VMatrix X, Real i)
  ////////////////////////////////////////////////////////////////////////////
  {
    Real _.base::upgrade.cache(X,1,0);
    _.base::partial.derivative.1.m(X,i)*_.linComb
  };
  ////////////////////////////////////////////////////////////////////////////
  VMatrix eval.partial.derivative.2.v(VMatrix X, Real i, Real j)
  ////////////////////////////////////////////////////////////////////////////
  {
    Real _.base::upgrade.cache(X,2,0);
    _.base::partial.derivative.2.m(X,i,j)*_.linComb
  };
  ////////////////////////////////////////////////////////////////////////////
  VMatrix eval.partial.integrate.1.v(VMatrix X, Real i)
  ////////////////////////////////////////////////////////////////////////////
  {
    Real _.base::upgrade.cache(X,1,0);
    _.base::partial.integrate.1.m(X,i)*_.linComb
  }

};

