/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : tools.tol
// PURPOSE: Defines Class BysVecLinReg::@Multivariate
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//Converts M in a column vector of m*n rows with stacked columns of M having
//m rows and n columns
VMatrix vmatrix2vec(VMatrix M)
//////////////////////////////////////////////////////////////////////////////
{
  Matrix Mt = VMat2Mat(M,True);
  Mat2VMat(Tra(GetNumeric([[ Mt ]])))
};

//////////////////////////////////////////////////////////////////////////////
//Converts a column vector into a tye 
VMatrix vec2vmatrix(VMatrix vec, VMatrix M)
//////////////////////////////////////////////////////////////////////////////
{
  Matrix Mt = VMat2Mat(M,True);
  Mat2VMat(DeepCopy([[Mt]],VMat2Mat(vec))[1],True)
};

//////////////////////////////////////////////////////////////////////////////
//Returns the position of cell (i,j) of M in stacked columns form
Real vmatrix2vec.getPosition(Real i, Real j, VMatrix M)
//////////////////////////////////////////////////////////////////////////////
{
  MatDat(VMat2Triplet(vmatrix2vec(Triplet([[ [[i,j,1]] ]],_.d,_.m))),1,1)
};

//////////////////////////////////////////////////////////////////////////////
//Draws an standard multinormal x with equality constraining linear equations 
// 
//  x ~ N(0,I)
//  C*x = c
//  
VMatrix eqConstrainedStdGaussian(VMatrix C, VMatrix c)
//////////////////////////////////////////////////////////////////////////////
{
  Real r = VRows(C);
  Real n = VColumns(C);
  VMatrix C2 = Constant(1,r,1) * (C$*C);
  Matrix p = ColumnPivots(VMat2Mat(C2));
  Set p.1 = MatSet(Sub(p,1,r+1,1,n-r))[1];
  Set p.2 = MatSet(Sub(p,1,1,  1,r  ))[1];

  VMatrix e.1 = Gaussian(n-r,1,0,1);
  VMatrix C.1 = SubCol(C,p.1);
  VMatrix C.2 = SubCol(C,p.2);
  VMatrix c.1 = C.1 * e.1;
  VMatrix c.2 = c-c.1;
  VMatrix e.2 = MinimumResidualsSolve(C.2,c.2);
  VMatrix err = C.2*e.2-c.2;
  Real errMax = VMatMax(Abs(err));
  If((n^3)+errMax^2 != n^3,
    WriteLn("[BysVecLinReg::eqConstrainedStdGaussian] errMax="<<errMax,"W"));
  Triplet(SetCol(p.1<<p.2) | Constant(n,1,1) | VMat2Mat(e.1 << e.2), n, 1)
//SetOfMatrix(Tra(p), Constant(n,1,1),VMat2Mat(e.1 << e.2))
};