/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
//////////////////////////////////////////////////////////////////////////////


Text email_ = "vdebuen@tol-project.org"; 
Text link_ = "";
Text summary_ = 
"test_0002 multivariate linear model with unknown covariance matrix" ;

Real numErr0 = Copy(NError);

#Require BysVecLinReg;
#Embed "../gen_multivariant_linear_regression.tol";

BysVecLinReg::@Multivariate MV = [[
  Text _.desc = summary_;
  Set _.outputNames = For(1,d,Text(Real i) { "Output_"<<i });
  Set _.inputNames = For(1,m,Text(Real i) { "Input_"<<i })
]];

Real MV::set.outputInput(Y,X);

//Real MV::set.prior.V.none(0);
Real MV::set.prior.V.inverseWishart(0.10, V);

VMatrix mcmc = Group("ConcatRows", For(1,sampleLength,VMatrix(Real numSim)
{
  If(!(numSim%100), 
    WriteLn("  Simulation "<<numSim+" of "<<sampleLength+" ["+Time+"]") );
  Tra(MV::gibbs.draw.vec.A(numSim)) |
  Tra(MV::gibbs.draw.vec.V(numSim))
}));

VMatrix avg = Tra(Constant(1,sampleLength,1/sampleLength)*mcmc);
VMatrix vec.A_ = BysVecLinReg::vmatrix2vec(
  SubRow(avg,Range(1,MV::_.m * MV::_.d,1)));
VMatrix vec.V_ = BysVecLinReg::vmatrix2vec(
  SubRow(avg,Range(MV::_.m * MV::_.d+1,VRows(avg),1)));

VMatrix A_ = BysVecLinReg::vec2vmatrix(vec.A_,MV::_.A);
VMatrix V_ = BysVecLinReg::vec2vmatrix(vec.V_,MV::_.V);
//Instant residuals correlation
VMatrix V.COR_ = Mat2VMat(NormDiag(VMat2Mat(V_)));

VMatrix E_ = Y - A_*X;
VMatrix E_t = Tra(E_);
VMatrix E01_ = CholeskiSolve(V.L,E_,"PtLLtP");

VMatrix S2_ = MMtSqr(E_);
VMatrix S2.COR_ = Mat2VMat(NormDiag(VMat2Mat(S2_)));

VMatrix cmpA = BysVecLinReg::vmatrix2vec(A) |
               BysVecLinReg::vmatrix2vec(A_); 
VMatrix cmpV = BysVecLinReg::vmatrix2vec(V) |
               BysVecLinReg::vmatrix2vec(V_); 
VMatrix cmpE = BysVecLinReg::vmatrix2vec(E) |
               BysVecLinReg::vmatrix2vec(E_); 
VMatrix cmpE01 = BysVecLinReg::vmatrix2vec(E01) |
                 BysVecLinReg::vmatrix2vec(E01_); 

Real stdErr  = VMatAvr(E01 ^2);
Real stdErr_ = VMatAvr(E01_^2);
Real quality.adjust = Min(1,Exp((stdErr-stdErr_)*N*d));

Real numErr1 = Copy(NError);

//Extented information about test behaviour
Set partialResults_ = 
[[
  numErr0, numErr1, stdErr, stdErr_
]];

Real quality_ = And(numErr0==numErr1)*quality.adjust;

//Return the results 
Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                  "Partial results = "<<partialResults_,
                  "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                  email_);
WriteLn(""<<resultStr_);
resultStr_

/* */


/* */
