/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
//////////////////////////////////////////////////////////////////////////////


Text email_ = "vdebuen@tol-project.org"; 
Text link_ = "";
Text summary_ = 
"test_0001 multivariate linear model with known covariance matrix" ;

Real numErr0 = Copy(NError);

#Require BysVecLinReg;
#Embed "../gen_multivariant_linear_regression.tol";


BysVecLinReg::@Multivariate MV = [[
  Text _.desc = "Modelo lineal multivariante para ventas de Fanta en Turquía",
  Set _.outputNames = For(1,d,Text(Real i) { "Output_"<<i }),
  Set _.inputNames = For(1,m,Text(Real i) { "Input_"<<i })
]];

Real MV::set.outputInput(Y,X);
Real MV::change.V(V);

VMatrix S = KroneckerProduct(V,MtMSqr(MV::_.X.Li));
VMatrix L = Tra(MV::_.IdxXLi) * MV::_.VxIm.Le;
VMatrix LLt = MMtSqr(L);

Real ok_.X.Li = 1-VMatMax(Abs((MV::_.X.Li * MV::_.X.Le+m*N)-m*N - Eye(m)));
Real ok_.IdxXL = 1-VMatMax(Abs((Tra(MV::_.IdxXL)*S*MV::_.IdxXL - MV::_.VxIm+m*d)-m*d));
Real ok_.IdxXLi = 1-VMatMax(Abs((MV::_.IdxXLi * MV::_.IdxXL+m*N)-m*N - Eye(m*d)));
Real okLLt = VMatMax(Abs((LLt-S+m*N)-m*N ))==0;

VMatrix mcmc = Group("ConcatRows", For(1,sampleLength,VMatrix(Real numSim)
{
  If(!(numSim%100), 
    WriteLn("  Simulation "<<numSim+" of "<<sampleLength+" ["+Time+"]") );
  Tra(MV::gibbs.draw.vec.A(0))
}));

//////////////////////////////////////////////////////////////////////////////
//Standard report
//////////////////////////////////////////////////////////////////////////////

Set report = { 
  BysMcmc::@Config cfg = BysMcmc::@Config::Default(0);
  BysMcmc::Inference::report(
  MV::_.desc, 
  Set colNames_ = SetConcat(For(1,MV::_.m,Set(Real j)
  {
    For(1,MV::_.d,Text(Real i)
    {
      "linblk_a_"<<i<<"_"<<j+"_"+MV::_.outputNames[i]+"_"+MV::_.inputNames[j]
    })
  })),
  Set BysMcmc::@BysInf.Report.Config
  (
    cfg::report.raftery.diag.q,
    cfg::report.raftery.diag.r,
    cfg::report.raftery.diag.s,
    cfg::report.raftery.diag.eps,
    cfg::report.acf.lag,
    cfg::report.histogram.parts,
    cfg::report.kerDens.points
  ),
  Matrix VMat2Mat(mcmc))};

VMatrix vec.A_ = Tra(Constant(1,sampleLength,1/sampleLength)*mcmc);
VMatrix cmp.A = vec.A | vec.A_;

VMatrix A_ = BysVecLinReg::vec2vmatrix(vec.A_,A);
VMatrix E_ = Y - A_*X;
VMatrix E01_ = CholeskiSolve(V.L,E_,"PtL");
VMatrix cmpE01 = BysVecLinReg::vmatrix2vec(E01) |
                 BysVecLinReg::vmatrix2vec(E01_); 

Real stdErr01_ = VMatAvr(E01_^2);
Real quality.adjust = Min(1,Exp((stdErr01-stdErr01_)*N*d));

Real numErr1 = Copy(NError);

//Extented information about test behaviour
Set partialResults_ = 
[[
  numErr0, numErr1, stdErr01, stdErr01_, quality.adjust,
  ok_.X.Li, ok_.IdxXL, ok_.IdxXLi, okLLt

]];

Real quality_ = And(
  numErr1==numErr0)*
  ok_.X.Li*ok_.IdxXL*ok_.IdxXLi*okLLt*
  quality.adjust;

//Return the results 
Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                  "Partial results = "<<partialResults_,
                  "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                  email_);
WriteLn(""<<resultStr_);
resultStr_

/* */


/* */
