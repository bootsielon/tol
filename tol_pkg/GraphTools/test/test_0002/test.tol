/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
//////////////////////////////////////////////////////////////////////////////
Text email_ = "vdebuen@tol-project.org"; 
Text link_ = ""; 
Text summary_ = "checking a simple graph";

  #Require GraphTools;
//#Embed "../../../_embed_all.tol";

//Write here the initial test TOL code if needed
Real numErr0 = Copy(NError);
Real numWar0 = Copy(NWarning);

Real rndSeed = 0;
Real vertex.num = 1000;
Real edge.num = 20000;
Real removeRepeatedEdges = True;

#Embed "../define.random.graph.tol";

Real vertex.idx  = IntRand(1,vertex.num);
Text vertex.name = graph::get.vertex.name(vertex.idx);

//The number of edges whose output is the selected vertex
Real vertex.in.deg   = graph::vertex.in.degree(vertex.idx);

//The number of edges whose input is the selected vertex
Real vertex.out.deg  = graph::vertex.out.degree(vertex.idx);

//Returns an sparse column matrix with True in all edges which Output is the
//specified vertex
VMatrix edge.match.in = graph::_.edge::match.feature.with.value(
  "Output", vertex.idx);

//We can obtain the selected set of edges as  
Set edge.in = MatQuery::SelectMatch(edge.match.in);

//Returns an sparse column matrix with True in all edges which Length is in 
//the interval [20,30] both included
VMatrix edge.match.length = graph::_.edge::match.feature.in.interval(
  "Length", True, 0, 70, True);

//Logic operations are faster in sparse matrix when there are no much non 
//zero cells
VMatrix edge.match.all = And(edge.match.in, edge.match.length);

//We can obtain the selected set of edges as  
Set edge.select = MatQuery::SelectMatch(edge.match.all);

//If we want another feature of selected edges as the input nodes
VMatrix in.select=graph::_.edge::extract.feature.rows("Input",edge.select);

//Checks the number of inputs is the input degree
Real ok.1 = VMatSum(edge.match.in) == vertex.in.deg;
//Checks that edge.select is a subset of edge.in
Real ok.2 = Card((edge.select * edge.in) - edge.select)==0;

Real numErr1 = Copy(NError);
Real numWar1 = Copy(NWarning);

Set partialResults_ = [[numErr0, numErr1, 
                        ok.1, ok.2]];

//This is a messure of the success of the test 
Real quality_ = And(numErr1 == numErr0, 
                    numWar1 <= numWar0+1, 
                    ok.1, ok.2);

//Return the results 
Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                  "Partial results = "<<partialResults_,
                  "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                  email_);
WriteLn(""<<resultStr_);
resultStr_

/* */

