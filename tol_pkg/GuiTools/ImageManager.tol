NameBlock ImageManager =
[[
  Struct @Image {
    Text name;
    Text imageID;
    Text data;
    Real type
  };

  Text createImageFromFileNull( Text imageName, Text imagePath )
  {
    Text ""
  };
  
  Text createImageFromDataNull( Text imageName, Text imageData )
  {
    Text ""
  };
  
  Set _.imageContainer = Copy( Empty );

  Real _imageFromData = 1;
  Real _imageFromFile = 2;

  Set _.creatorTable = [[ createImageFromDataNull, createImageFromFileNull ]];
  
  Real defineImageFromData( Text imageName, Text imageData )
  {
    Real idx = _findImage( imageName );
    If( idx, idx, {
        Text imageID = "";
        Real imageType = _imageFromData;
        Set img = @Image( imageName, imageID, imageData, imageType );
        Real _addImage( img )
      } )
  };
  
  Real defineImageFromFile( Text imageName, Text imagePath )
  {
    Real idx = _findImage( imageName );
    If( idx, idx, {
        Text imageID = "";
        Real imageType = _imageFromFile;
        Set img = @Image( imageName, imageID, imagePath, imageType );
        Real _addImage( img )
      } )
  };

  Text getImageResourceId( Text imageName )
  {
    Real idx = _findImage( imageName );
    Text If( idx, {
        _getImageResourceId( idx )
      }, {
        Text ""
      } )
  };

  Real setImageCreator( Real type, Code imageCreator )
  {
    Code _.creatorTable[ type ] := imageCreator;
    Real 1
  };

  Text createImageFromDataTcl( Text imageName, Text imageData )
  {
    Set script = [[ "ImageManager::createImageFromData",
                    imageName, imageData ]];
    Set result = Tcl_EvalEx( script );
    Text If( result[ "status" ], result[ "result" ], {
        Error( "createImageFromDataTcl : " + result[ "result" ] );
        Text ""
      } )
  };

  Text createImageFromFileTcl( Text imageName, Text imagePath )
  {
    Set script = [[ "ImageManager::createImageFromFile",
                    imageName, imagePath ]];
    Set result = Tcl_EvalEx( script );
    Text If( result[ "status" ], result[ "result" ], {
        Error( "createImageFromFileTcl : " + result[ "result" ] );
        Text ""
      } )
  };

  Real initTclCreators( Real void )
  {
    Real r1 = _defineTclAPI(0);
    Real r2 = _setTclCreators(0);
    Real And( r1, r2 )
  };

  Real _defineTclAPI( Real void )
  {
    Text script =
      "
namespace eval ::ImageManager {
  proc createImageFromData { imageName imageData } {
    image create photo -data $imageData
  }

  proc createImageFromFile { imageName imagePath } {
    set img [ image create photo ]
    set items [ file split $imagePath ]
    if { [ llength $items ] == 1 } {
      set img [ ::Bitmap::get [ file rootname $imagePath ] ]
    } else {
      $img read $imagePath
    }
    return $img
  }
}
      ";
    Set result = Tcl_Eval( script );
    Real If( result[ "status" ], result[ "status" ], {
        Error( "_defineTclAPI : " + result[ "result" ] );
        Real 0
      } )
  };
  
  Real _setTclCreators( Real void )
  {
    Real setImageCreator( _imageFromData, createImageFromDataTcl );
    Real setImageCreator( _imageFromFile, createImageFromFileTcl )
  };
  
  Real _addImage( Set image )
  {
    Set aux = image;
    Set Append( _.imageContainer, [[ PutName( image->name, aux ) ]], True );
    Real Card( _.imageContainer )
  };

  Real _findImage( Text imageName )
  {
    Real FindIndexByName( _.imageContainer, imageName )
  };
  
  Text _getImageResourceId( Real idx )
  {
    Set img = _.imageContainer[ idx ];
    Text If( img->imageID != "", img->imageID, {
        Code create = _.creatorTable[img->type];
        img->imageID := create( img->name, img->data )
      } )
  }  
]];
