//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for NameBlock Coherence
//////////////////////////////////////////////////////////////////////////////

  Text email_ = "vdebuen@tol-project.org"; 
  Text link_ = "";
  Text summary_ = "Name block syntax restrictions" ;

//Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  /* */
  NameBlock check.1.1 = Unknown;
  NameBlock check.1.2 = [[Real _a=0]];
  
  NameBlock MyNS1 =  
  [[
    Text _.autodoc.description = 
    "NameBlock de ejemplo de NameBlock/test_002";
    Real _aux_1 = 1;
    Real _aux_2 = 2;
    Real exported_1 = _aux_1+_aux_2;
    Real exported_2 = _aux_1-_aux_2 
  ]];

  Real check.1.1 = MyNS1::_aux_1;       //Error: Invalid access to namespace 
  Real check.1.2 = MyNS1[3];            //Error: Invalid access to namespace 
  Real check.1.3 = MyNS1["exported_2"]; //Error: Invalid access to namespace 
 
  Text MyNS1::_.autodoc.description := "no se puede cambiar";
  
  /* */
//Extented information about test behaviour
  Set partialResults_ = 
  [[
    Real numErr = Copy(NError)-numErr0;
    Real ok.1.1 = !ObjectExist("NameSpace","check.1.1"),
    Real ok.1.2 = !ObjectExist("NameSpace","check.1.2"),
    Real ok.1.3 = MyNS1::_.autodoc.description == 
                  "NameBlock de ejemplo de NameBlock/test_002",
    Real ok.2.1 = !ObjectExist("Real","check.2.1"),
    Real ok.2.2 = !ObjectExist("Real","check.2.2"),
    Real ok.2.3 = !ObjectExist("Real","check.2.3")
  ]];
  Real ok = Group("And",partialResults_);
//This is a messure of the success of the test 
  Real quality_ = And(numErr == 13, ok);

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_


/* */
