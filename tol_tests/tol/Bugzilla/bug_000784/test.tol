/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary
  Real bugNum_ =  784;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_ = "Range: Inadecuate result";
  Text link_ = GetTolBugzillaLink(bugNum_);

  //Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);

  Real a = -10;
  Real b =  50;
  Real p =   2;

  Set c.1 = Range(a, b,  p);
  Set c.2 = Range(b, a, -p);
  Set c.3 = Range(a, b, -p);
  Set c.4 = Range(b, a,  p);
  Set c.5 = Range(a, b,  0);
  
  Matrix b.1 = DifEq(1/(1-B),Rand(Card(c.1),1,p,p))+(a-p);
  Matrix b.2 = Reverse(b.1);

  Real ok.1 = MatMax(Abs(b.1-SetCol(c.1)))==0;
  Real ok.2 = MatMax(Abs(b.2-SetCol(c.2)))==0;
  Real ok.3 = Card(c.3)==0;
  Real ok.4 = Card(c.3)==0;
  Real ok.5 = Card(c.3)==0;

  Real numErr1 = Copy(NError);
  Real numWar1 = Copy(NWarning);

  Set partialResults_ = [[numErr0, numErr1,
                          ok.1,ok.2,ok.3,ok.4,ok.5]];

//This is a messure of the success of the test 
  Real quality_ = And(numErr1 == numErr0, 
                      numWar1 == numWar0+1,
                      ok.1,ok.2,ok.3,ok.4,ok.5);

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_;

/* */

