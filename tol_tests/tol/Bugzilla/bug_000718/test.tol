/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary
  Real bugNum_ =  718;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_ = 
  "Logit function returns wrong probability";
  Text link_ = GetTolBugzillaLink(bugNum_);

  //Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);
    
  Set info     = Ois.Load("data.oza")[1];
  Real _N  = Rows(info[1]);
  Real _N_ = _N;
  Set selIdx   = MatSet(Sub(RandPermutation(1,_N),1,1,1,_N_))[1];
  Matrix yFull = SubRow(info[1], selIdx);
  Matrix XFull = SubRow(info[2], selIdx);
  Set LogitTol  = Logit(yFull, XFull);
  Matrix BParam = LogitTol[1];
  Matrix py     = LogitTol[3];
  Matrix pyNew  = Exp(XFull*BParam)$/RSum(Exp(XFull*BParam),1);
  Matrix compP  = py|pyNew;
  Matrix difP   = py-pyNew;
  Real N = Rows(XFull);
  Real n = Columns(XFull);
  Real compInf  = MatMin(difP);
  Real compSup  = MatMax(difP);
  Real difNum   = MatSum(GT(Abs(difP), Rand(N, 1, 0.1, 0.1)));

//Aunque el número de diferencias mayores al 10% es poco en comparación al total (difNum frente a N) no debería ser así.

  Real numErr1 = Copy(NError);
  Real numWar1 = Copy(NWarning);

  Set partialResults_ = [[numErr0, numErr1, numWar0, numWar1, difNum]];

//This is a messure of the success of the test 
  Real quality_ = And(numErr1 == numErr0, 
                      numWar1 == numWar0,
                      difNum == 0);

//Return the results 
  Set resultStr_ = strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_;

/* */
