/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary
  Real bugNum_ =  815;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_="Inadecuate response of submatrix functions in trivial cases";
  Text link_ = GetTolBugzillaLink(bugNum_);

  //Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);
 
  Real r = IntRand(1,10);
  Real c = IntRand(1,10);
  Real v = Rand(-10,10);
  Matrix A = Zeros(r,c);
  Matrix B = Constant(r,c,v);
  Matrix C = SubRow(B, Empty);
  Matrix D = SubCol(B, Empty);
  VMatrix E = Constant(r,c,v);
  
  Real ok.0 = MatSum(A)==0;
  Real ok.1 = (MatAvr(B)==v) & (MatStDs(B)==0);
  Real ok.2 = (Rows(C)==0) & (Columns(C)==c);
  Real ok.3 = (Rows(D)==r) & (Columns(D)==0);
  Real ok.4 = (VMatAvr(E)==v) & (VMatStDs(E)==0);

  Real numErr1 = Copy(NError);
  Real numWar1 = Copy(NWarning);

  Set partialResults_ = [[ numErr0, numErr1,
   ok.0, ok.1, ok.2, ok.3, ok.4 ]];

//This is a messure of the success of the test 
  Real quality_ = And(numErr1 == numErr0, 
                      numWar1 == numWar0,
                      ok.0, ok.1, ok.2, ok.3, ok.4);

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_;

/* */

