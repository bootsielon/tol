/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary
  Real bugNum_ =  910;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_="Fallo en la fnción MMtSqr de VMatrix en el caso sparse";
  Text link_ = GetTolBugzillaLink(bugNum_);

  //Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);
     
  VMatrix Xs = Rand(10,16,-1,1,"Cholmod.R.Sparse",0.20*10*16);
  VMatrix Xd = Convert(Xs,"Blas.R.Dense");
  VMatrix XsXst = MMtSqr(Xs);
  VMatrix XdXdt = MMtSqr(Xd);
  VMatrix XXt = MtMSqr(Tra(Xs));
  Real q1 = Max(0,1 - VMatMax(Abs(XsXst-XXt)));
  Real q2 = Max(0,1 - VMatMax(Abs(XdXdt-XXt)));
    
  Real numErr1 = Copy(NError);
  Real numWar1 = Copy(NWarning);

  Set partialResults_ = [[ numErr0, numErr1, q1, q2]];

//This is a messure of the success of the test 
  Real quality_ = And(numErr1 == numErr0, 
                      numWar1 == numWar0)*q1*q2;

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_;

/* */

