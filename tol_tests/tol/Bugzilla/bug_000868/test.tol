/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary
  Real bugNum_ =  868;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_="fallo en triplet";
  Text link_ = GetTolBugzillaLink(bugNum_);

  //Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);

Set triplet = {Set Include( "triplet.oza" )[1]};
Set uniqueTriple = Classify( triplet, Real( Set a, Set b ) {
    Real cmp1 = Compare(a[1],b[1]);
    If( cmp1, cmp1, Compare( a[2],b[2] ) )
 } );
Real ok.1 = Eq( Card( uniqueTriple ), Card( triplet ) );
WriteLn( "ok.1 = Eq( Card( uniqueTriple ), Card( triplet ) ) = " << ok.1 );
Real check_idx = 637;
Real check_r = triplet[check_idx][1]; //284;
Real check_c = triplet[check_idx][2]; //137;
Real check_x = triplet[check_idx][3]; //0.16148984275;
Matrix T = SetMat(triplet);
Real M = MatMax(SubCol(T,[[1]]));
Real N = MatMax(SubCol(T,[[2]]));
VMatrix A1 = Convert( Triplet      ( T,       M, N ), "Cholmod.R.Sparse" );
VMatrix A2 = Convert( TripletUnique( T,       M, N ), "Cholmod.R.Sparse" );
VMatrix A3 = Convert( Triplet      ( triplet, M, N ), "Cholmod.R.Sparse" );
VMatrix diff.2.1 = A2 - A1;
VMatrix diff.3.1 = A3 - A1;
Real ok.2.2.1 = 1 - VMatMax( Abs( diff.2.1 ) );
Real ok.2.3.1 = 1 - VMatMax( Abs( diff.3.1 ) );
WriteLn( "ok.2.2.1 = 1-Max(Abs(diff.2.1)) = " << ok.2.2.1 );
WriteLn( "ok.2.3.1 = 1-Max(Abs(diff.3.1)) = " << ok.2.3.1 );
Real cell1 = VMatDat( A1, check_r, check_c );
Real ok.3.1 = 1 - (cell1 - check_x);
Real cell2 = VMatDat( A2, check_r, check_c );
Real ok.3.2 = 1- (cell2 - check_x);
Real cell3 = VMatDat( A3, check_r, check_c );
Real ok.3.3 = 1- (cell3 - check_x);
WriteLn( "T["<<check_r+","<<check_c+"]="<<check_x);
WriteLn( "A1["<<check_r+","<<check_c+"]="<<cell1);
WriteLn( "A2["<<check_r+","<<check_c+"]="<<cell2);
WriteLn( "A3["<<check_r+","<<check_c+"]="<<cell3);


  Real numErr1 = Copy(NError);
  Real numWar1 = Copy(NWarning);

  Set partialResults_ = [[ numErr0, numErr1, 
  ok.1, ok.2.2.1, ok.2.3.1, ok.3.1, ok.3.2]];

//This is a messure of the success of the test 
  Real quality_ = And(numErr1 == numErr0, 
                      numWar1 == numWar0)*
                  Min(ok.1, ok.2.2.1, ok.2.3.1, ok.3.1, ok.3.2);

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_;

/* */

