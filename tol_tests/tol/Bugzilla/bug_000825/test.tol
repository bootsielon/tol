/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary
  Real bugNum_ =  825;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_="How to access global objects";
  Text link_ = GetTolBugzillaLink(bugNum_);

  //Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);
 
  Real tolerance = Tolerance;
  Set aux =
  {
    Real Tolerance = 2;
    
    [[(Real ::Tolerance), Tolerance]]
  };
  Real ok.1 = aux[1]==tolerance;
  Real ok.2 = aux[2]==2;

  Set aux.fail =
  {
    Real Tolerance = 2;
    //Esto da un error porque no es posible aplicar el operador de búsqueda 
    //global al tipo Anything debido a que es posible crear variables de
    //distinto tipo con el mismo nombre y todas ellas serían aceptables dando
    //lugar a una ambigüedad dificil de resolver sin pérdida de eficiencia.
    [[ ::Tolerance, Tolerance]]
  };

  Class @A
  {
    Real x;
    Static Real f(Real x) { x }
  };
  Real s = @A::f(0);
  Real ok.3 = ObjectExist("Real","s");
  
  @A a = [[ Real x = 1 ]];
  Real a.x = a::x;
  Real ok.4 = ObjectExist("Real","a.x");

  Real numErr1 = Copy(NError);
  Real numWar1 = Copy(NWarning);

  Set partialResults_ = [[ numErr0, numErr1,
   ok.1, ok.2, ok.3, ok.4 ]];

//This is a messure of the success of the test 
  Real quality_ = And(numErr1 == numErr0, 
                      numWar1 == numWar0,
                      ok.1, ok.2, ok.3, ok.4);

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_;

/* */


