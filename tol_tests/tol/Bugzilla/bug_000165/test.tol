//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

  Text PutRealFormat("%.15g");

//Sets the bugzilla identifier number, your e-mail and the bug´s summary 
  Real bugNum_ = 165;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_ = "a random error in AIA function";
  Text link_ = GetTolBugzillaLink(bugNum_);

//Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);

  Real NumCiclos = 10000; 
  WriteLn("Inicio: "+ Time); 
  Real Cont = Copy(0); 
  Real While(LT(Cont, NumCiclos), 
  { 
    Real (Cont := Cont+1); 
    Real If(EQ(Cont%100, 0), 
            WriteLn(". "+ FormatReal(Cont, "%.0lf") +"/"+ 
                          FormatReal(NumCiclos, "%.0lf") +"\n"), 
            If(EQ(Cont%10, 0), 
               Write("."),
               0)); 
    Text nombrefinal = "RationExpand(y2000m11d25, Diario, PulseOut)"; 
    Serie sr = Eval(nombrefinal); 
    Copy(TRUE) 
  }); 
  WriteLn("Fin: "+ Time); 
  
//Extented information about test behaviour
  Set partialResults_ = 
  [[
    Real ok = Cont==NumCiclos
  ]];

//This is a messure of the success of the test 
  Real quality_ = And
  (
    NError   == numErr0, 
    NWarning == numWar0, 
    ok
  );

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_
