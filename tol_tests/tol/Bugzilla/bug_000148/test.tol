//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary 
  Real bugNum_ = 148;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_ = "For returned type wrong parsed?";
  Text link_ = GetTolBugzillaLink(bugNum_);

//Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);

  WriteLn("a1... OK");
  Set a1 = For(1, 2, Text(Real n) { SetOfReal(n) });
  WriteLn("a2... good result but confusing ERROR text");
  Set a2 = For(1, 2, Text(Real n) { Set SetOfReal(n) });
  WriteLn("a2... BAD result NO error text");
  Set a3 = For(1, 2, Text(Real n) { Set ss = SetOfReal(n) });
  Text x = {Real a = 1.0};
  Polyn p = { TimeSet ts = WD(3) };
  Matrix m = { Polyn p = 1-B };

//Extented information about test behaviour
  Set partialResults_ = 
  [[
    Real ok1 = Card(a1)==0,
    Real ok2 = Card(a2)==0,
    Real ok3 = Card(a3)==0,
    Real ok4 = !ObjectExist("Text",   "x") & !ObjectExist("Real",    "x"),
    Real ok5 = !ObjectExist("Polyn",  "p") & !ObjectExist("TimeSet", "x"),
    Real ok6 = !ObjectExist("Matrix", "m") & !ObjectExist("Polyn",   "x")
  ]];

  Real numErr1 = Copy(NError);
  Real numWar1 = Copy(NWarning);

//This is a messure of the success of the test 
  Real quality_ = And
  (
    numErr1 >= numErr0+15, 
    numWar1 == numWar0, 
    1
  );

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_
