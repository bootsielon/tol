/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary
  Real bugNum_ =  714;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_ = 
  "Herencia. Error inesperado";
  Text link_ = GetTolBugzillaLink(bugNum_);

  //Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
    
  
  Class @Variable
  {
    Text _.name
  };

  Class @Input
  {
    Text _.name;
    @Variable _.variable
  };

  Class @ExplicativeTerm
  {
    Text _.name;
    Text _.description  = "Sin descripción";
    Set  _.parameters   = Copy(Empty)
  };

  Class @LinearExplicativeTerm: @ExplicativeTerm
  {
    @Input _.input /*;
    Real unused_1_=? */
  };

  Class @OmegaExplicativeTerm : @LinearExplicativeTerm
  {
    Real _.member
  };

  @OmegaExplicativeTerm D1 = 
  [[ 
    Text _.name = "D1", 
    @Input _.input = 
    [[ 
      Text _.name = "input", 
      @Variable _.variable = 
      [[ 
        Text _.name = "mi variable" 
      ]] 
    ]], 
    Real _.member = 2.0 
  ]];

    
  Real numErr1 = Copy(NError);

  Set partialResults_ = [[numErr0, numErr1]];

//This is a messure of the success of the test 
  Real quality_ = And(numErr1 == numErr0);

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_;

/* */
