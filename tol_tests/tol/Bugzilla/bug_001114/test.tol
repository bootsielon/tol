/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary
  Real bugNum_ =  1114;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_="Determine whether two objects are the same";
  Text link_ = GetTolBugzillaLink(bugNum_);

  //Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);

  Set aux.1 = [[Tpa, SqlEngine]];
  Set aux.2 = [[aux.1, Empty]];

  Set ok.all = [[
    Real ok.1 = SameNameBlock(Tpa, SqlEngine)==0;
    Real ok.2 = SameNameBlock(SqlEngine, SqlEngine)==1;
    Real ok.3 = SameNameBlock(Tpa, aux.1[1]) == 1;
    Real ok.4 = SameSet(Empty, aux.2[2]) == 1;
    Real ok.5 = SameSet( aux.2[1], aux.2[2]) == 0
  ]];


  Real numErr1 = Copy(NError);
  Real numWar1 = Copy(NWarning);


  Set partialResults_ = [[ numErr0, numErr1]] << ok.all;

//This is a messure of the success of the test 
  Real quality_ = Group("And",[[numErr1 == numErr0, numWar1 == numWar0]] << ok.all);

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_;

/* */

