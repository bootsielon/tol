/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : estim.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//Loads general tools for BSR tests
//////////////////////////////////////////////////////////////////////////////
#Require BysMcmc;

BysMcmc::@Config bsr.config = Include("model/master.bsr.config.oza")[1];
Set bsr.parsed = BSR.Parse("model/master.bsr","master");

Real bsr.config::mcmc.cacheLength := 100;
Real bsr.config::mcmc.burnin := 0;
Real bsr.config::mcmc.sampleLength := 200;

Real bsr.config::do.report := bsr.config::mcmc.sampleLength>=2000;
Real bsr.config::do.eval := bsr.config::do.report;
Real bsr.config::do.linear.effects := bsr.config::do.report;
Real bsr.config::do.save.DBApi.Estim.Oza := bsr.config::do.report;

Real bsr.config::bsr.linBlk.MH.useAfterIter := 0;
Real bsr.config::bsr.linBlk.MH.maxRejected := 1/0;
Real bsr.config::bsr.linBlk.MH.maxConsecutive := 1/0;

BysMcmc::@Cycler cycler = BysMcmc::Bsr::Gibbs::GetCycler(
  bsr.parsed, 
  BysMcmc::@McmcPartialHandler::Null(0), 
  bsr.config, 
  BysMcmc::@Notifier::Null(0));

BysMcmc::@Estimation estim = BysMcmc::@Estimation::New(cycler);

Real estim::Run(0);
