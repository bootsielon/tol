@MTryMetropolis_ARIMA mtm_arima = @MTryMetropolis_ARIMA::New(
  Z,
  SIGMA,
  arima.0,
  False);

Real mtm_arima::_.k := If(ObjectExist("Real","k"), k, 
  IntRand(1,mtm_arima::_.n));

Matrix mcmc = Rand(0,mtm_arima::_.n,0,0);

Real If(!ObjectExist("Matrix","modEst.0::Correlations::COV"),
{
  Real mtm_arima::_.s := 0.001
},
{
  Matrix L = {
    Matrix COV = modEst.0::Correlations::COV;
    Real n = mtm_arima::_.n;
    Real r = Rows(COV);
    Real k = r-n+1;
    Choleski(Sub(COV,k,k,n,n))
  };
  Matrix Li = LTInverse(L);
  VMatrix mtm_arima::_.L := Mat2VMat(L);
  VMatrix mtm_arima::_.Li := Mat2VMat(Li);
  Real mtm_arima::_.s := 1
});
  

Real numSim = 0;

Real append_draw(VMatrix draw)
{
  If(!(numSim%100), WriteLn("
##############################################################################
Simulation "<<numSim+ " _.acceptRatio="<<mtm_arima::_.acceptRatio));
  Matrix mcmc := mcmc << VMat2Mat(Tra(draw));
  Real numSim := numSim+1
};

/* * / 
Real mtm_arima::_.sFactor := 1.01;
Real numSim := 0;
Real mh.t0 = Copy(Time);
While(numSim<1000, append_draw(mtm_arima::draw_single_try(0)));
Real mh.time = (Copy(Time) - mh.t0)/numSim;
WriteLn("Time by MH simulation "<<mh.time);

/* */
Real mtm_arima::_.sFactor := 1.01;
Real numSim := 0;
Real mtm.t0 = Copy(Time);
//Real TolOprProfiler.Enabled := True;
While(And(numSim<2500,NError==numErr.0), append_draw(mtm_arima::draw_multiple_try(0)));
//Real TolOprProfiler.Dump("draw_multiple_try.k"<<mtm_arima::_.k+".csv");
Real mtm.time = (Copy(Time) - mtm.t0)/numSim;
Real mtm.speed = mtm_arima::_.acceptRatio / mtm.time;
WriteLn("Time by MTM simulation "<<mtm.time);
/* */
Real numErr = Copy(NError) - numErr.0;
Real numWar = Copy(NWarning) - numWar.0;

Text report.path = "mtrymh.tab";

Real raftery.burnin = ?;
Real raftery.thinning = ?;
Real raftery.rate = ?;
Real raftery.speed = ?;
Real burnin = 500;

Matrix cmp = mcmc | Group("ConcatColumns", For(1,Rows(PARAM),Matrix(Real j) 
{
  Constant(Rows(mcmc),1,MatDat(PARAM,j,1))
}));
Set raftery.report = If(numErr, Copy(Empty),
{[[
  Matrix raftery=RCODA::raftery.diag(mcmc,{ [[
    Real verbose=TRUE, 
    Real varByCol=TRUE,
    Real q = 0.025;
    Real r = 0.007;  
    Real s = 0.950;  
    Real eps = 0.001
  ]]});
  Real raftery.burnin := MatMax(SubCol(raftery,[[1]]));
  Real burnin := Min(raftery.burnin,500);
  Real raftery.thinning := MatMax(SubCol(raftery,[[4]]));
  Real raftery.rate := (numSim-raftery.burnin)/(numSim*raftery.thinning);
  Real raftery.speed := raftery.rate / mtm.time
]]});
  
Matrix mcmc.sub = SubRow(mcmc, Range(burnin+1,Rows(mcmc),1));
Matrix x.avr = Tra(Constant(1,Rows(mcmc.sub),1/Rows(mcmc.sub))*mcmc.sub);
Set arima.avr = mtm_arima::col2arima(Mat2VMat(x.avr));
Set ev.avr = ARIMALevinsonEval(arima.avr, Tra(SerMat(z)));
Serie e;
Serie residuals.avr  = 
{
  Matrix res = ev.avr[4];
  Date   ini = Succ(Last(z),Diario,-Rows(ev.avr[4])+1);
  If(!Rows(res), 0*z, MatSerSet(Tra(res),Diario,ini)[1])
};
Real logLH.real = (SimulArima::EvalRealARIMA::ev)[12];
Real logLH.avr = (ev.avr)[12];
Real prob.refuse = Min(1,Max(0,1-Exp(logLH.avr-logLH.real)));

Real Q_draw_by_Pi_draw = mtm_arima::_.num_Q_draw/mtm_arima::_.num_draw;
Real num_logWeight_by_Pi_draw = mtm_arima::_.num_logWeight/mtm_arima::_.num_draw;

Text report = ""
  <<rndSeed+"\t"
  <<rndSeed_iv+"\t"
  <<arima.label+"\t"
  <<mtm_arima::_.n+"\t"
  <<mtm_arima::_.k+"\t"
  <<Q_draw_by_Pi_draw+"\t"
  <<num_logWeight_by_Pi_draw+"\t"
  <<arima.time+"\t"
  <<mtm.time+"\t"
  <<mtm_arima::_.acceptRatio+"\t"
  <<mtm.speed+"\t"
  <<raftery.burnin+"\t"
  <<raftery.thinning+"\t"
  <<raftery.rate+"\t"
  <<raftery.speed+"\t"
  <<logLH.real+"\t"
  <<logLH.avr+"\t"
  <<prob.refuse+"\t"
  <<numErr+"\t"
  <<numWar+"\n";
Text If(!FileExist(report.path), WriteFile(report.path,""
  +"rndSeed\t"
  +"rndSeed_iv\t"
  +"arima.label\t"
  +"mtm_arima::_.n\t"
  +"mtm_arima::_.k\t"
  +"Q_draw_by_Pi_draw\t"
  +"num_logWeight_by_Pi_draw\t"
  +"arima.time\t"
  +"mtm.time\t"
  +"mtm_arima::_.acceptRatio\t"
  +"mtm.speed\t"
  +"raftery.burnin\t"
  +"raftery.thinning\t"
  +"raftery.rate\t"
  +"logLH.real\t"
  +"logLH.avr\t"
  +"prob.refuse\t"
  +"numErr\t"
  +"numWar\n"));

WriteLn(report);
Text AppendFile(report.path,report);


