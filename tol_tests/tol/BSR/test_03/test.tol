//////////////////////////////////////////////////////////////////////////////
//FILE: test.tol
//AUTHOR: vdebuen@tol-project.org
//CREATION: 2008-05-08
//PURPOSE: Testing full linear block aproach to simulating a Hierarchycal 
//         Linear Model with restrictions of inequality by using NameBlock
//         StdLib::BysMcmc.
//////////////////////////////////////////////////////////////////////////////

Text email_ = "vdebuen@tol-project.org"; 
Text link_ = "";
Text summary_ = 
"Testing full linear block aproach to simulating a Hierarchycal "
"Linear Model with restrictions of inequality by using NameBlock "
"StdLib::BysMcmc." ;

Real numErr0 = Copy(NError);

//Random seed setting
Real PutRandomSeed(0);
Real rndSeed = GetRandomSeed(0);
WriteLn("Current Random Seed = "<<rndSeed);

//Creates a random model and writes it in "parse.bsr"
Set Include("load.tol");

//Real TolOprProfiler.Enabled := True;

BysMcmc::Config bsr.config = [[
  Real mcmc.sampleLength = 2000;
  Real mcmc.cacheLength = 100;
  Real mcmc.burnin = 100;
//Code bsr.scalarSampler.armaBlock = BysMcmc::Options::Scalar.Sampler::Arms;
//Code bsr.scalarSampler.nonLinBlock = BysMcmc::Options::Scalar.Sampler::Arms;
  Text bsr.arimaFilter   = BysMcmc::Options::Arima.Filter::FastChol;
  Real do.resume = 0
]];

BysMcmc::Cycler cycler = BysMcmc::Bsr::Gibbs::GetCycler(
  mod::bsr.parsed, bsr.config, BysMcmc::NoNotifier(0));

Set estim = BysMcmc::Estim(cycler);

//Real TolOprProfiler.Dump("model.03");

Struct CompareStruct 
{
  Real Index,
  Text Name,
  Real RealValue,
  Real Estimated,
  Real Difference,
  Real Sigma,
  Real K_SigDif
};

//////////////////////////////////////////////////////////////////////////////
//Table this set to view real and estimated parameters
//////////////////////////////////////////////////////////////////////////////
Set CompareTable = 
{  
  Matrix var.real = 
    mod::_beta << 
    mod::_variance <<
    mod::_arma <<
    mod::_inpMis <<
    mod::_outMis;
  For(1,Card(estim::report::colNames), Set(Real k)
  {
    Real x.r = MatDat(var.real,k,1);
    Real x.e = (estim::report::coda.summary)[k]->mean_;
    Real x.d = x.r-x.e;
    Real x.s = Sqrt((estim::report::coda.summary)[k]->sd_);
    Real x.k = x.d/x.s;
    CompareStruct
    (
      k, 
      estim::report::colNames[k], 
      x.r, 
      x.e, 
      x.d,
      x.s,
      x.k 
    )
  })
};

//////////////////////////////////////////////////////////////////////////////
//Chart this set to view real and estimated parameters
//////////////////////////////////////////////////////////////////////////////
Set CompareChart = Extract(CompareTable,3,4);

Set DifChart  = Extract(CompareTable,5);
Set KDifChart = Extract(CompareTable,7);

/* */

Set quality.obs = For(1,mod::K1,Real(Real k)
{
  MatStDs(((mod::obsNodes      )[k])::e       ) /
  StDsS  (((estim::eval.average)[k])::serResiduals)
});

Real numErr1 = Copy(NError);

//Extented information about test behaviour
Set partialResults_ = 
[[
  numErr0, numErr1
]];

//This is a messure of the success of the test 
Real quality_ = And(numErr0 == numErr1)*SetMin([[1]]<<quality.obs);

//Return the results 
Set resultStr_ = strTestStatus(summary_, link_, quality_,
                  "Partial results = "<<partialResults_,
                  "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                  email_);
WriteLn(""<<resultStr_);
resultStr_

/* */
