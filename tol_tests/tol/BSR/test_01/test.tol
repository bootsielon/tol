//////////////////////////////////////////////////////////////////////////////
//FILE: test.tol
//AUTHOR: vdebuen@tol-project.org
//CREATION: 2008-05-08
//PURPOSE: Testing full linear block aproach to simulating a Hierarchycal 
//         Linear Model with restrictions of inequality by using NameBlock
//         StdLib::BysMcmc.
//////////////////////////////////////////////////////////////////////////////

Text email_ = "vdebuen@tol-project.org"; 
Text link_ = "";
Text summary_ = 
"Testing full linear block aproach to simulating a Hierarchycal "
"Linear Model with restrictions of inequality by using NameBlock "
"StdLib::BysMcmc." ;

Real numErr0 = Copy(NError);

//Random seed setting
Real PutRandomSeed(0);
Real rndSeed = GetRandomSeed(0);
WriteLn("Current Random Seed = "<<rndSeed);

//Creates a random model and writes it in "parse.bsr"
Set Include("load.tol");

BysMcmc::Config bsr.config = [[
//MCMC dimensions
  Real mcmc.burnin        =  100; 
  Real mcmc.sampleLength  = 2000;
  Real mcmc.cacheLength   =  100;
//Basic master configuration
  Real basic.cholesky.epsilon          = 1.E-13;
  Real basic.cholesky.warningFreq      = 100;
  Real basic.truncMNormal.gibbsNumIter = 5;
  Real bsr.iniVal.try.givenByUser = 2;
  Real bsr.iniVal.try.zero = 3;
  Real bsr.iniVal.try.cnstrMinNorm = 4;
  Real bsr.iniVal.try.cnstrMLE = 1;
//Report configuration
  Real report.raftery.diag.q   = 0.025;
  Real report.raftery.diag.r   = 0.007;   
  Real report.raftery.diag.s   = 0.950;   
  Real report.raftery.diag.eps = 0.001; 
  Real report.acf.lag          = 20,
  Real report.histogram.parts  = 100;
  Real report.kerDens.points   = 0;
//Generic flags
  Real do.resume          =  0;
  Real do.report          =  True;
  Real do.eval            =  True;
  Real do.linear.effects  =  False
]];

BysMcmc::Cycler cycler = BysMcmc::Bsr::Gibbs::GetCycler(
  mod::bsr.parsed, bsr.config, BysMcmc::NoNotifier(0));

BysMcmc::Estimation estim = BysMcmc::Estim(cycler);

Struct CompareStruct 
{
  Real Index,
  Text Name,
  Real RealValue,
  Real Estimated
};

//////////////////////////////////////////////////////////////////////////////
//Table this set to view real and estimated parameters
//////////////////////////////////////////////////////////////////////////////
Set CompareTable = 
{  
  Matrix beta.var.real = 
    mod::_beta << 
    mod::_variance;
  Matrix beta.var.sim  = SetMat(Extract(estim::report::coda.summary,2));
  For(1,Card(estim::report::colNames), Set(Real k)
  {
    CompareStruct
    (
      k, 
      estim::report::colNames[k], 
      MatDat(beta.var.real,k,1), 
      MatDat(beta.var.sim, k,1)
    )
  })
};

//////////////////////////////////////////////////////////////////////////////
//Chart this set to view real and estimated parameters
//////////////////////////////////////////////////////////////////////////////
Set CompareChart = Extract(CompareTable,3,4);

Set quality.obs = For(1,mod::K1,Real(Real k)
{
  MatStDs(((mod::obsNodes      )[k])::e) /
  MatStDs(((estim::eval.average)[k])::noise)
});

Real numErr1 = Copy(NError);

//Extented information about test behaviour
Set partialResults_ = 
[[
  numErr0, numErr1
]];

//This is a messure of the success of the test 
Real quality_ = And(numErr0 == numErr1)*SetMin([[1]]<<quality.obs);

//Return the results 
Set resultStr_ = strTestStatus(summary_, link_, quality_,
                  "Partial results = "<<partialResults_,
                  "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                  email_);
WriteLn(""<<resultStr_);
resultStr_

/* */

