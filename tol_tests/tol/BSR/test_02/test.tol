//////////////////////////////////////////////////////////////////////////////
//FILE: test.tol
//AUTHOR: vdebuen@tol-project.org
//CREATION: 2008-05-08
//PURPOSE: Testing full linear block aproach by using NameBlock 
//StdLib::BysMcmc to simulating a Hierarchycal Linear Model with restrictions 
//of inequality, missing values at input and white noise in residuals.
//////////////////////////////////////////////////////////////////////////////
Text email_ = "vdebuen@tol-project.org"; 
Text link_ = "";
Text summary_ = 
"Testing full linear block aproach by using NameBlock "
"StdLib::BysMcmc to simulating a Hierarchycal Linear Model with restrictions "
"of inequality, missing values at input and white noise in residuals." ;

Real numErr0 = Copy(NError);

Real PutRandomSeed(0);
Real rndSeed = GetRandomSeed(0);
WriteLn("Current Random Seed = "<<rndSeed);


//Creates a random model and writes it in "parse.bsr"
Set Include("load.tol");


BysMcmc::@Config bsr.config =
[[
//MCMC dimensions
  Real mcmc.burnin        =  100; 
  Real mcmc.sampleLength  =  2500;
  Real mcmc.cacheLength   =  100;
//Basic master configuration
  Real basic.cholesky.epsilon          = 1.E-13;
  Real basic.cholesky.warningFreq      = 100;
  Real basic.truncMNormal.gibbsNumIter = 5;
//Report configuration
  Real report.raftery.diag.q   = 0.025;
  Real report.raftery.diag.r   = 0.007;   
  Real report.raftery.diag.s   = 0.950;   
  Real report.raftery.diag.eps = 0.001; 
  Real report.acf.lag          = 20,
  Real report.histogram.parts  = 100;
  Real report.kerDens.points   = 0;
//Generic flags
  Real do.resume          =  0;
  Real do.report          =  True;
  Real do.eval            =  True;
  Real do.linear.effects  =  False
]];

BysMcmc::@Cycler cycler = BysMcmc::Bsr::Gibbs::GetCycler(
  mod::bsr.parsed, 
  BysMcmc::@McmcPartialHandler::Null(0), 
  bsr.config, 
  BysMcmc::@Notifier::Null(0));

//Real cycler::initialize(0);

BysMcmc::@Estimation estim = BysMcmc::@Estimation::New(cycler);
Real estim::Run(0);
Struct @CompareStruct 
{
  Real Index,
  Text Name,
  Real RealValue,
  Real Estimated,
  Real Difference,
  Real Sigma,
  Real K_SigDif
};

//////////////////////////////////////////////////////////////////////////////
//Table this set to view real and estimated parameters
//////////////////////////////////////////////////////////////////////////////
Set CompareTable = 
{  
  Matrix var.real = 
    mod::_beta << 
    mod::_variance <<
    mod::_outMis <<
    mod::_inpMis ;
  For(1,Card(estim::report::colNames), Set(Real k)
  {
    Real x.r = MatDat(var.real,k,1);
    Real x.e = (estim::report::coda.summary)[k]->mean_;
    Real x.d = x.r-x.e;
    Real x.s = Sqrt((estim::report::coda.summary)[k]->sd_);
    Real x.k = x.d/x.s;
    @CompareStruct
    (
      k, 
      estim::report::colNames[k], 
      x.r, 
      x.e, 
      x.d,
      x.s,
      x.k 
    )
  })
};

//////////////////////////////////////////////////////////////////////////////
//Chart this set to view real and estimated parameters
//////////////////////////////////////////////////////////////////////////////
Set CompareChart = Extract(CompareTable,3,4);

Set DifChart  = Extract(CompareTable,5);
Set KDifChart = Extract(CompareTable,7);

Set compare_forecast = For(1,Card(mod::obsNodes),Set(Real nu_node)
{
  Set est = (estim::eval.average)[nu_node];

  Set aux = [[
    Real   stdErr = ((mod::obsNodes)[nu_node])::sse;
    Real   stdErr.Estim = est::stdErr;
    Matrix Residuals = ((mod::obsNodes)[nu_node])::e;
    Matrix Residuals.Estim = est::noise;
    Matrix Residuals.Cmp = Residuals | Residuals.Estim;
    Matrix Filter = ((mod::obsNodes)[nu_node])::X*
                    ((mod::obsNodes)[nu_node])::b;
    Matrix Filter.Estim = est::filter.full;
    Matrix Filter.Cmp = Filter | Filter.Estim;
    Matrix Output = ((mod::obsNodes)[nu_node])::Y;
    Matrix Output.Estim = est::output.full;
    Matrix Output.Cmp = Output | Output.Estim
  ]];
  Eval(Name((estim::eval.average)[nu_node])+"=aux")
});

/* */

Set quality.obs = For(1,mod::K1,Real(Real k)
{
  MatStDs(((mod::obsNodes      )[k])::e) /
  MatStDs(((estim::eval.average)[k])::noise)
});

Real numErr1 = Copy(NError);

//Extented information about test behaviour
Set partialResults_ = 
[[
  numErr0, numErr1
]];

//This is a messure of the success of the test 
Real quality_ = And(numErr0 == numErr1)*SetMin([[1]]<<quality.obs);

//Return the results 
Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                  "Partial results = "<<partialResults_,
                  "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                  email_);
WriteLn(""<<resultStr_);
resultStr_

/* */
