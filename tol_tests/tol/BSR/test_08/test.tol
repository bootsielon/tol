//////////////////////////////////////////////////////////////////////////////
//FILE: test.tol
//AUTHOR: vdebuen@tol-project.org
//CREATION: 2008-12-06
//PURPOSE: Chequea Bsr::OneNode::EstimProbit
//////////////////////////////////////////////////////////////////////////////

Text email_ = "vdebuen@tol-project.org"; 
Text link_ = "";
Text summary_ = "Chequea Bsr::OneNode::EstimProbit" ;

Real numErr0 = Copy(NError);

//Random seed setting
Real PutRandomSeed(0);
Real rndSeed = GetRandomSeed(0);
WriteLn("Current Random Seed = "<<rndSeed);

#Require BysMcmc;

//////////////////////////////////////////////////////////////////////////////
//Randomly generated probit model to allow contrast with model estimations
//These information is unknown in real world problems
//////////////////////////////////////////////////////////////////////////////
Real m = 1000;
Matrix zero = Rand(m,1,0,0);
Matrix one = zero+1;
//Full input matrix
Matrix X  = {
  Matrix X1 = Round(Rand(m, 5, -0.5, 1.5));
  //Matrix X2 = SubCol(X1,[[1]]) $* SubCol(X1,[[2]]);
  Matrix X2 = Round(Rand(m, 1, -0.5, 2.5));
  //Constant input
  Matrix X3 = Rand(m,1,1,1);
  Matrix X_ = X1|X2|X3
};

  //Real parameters of linear block
Matrix b  = {Col(
  Param_1=Rand(-1,0),
  Param_2=Rand( 0,1),
  Param_3=Rand(-2,0),
  Param_4=Rand( 0,0.2),
  Param_5=Rand(Param_4,2),
  Param_6=Rand(Param_5,3),
  Param_7=Rand(-2,2))};
//Real standard normal independent residuals
Matrix e  = Gaussian(Rows(X),1,0,1);
//Real filter matrix
Matrix Xb = X*b;
//Latent linear output
Matrix z = Xb+e;
//Real output probabilities
Matrix Yp = F01(Xb);
//Simulated probit model
Matrix Y  = GE(z,zero);
Real Y_avr = MatAvr(Y);
Matrix Xb_e = Xb | e;
Matrix Yp_Ype = Yp | F01(Xb+e);

Real success  = MatAvr(EQ(Y,GE(Yp,    0.5)));

/* */

Set mh.estim = Probit(Y, X);
Matrix b.mh = mh.estim[1];
Matrix Xb.mh = X*b.mh;
Matrix Yp.mh = F01(Xb.mh);
//////////////////////////////////////////////////////////////////////////////
//These is the only information that will be known in real world problems
//////////////////////////////////////////////////////////////////////////////
//Data matrix containing full output and input
Matrix data.mat = Y|X;
//Set of names of columns in data.mat
Set data.name = [["Output"]]<<For(1,Columns(X),Text(Real j)
{ "Input_"+IntText(j)} );


//////////////////////////////////////////////////////////////////////////////
//Model definition for BSR one node API
    BysMcmc::Bsr::OneNode::@ModelData bsr.oneNode.data =
//////////////////////////////////////////////////////////////////////////////
[[
  //##Documentation about the model
  Set  _.docInfo = @BSR.DocInfo (
    Text Model.Name = 
      "OneNodeProbit",
    Text Model.Description = 
      "Randomly generated probit model";
    Text Session.Name = "SES_"+Model.Name+".01";
    Text Session.Description = 
      "Random seed "<<rndSeed;
    Text Session.Authors = 
      "vdebuen@tol-project.org;";
    Date Session.Creation = Copy(Now);
    Text Path = Ois.DefRoot+"BSR/" );
  //##Observational node name
  Text _.segmentName = "Obs";

  //#Original data storer by columns with names 
  Set _.data.orig = For(1, Card(data.name), Matrix(Real j)
  {
    Matrix aux = SubCol(data.mat,[[j]]);
    Eval(data.name[j]+"=aux")
  });

  //Checks unique names and indexes them
  Real _check_data.orig = SetIndexByName(_.data.orig);

  Set _.data.handler = _.data.orig;

  Real _check_data.handler = SetIndexByName(_.data.handler);

  //Output vector
  VMatrix _.Y = Mat2VMat(_.data.handler::Output, False, 1, 0);
  //Normal standarized transformation of frequency of ones in output should be
  //a good average prior for constant parameter 
  Real _.cteAvg = DistNormalInv(VMatAvr(_.Y));

  //Linear block definition with domain and prior restrictions
  Set _.linearParamInfo = {
  //Tool function to reduce registers length in _.linearParamInfo
  Code LPI = BysMcmc::Bsr::OneNode::LPI;
  [[
    //   Variable      initVal   min    max     priAvg   priSig  priSigWeight
    LPI("Input_1",           0, -1/0,     0,         ?,       ?,          ?),
    LPI("Input_2",           0,    0,  +1/0,         ?,       ?,          ?),
    LPI("Input_3",           0, -1/0,     0,         ?,       ?,          ?),
    LPI("Input_4",           0,    0,  +1/0,         ?,       ?,          ?),
    LPI("Input_5",           0,    0,  +1/0,         ?,       ?,          ?),
    LPI("Input_6",           0,    0,  +1/0,         ?,       ?,          ?),
    LPI("Input_7" ,   _.cteAvg, -1/0,  +1/0,         ?,       ?,          ?) 
  ]]};
  //Input matrix
  VMatrix _.X = Group("ConcatColumns",
  EvalSet(_.linearParamInfo, VMatrix(BysMcmc::@Bsr.OneNode.LinearParamInfo lpi)
  {
    Mat2VMat(_.data.handler[lpi->Name])
  }));
  //A BSR probit model must have sigma=1
  Real _.sigma = 1;
  //Non mandatory members
  //Order relations between linear parameters. This member can be Empty or 
  //simply not exist if there are no known order relation
  Set _.orderRelation = [[
    //                      lower        <=  upper  
    BysMcmc::@Bsr.OrderRelation.Info("Input_4",       "Input_5"),
    BysMcmc::@Bsr.OrderRelation.Info("Input_5",       "Input_6")
  ]]

]];
  
/* */
//////////////////////////////////////////////////////////////////////////////
//BSR generic configuration parameters
BysMcmc::@Config bsr.config = [[
//////////////////////////////////////////////////////////////////////////////
//MCMC dimensions
  Real mcmc.burnin        =   2000; 
  Real mcmc.sampleLength  =  10000;
  Real mcmc.thinning      =  1; //Probit mcmc have high alternance
  Real mcmc.cacheLength   =  If(mcmc.sampleLength>=2000,100,1);
    Real bsr.iniVal.try.givenByUser = 1;
    Real bsr.iniVal.try.cnstrMLE = 2;
    Real bsr.iniVal.try.zero = 3;
    Real bsr.iniVal.try.findFeasible = 4;
    Real bsr.iniVal.try.cnstrMinNorm = 5;
//Generic flags
  Real do.resume          =  0;
  Real do.report          =  mcmc.sampleLength>=2000;
  Real do.eval            =  False; //Has no sense for probit models
  Real do.linear.effects  =  False  //Has no sense for probit models
]];


BysMcmc::@Cycler bsr.oneNode.cycler = 
  BysMcmc::Bsr::OneNode::GetCyclerProbit(bsr.oneNode.data, bsr.config);

//Real bsr.oneNode.cycler::initialize(0);

/* */

BysMcmc::@Estimation bsr.oneNode.estim = BysMcmc::@Estimation::New(bsr.oneNode.cycler);
Real bsr.oneNode.estim::Run(0);

BysMcmc::Bsr::OneNode::@Probit bsr.oneNode.probit = 
  BysMcmc::Bsr::OneNode::GetProbit(bsr.oneNode.estim);

Matrix b_full = bsr.oneNode.probit::_.param;
Matrix b_ = Sub(b_full,1,1,Rows(b),1);
Matrix X_ = VMat2Mat(bsr.oneNode.data::_.X) | 
            Rand(VRows(bsr.oneNode.data::_.X),
                 Rows(b_full)-VColumns(bsr.oneNode.data::_.X),0,0);

Matrix Xb_ = X*b_;
Matrix Yp_ = F01(Xb_);

Matrix CompareBeta = b | b.mh | b_;
Matrix CompareFilter = Xb | Xb.mh | Xb_;
Matrix CompareProb = Yp| Yp.mh | Yp_;

Real success.mh = MatAvr(EQ(Y,GE(Yp.mh, 0.5)));
Real success_   = MatAvr(EQ(Y,GE(Yp_,   0.5)));


Set residuals_cache = ((bsr.oneNode.cycler::_.sampler::_.nonLinBlk)[1])::
  _.filter::_.residuals_cache;

Set residuals_cache_stats = For(1,Card(residuals_cache),Set(Real k)
{
  Matrix ek = residuals_cache[k]; 
  Real nu = MatAvr(ek);
  Real sig = Sqrt(MatAvr(ek$*ek));
  Matrix frq = Frequency(ek,30,-3,3);
  [[k,nu,sig,frq]]
});
Set rc = ExtractByIndex(residuals_cache,Range(10,Card(residuals_cache),1));
Matrix e_ = SetSum(rc)*1/Card(rc);
Real nu_ = MatAvr(e_);
Real sig_ = Sqrt(MatAvr(e_$*e_));
Matrix frq_ = Frequency(e_,30,-3,3);


Real numErr1 = Copy(NError);

Real quality = Min(1,success_/success);
//Extented information about test behaviour
Set partialResults_ = 
[[
  numErr0, numErr1
]];

//This is a messure of the success of the test 
Real quality_ = And(numErr0 == numErr1)*quality;


//Return the results 
Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                  "Partial results = "<<partialResults_,
                  "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                  email_);
WriteLn(""<<resultStr_);
resultStr_

/*
//Output probabilities for given input matrix integrated over all simulated 
//vectors of parameters (Bayesian inference by exact method)
Matrix outProbExcBys = bsr.oneNode.probit::GetProb(X_);
//Output probabilities for given input matrix and average vector of 
//simulated parameters (Bayesian inference by aproximation method)
Matrix outProbAprBys = bsr.oneNode.probit::GetProbAvg(X_);

Matrix outExcBys = GE(outProbExcBys,one*0.5);
Matrix outAprBys = GE(outProbAprBys,one*0.5);

Matrix SuccessExcBys = EQ(Y,outExcBys);
Matrix SuccessAprBys = EQ(Y,outAprBys);

//Success table for Bayesian inference by exact method
Set STExcBys = Diagnostics::BinaryModel::SuccessTable(
  Diagnostics::BinaryModel::CutValRng(outProbExcBys,.01),
  VMat2Mat(bsr.oneNode.data::_.Y),
  outProbExcBys);
//Success table for Bayesian inference by aproximation method
Set STAprBys = Diagnostics::BinaryModel::SuccessTable(
  Diagnostics::BinaryModel::CutValRng(outProbAprBys,.01),
  VMat2Mat(bsr.oneNode.data::_.Y),
  outProbAprBys);

/* */  
