//////////////////////////////////////////////////////////////////////////////
//FILE: transfun.tol
//AUTHOR: vdebuen@tol-project.org
//CREATION: 2008-10-14
//PURPOSE: Genera funciones de transferencia
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//Generación de la funciones de transferencia
NameBlock TransFun(NameBlock time.interval, 
                   Real minCoef, Real maxCoef, Serie shape,
                   Real omega_deg, Real delta_deg)
//////////////////////////////////////////////////////////////////////////////
{[[
  Real _.minCoef = minCoef;
  Real _.maxCoef = maxCoef;
  Real _.omega_deg = omega_deg;
//ARMS se cae sin más con delta de grado 2
  Real  _.delta_deg = delta_deg;
//Real  _.delta_deg = 1;
  Polyn rand.omega(Real unused)
  {
    SetSum(For(0, _.omega_deg, Polyn(Real deg)
    {
      Rand(_.minCoef, _.maxCoef)*B^deg
    }))
  };
  //Generates arbitrary stationary roots
  Polyn rand.delta.anyRoots(Real unused)
  {
    RandStationary(_.delta_deg)
  };
  //Generates just real positive roots
  Polyn rand.delta.posRoots(Real unused)
  {
    Case(
      _.delta_deg==0,  1,
      _.delta_deg==1, (1-Rand(0.5,0.99)*B),
      _.delta_deg==2, (1-Rand(0.1,0.6)*B)*(1-Rand(0.7,0.99)*B) )
  };
  Real _.usePosRoots = False;
  Polyn rand.delta(Real unused)
  {
    If(_.usePosRoots, rand.delta.posRoots(0), rand.delta.anyRoots(0))
  };
  Ratio rand.transFun(Real unused)
  {
    rand.omega(0) / rand.delta(0)
  };
  Polyn _.omega = rand.omega(0);
  Polyn _.delta = rand.delta(0);
  Ratio _.transFun = _.omega / _.delta;
  Serie _.input = time.interval::sub.move(shape,0,-_.omega_deg,0);

  Serie  _inp0 = time.interval::sub.move(shape,0,-100*CountS(_.input),0);
  Serie  _eff0 = DifEq(_.transFun, _inp0);
  Serie _.denIni = SubSer(_eff0, 
                          time.interval::_.firstDate-_.delta_deg, 
                          time.interval::_.firstDate-1);  
/*
  Serie _.denIni = SubSer(Rand(MinS(_.input),MaxS(_.input),Dating(shape)), 
                               time.interval::_.firstDate-_.delta_deg, 
                               time.interval::_.firstDate-1);  
*/
  Serie  _.effect = DifEq(_.transFun, _.input, _.denIni);
  Matrix _.param.omega  = PolMat(_.omega, _.omega_deg+1, 1);
  Matrix _.param.delta  = PolMat(F*(1-_.delta), _.delta_deg, 1);
  Matrix _.param.denIni = Tra(SerMat(_.denIni))
]]};

