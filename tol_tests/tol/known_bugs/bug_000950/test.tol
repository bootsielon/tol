/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for a resolved bug
//////////////////////////////////////////////////////////////////////////////

//Sets the bugzilla identifier number, your e-mail and the bug´s summary
  Real bugNum_ =  950;
  Text email_ = "vdebuen@tol-project.org"; 
  Text summary_="Ois.UseCache";
  Text link_ = GetTolBugzillaLink(bugNum_);

  //Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
  Real numWar0 = Copy(NWarning);
  
  Text tolPath = "source.tol";
  Text ozaPath = Ois.GetModulePath(tolPath);

  WriteLn("

////////////////////////////////////////////////////
CASO 1  
  Con caducidad negativa se reconstruye siempre
  Con carga local no son accesibles los datos
////////////////////////////////////////////////////
  ");

  Set S1 = { Ois.UseCache(tolPath, -1) };
  Real numErr1 = Copy(NError);
  Real numWar1 = Copy(NWarning);
  Real ig.1 = ObjectExist("Set","data");
  Real ok.1 = (numErr1==numErr0)&(numWar1==numWar0+1)&!ig.1;
  
  WriteLn("

////////////////////////////////////////////////////
CASO 2
  No ha caducado por lo que no reconstruye
  Con carga local no son accesibles los datos
////////////////////////////////////////////////////
  ");
  Real Sleep(2);
  Set S2 = { Ois.UseCache(tolPath, 10/60) };
  Real numErr2 = Copy(NError);
  Real numWar2 = Copy(NWarning);
  Real ig.2 = ObjectExist("Set","data");
  Real ok.2 = (numErr2==numErr1)&(numWar2==numWar1)&!ig.2;

  WriteLn("

////////////////////////////////////////////////////
CASO 3
  Ya ha caducado por lo que sí se reconstruye
  Con carga local no son accesibles los datos
////////////////////////////////////////////////////
  ");
  Real Sleep(10);
  Set S3 = { Ois.UseCache(tolPath, 10/60) };
  Real numErr3 = Copy(NError);
  Real numWar3 = Copy(NWarning);
  Real ig.3 = ObjectExist("Set","data");
  Real ok.3 = (numErr3==numErr2)&(numWar3==numWar2+1)&!ig.3;

  WriteLn("

////////////////////////////////////////////////////
CASO 4
  Se toca el fichero fuente por lo que se debe reconstruir
  Con carga global sí son accesibles los datos
////////////////////////////////////////////////////
  ");
  Real OSCmdWait("touch "+tolPath);
  Real Sleep(5);
  Set S4 = Ois.UseCache(tolPath, 1/0);

  Real numErr4 = Copy(NError);
  Real numWar4 = Copy(NWarning);
  Real ig.4 = ObjectExist("Set","data");
  Real ok.4 = (numErr4==numErr3)&(numWar4==numWar3+1)&ig.4;


  Set partialResults_ = [[ 
    numErr0, numErr1, numErr2, numErr3, numErr4,
    numWar0, numWar1, numWar2, numWar3,numWar4,
    ig.1, ig.2, ig.3, ig.4,
    ok.1, ok.2, ok.3, ok.4   ]];

//This is a messure of the success of the test 
  Real quality_ = And(ok.1, ok.2, ok.3, ok.4);

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_;

/* */

