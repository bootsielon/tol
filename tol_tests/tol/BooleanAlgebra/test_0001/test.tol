//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test for Boolean Algebra Coherence
//////////////////////////////////////////////////////////////////////////////

  Text email_ = "vdebuen@tol-project.org"; 
  Text link_ = "http://en.wikipedia.org/wiki/De_Morgan_duality";
  Text summary_ = "Binary boolean Morgan Laws" ;

//Write here the initial test TOL code if needed
  Real numErr0 = Copy(NError);
//Binary operators needs just 2 operands
  Real n = 2;
//This is all possible pairs of boolean values
  Set X = [[0,1]]^2;
  Real N = Card(X);

//For each pair of boolean values calculates all components of both 
//Morgan Laws
// 1) ! ( A & B ) = !A | !B
// 2) ! ( A | B ) = !A & !B
  Set table = EvalSet(X, Set (Set x)
  {
    Real a = x[1]; 
    Real b = x[2]; 
    x<<
    SetOfReal
    (
      /*1*/and = a&b,
      /*2*/not_and=!(a&b),
      /*3*/or_not =!a|!b,
      /*4*/test_morgan_1=(!(a&b))==(!a|!b),
      /*5*/or=a|b,
      /*6*/not_or=!(a|b),
      /*7*/and_not=!a&!b,
      /*8*/test_morgan_2=(!(a|b))==(!a&!b)
    )
  });
//Extracts columns of both Morgan Laws
  Set tableTr = Traspose(table); 
  Set morgan_1 = tableTr[n+4];
  Set morgan_2 = tableTr[n+8];

//Extented information about test behaviour
  Set partialResults_ = 
  [[
  //Checks that Morgan Laws match for all pairs of boolean values
    Real N1  = SetSum(morgan_1);
    Real N2  = SetSum(morgan_2);
    Real ok1 = N1==N;
    Real ok2 = N2==N;
    Real ok  = And(ok1,ok2)
  ]];

//This is a messure of the success of the test 
  Real quality_ = And(numErr0 == NError, ok);

//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    "NO DBServerType", "NO DBServerHost", "NO DBAlias",
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_

/* */
