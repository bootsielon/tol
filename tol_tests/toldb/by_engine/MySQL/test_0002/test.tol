//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test of database handling with TOL
//          requieres an active database connection
//////////////////////////////////////////////////////////////////////////////

  Text email_ = "vdebuen@tol-project.org"; 
  Text link_ = "";
  Text summary_ = "Checking database real formats from dual";

//Write here the initial test TOL code if needed
  Text PutRealFormat("%.15lg");
  Real numErrIni = Copy(NError); //Initial number of errors

  Write("Checking if there are active databases ... ");
  Set  dbConns = DBGetOpened("");
  Real ok0 = Card(dbConns)>0;
  WriteLn(If(ok0,"OK","FAIL"));

  Matrix mat.1.1 = DBMatrix("
  select
    output,
    1 as constant,
    count(*) as numLlamadas,
    avg(duracion)/3600 as avgDuracion,
    (max(duracion)-avg(duracion))/3600 as maxDifDuracion,
    max(antiguedad)/365 as antiguedad
  from
  (
    select
      case when 1=2-1 then 1 else 0 end as output,
      time_to_sec(timediff(date('20060101'),date('20060105'))) as duracion,
      datediff(date('20060101'),date('20060105')) as antiguedad
    from dual
  ) as aux
  group by output
  ");
  WriteLn("Trace mat.1.1="<<mat.1.1);
  
  Matrix mat.1.2 = DBMatrix("
  select
    output,
    1 as constant,
    1.0E1*count(*) as numLlamadas,
    1.0E1*avg(duracion)/3600 as avgDuracion,
    1.0E1*(max(duracion)-avg(duracion))/3600 as maxDifDuracion,
    1.0E1*max(antiguedad)/365 as antiguedad
  from
  (
    select
      case when 1=2-1 then 1 else 0 end as output,
      time_to_sec(timediff(date('20060101'),date('20060105'))) as duracion,
      datediff(date('20060101'),date('20060105')) as antiguedad
    from dual
  ) as aux
  group by output
  ");
  WriteLn("Trace mat.1.2="<<mat.1.2);

  Real numErrorEnd = Copy(NError); //Final number of errors

//Expected number of errors 
  Real numErrorExpected = If(ok0, numErrIni, numErrIni+4);

  Set ok.n.m =
  [[
    Real ok.1.1 = ((MatSet(mat.1.1)[1])==([[1,1,1,0,0,-0.011            ]])),
    Real ok.1.2 = ((MatSet(mat.1.2)[1])==([[1,1,10,0,0,-0.10958904109589]]))
  ]];

  Set partialResults_ = ok.n.m <<
  [[
    numErrIni, numErrorEnd, numErrorExpected,
    Real okQry = Group("And",ok.n.m)
  ]];

  Real quality_ = If(ok0, okQry, If(okQry, ?, false));

  Real Dbt.Exists = ObjectExist("Set","Dbt.Connect");
//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    If(Dbt.Exists,Dbt.Connect->engine_, ""),
                    If(Dbt.Exists,Dbt.Connect->host_,   ""),
                    If(Dbt.Exists,Dbt.Connect->alias_,  ""),
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_


/* */
