//////////////////////////////////////////////////////////////////////////////
// FILE   : test.tol
// PURPOSE: test of database handling with TOL
//          requieres an active database connection
//////////////////////////////////////////////////////////////////////////////

  Text email_ = "vdebuen@tol-project.org"; 
  Text link_ = "";
  Text summary_ = "Checking database real formats from dual";

//Write here the initial test TOL code if needed

  Real numErrIni = Copy(NError); //Initial number of errors

  Write("Checking if therea are active databases ... ");
  Set  dbConns = DBGetOpened("");
  Real ok0 = Card(dbConns)>0;
  WriteLn(If(ok0,"OK","FAIL"));
         
  Matrix mat.2.1 = DBMatrix(" select x, 1.0E1*count(*) from ( select 1 as x from dual ) as A group by x ");
  WriteLn("Trace mat.2.1="<<mat.2.1);
  Matrix mat.2.2 = DBMatrix(" select x, 1    *count(*) from ( select 1 as x from dual ) as A group by x ");
  WriteLn("Trace mat.2.2="<<mat.2.2);
  Matrix mat.2.3 = DBMatrix(" select x,       count(*) from ( select 1 as x from dual ) as A group by x ");
  WriteLn("Trace mat.2.3="<<mat.2.3);
  Matrix mat.2.4 = DBMatrix(" select x, sum(x*1.0E1)   from ( select 1 as x from dual ) as A group by x ");
  WriteLn("Trace mat.2.4="<<mat.2.4);
  Matrix mat.2.5 = DBMatrix(" select x, sum(y)         from ( select 1 as x , 2.0 as y from dual ) as A group by x "); 
  WriteLn("Trace mat.2.5="<<mat.2.5);
  
  Matrix mat.3.1 = DBMatrix(" select x, avg(x)/10 from ( select 1 as x from dual ) as A group by x ");
  WriteLn("Trace mat.3.1="<<mat.3.1);
  Matrix mat.3.2 = DBMatrix(" select x, (max(x)-avg(x))/10 from ( select 1 as x from dual ) as A group by x ");
  WriteLn("Trace mat.3.2="<<mat.3.2);
  
  Matrix mat.4.1 = DBMatrix(" select x, 1.0*count(*)   from ( select 1 as x from dual ) as A group by x ");
  WriteLn("Trace mat.4.1="<<mat.4.1);
  Matrix mat.4.2 = DBMatrix(" select x, sum(x)         from ( select 1 as x from dual ) as A group by x ");
  WriteLn("Trace mat.4.2="<<mat.4.2);
  Matrix mat.4.3 = DBMatrix(" select x, count(*)       from ( select 1 as x from dual ) as A group by x ");
  WriteLn("Trace mat.4.3="<<mat.4.3);
  Matrix mat.4.4 = DBMatrix(" select x, avg(y)/100 from ( select 1 as x , 2.0 as y from dual ) as A group by x ");
  WriteLn("Trace mat.4.4="<<mat.4.4);
  
  Real numErrorEnd = Copy(NError); //Final number of errors

//Expected number of errors 
  Real numErrorExpected = If(ok0, numErrIni, numErrIni+22);
  Set ok.n.m =
  [[
    Real ok.2.1 = ((MatSet(mat.2.1)[1])==([[1,10]])),
    Real ok.2.2 = ((MatSet(mat.2.2)[1])==([[1,1]])),
    Real ok.2.3 = ((MatSet(mat.2.3)[1])==([[1,1]])),
    Real ok.2.4 = ((MatSet(mat.2.4)[1])==([[1,10]])),
    Real ok.2.5 = ((MatSet(mat.2.5)[1])==([[1,2]])),
    Real ok.3.1 = ((MatSet(mat.3.1)[1])==([[1,0.1]])),
    Real ok.3.2 = ((MatSet(mat.3.2)[1])==([[1,0]])),
    Real ok.4.1 = ((MatSet(mat.4.1)[1])==([[1,1]])),
    Real ok.4.2 = ((MatSet(mat.4.2)[1])==([[1,1]])),
    Real ok.4.3 = ((MatSet(mat.4.3)[1])==([[1,1]]))
  ]];

//Extented information about test behaviour
  Set partialResults_ = ok.n.m <<
  [[
    numErrIni, numErrorEnd, numErrorExpected,
    Real okErr = numErrorEnd == numErrorExpected,
    Real okQry = And(okErr,Group("And", ok.n.m))
  ]];

  Real quality_ = If(ok0, okQry, If(okQry, ?, false));

  Real Dbt.Exists = ObjectExist("Set","Dbt.Connect");
//Return the results 
  Set resultStr_ = @strTestStatus(summary_, link_, quality_,
                    "Partial results = "<<partialResults_,
                    If(Dbt.Exists,Dbt.Connect->engine_, ""),
                    If(Dbt.Exists,Dbt.Connect->host_,   ""),
                    If(Dbt.Exists,Dbt.Connect->alias_,  ""),
                    email_);
  WriteLn(""<<resultStr_);
  resultStr_


/* */
