TOL - GNU Time Oriented Language Library
=========================================

Installation Instructions
=========================

This file describes how to compile and install the TOL library for UNIX.
[See the file ./win/INSTALL for details on how to build under Windows.]

1. TOL follows the standard GNU installation procedure.  
   To compile TOL you will need an ANSI C/C++ compiler.  After unpacking
   the distribution, go into the "tol-x.y" directory. The Makefiles 
   can be prepared using the "configure" command. You can customize your
   configure script using previously "bootstrap" shell script.

   TOL requires these packages: GSL, GSL CBLAS, CHOLMOD and
   ODBC. configure script search this packages when is invoked without
   any parameter.  If these packages are installed under unusual
   directories you can tell where they are invoking configure with
   next options:

   GNU Scientific Library

     Tell configure where to find the gnu/GSL Scientific Library with
     these next options:
     
        --with-gsl=/usr/local (search headers in 'include' dir
                               libraries in 'lib' dir from
                               specified path)
        or
        --with-gsl-includes=/usr/local/include
        --with-gsl-libraries=/usr/local/lib

   CBLAS (Basic Linear Algebra Subprograms)

     Tell configure where to find the CBLAS implementation of 
     gnu/GSL Scientific Library.You can use these options:
     
        --with-cblas=/usr/local (search headers in 'include' dir
                                 libraries in 'lib' dir from
                                 specified path)
        or
        --with-cblas-includes=/usr/local/include
        --with-cblas-libraries=/usr/local/lib

   CHOLMOD (Cholesky sparse support)

   Cholmod is not a standard package an can be downloaded from
   http://www.tol-project.org/downloads/SuiteSparse_TOL.tar.gz. This
   is a modified version of CHOLMOD. The original package can be found
   at http://www.cise.ufl.edu/research/sparse/. After unpacking
   SuiteSparse_TOL.tar.gz read SuiteSparse_TOL/BB2/CHOLMOD/INSTALL in
   order to build and install CHOLMOD before configure TOL for using
   it.

   Tell configure where to find the CHOLMOD development files with the
   following options:

      --with-cholmod=cholmod_prefix (search headers in 'include' dir
                                 libraries in 'lib' dir from
                                 specified path)
      or
      --with-cholmod-includes=  dir where to look for header files
      --with-cholmod-libraries= dir where to look for header cholmod lib

   Tol DB Access

     Compile Tol with support for Direct DB Access.
     Must be activated with:

        --enable-dbdrivers

     This option force configure to looks for the availability of the drivers
	currently supported: ODBC and MySQL. But you can also use the next
	options to specify the directories where DB sources and libraries
	support has been previously installed.

     MySQL Support:

	--with-mysql=<dir>
	--with-mysql-includes=<dir>
	--with-mysql-libraries=<dir>

     ODBC Support:

     Choose either OpenLink iODBC or UnixODBC.

     To use UnixODBC use these options:
        --with-unixodbc=/usr/local (search headers in 'include' dir
                                    libraries in 'lib' dir from
                                    specified path)
        or
        --with-unixodbc-includes=/usr/local/include
        --with-unixodbc-libraries=/usr/local/lib

     To use OpenLink iODBC use these options:
        --with-iodbc=/usr/local (search headers in 'include' dir
                                libraries in 'lib' dir from specified path)
        or
        --with-iodbc-includes=/usr/local/include
        --with-iodbc-libraries=/usr/local/lib

   ---------------------------------

       Switches:

       --prefix=path	Specifies the path where TOL header files, 
			libraries, scripts, and manual pages are installed.
            The default is "/usr/local".

       --with-gsl=dir	Directory where gnu/GSL Library is installed.
            Usually the default is "/usr/local" what it means that
            under "/usr/local/lib" are installed lib files, and under
			"/usr/local/include" are installed headers files.

       --with-gsl-libraries=dir   Directory where gnu/GSL lib files
            are installed. Choose this option if the lib directory
            is not under the same directory as include directory.

       --with-gsl-includes=dir   Directory where gnu/GSL headers files
            are installed. Choose this option if the include directory is
            not under the same directory as lib directory.


   Both static and shared versions of the libraries will be compiled by
   default.  Compilation of shared libraries can be turned off by
   specifying the `--disable-shared' option to `configure', e.g.
  
     ./configure --disable-shared

   If you encounter problems building the library try using the above
   option, because some platforms do not support shared libraries.

   For notes about problems with specific platforms and compilers see the
   next section of this file (below).


2. You can then build the library by typing,

   make


3. The library can be installed using the command,

   make install

   The default install directory prefix is /usr/local.  Consult the
   "Further Information" section below for instructions on installing the
   library in another location or changing other default compilation
   options.

                    ------------------------------

Platform Specific Compilation Notes
===================================

This section documents any known issues with installing TOL on
specific platforms.

Hints for any platform
======================

1) With gcc-2.95/2.96 the tests fail in the eigen/ directory.  
   This is due to a compiler optimization bug which causes errors in the
   manipulation of complex numbers.  Do not use the library if you
   encounter this problem.

   This is fixed in more recent versions of gcc.  
   Compiling without optimization will work around the bug.


Hints for Microsoft Windows
===========================

A separate version of the library is available for Microsoft Visual
C++. For more information see under the directory "msvc".


                    ------------------------------

Further information on the standard GNU installation procedure
==============================================================

The sections below describe the general features of the standard GNU
installation procedure.

Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes a while.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.

Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.

Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.

Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.

Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.

Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.

Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.

