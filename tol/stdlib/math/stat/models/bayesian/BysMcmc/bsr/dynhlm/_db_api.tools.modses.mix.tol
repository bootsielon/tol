//////////////////////////////////////////////////////////////////////////////
// FILE    : _db_api.tools.mix.tol
// PURPOSE : Implements database tools related methods of NameBlock 
//           BysMcmc::Bsr::DynHlm::DBApi
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//Inserts a new parameter register
Real ModSes.Mix.Node.Create(Text dbName, 
                            Text model, 
                            Text session)
//////////////////////////////////////////////////////////////////////////////
{
  Real If(BysMcmc::Bsr::DynHlm::DBApi::SqlTableTrace(
  "SELECT count(*) FROM "+dbName+"."+_table::Node+"\n"
  "WHERE id_model='"+model+"' AND\n"
  "      id_session='"+session+"' AND\n"
  "      id_node='MIXTURE';","")[1][1],
  {
    0
  },
  {
    Real BysMcmc::Bsr::DynHlm::DBApi::SqlCachedInsert(
      _table::Node,
      "'"+model+"','"+session+"','MIXTURE','MIX',999999999,-1,''")
  })
};


//////////////////////////////////////////////////////////////////////////////
//Inserts a new parameter register
Real ModSes.Mix.Param.Create(Text dbName, 
                             Text model, 
                             Text session,
                             Text node, 
                             Text parameter,
                             Text gibbs_blk,
                             Real initValue,
                             Real minimum,
                             Real maximum)
//////////////////////////////////////////////////////////////////////////////
{
  NameBlock _table = BysMcmc::Bsr::DynHlm::DBApi::_.table;
  Real ok = BysMcmc::Bsr::DynHlm::DBApi::SqlCachedInsert(
  dbName+"."+_table::Parameter,
  "'"+model+"','"+session+"','"+node+"','"+
  parameter+"','"+gibbs_blk+"',"+
  SqlFormatReal(initValue)+","+
  SqlFormatReal(minimum)+","+
  SqlFormatReal(maximum));
  Eval("ModSes.Mix.Param.Create.ok=ok")
};

//////////////////////////////////////////////////////////////////////////////
//Deletes all registers related to a given node-parameter into a specified 
//model-session 
Real ModSes.Mix.Param.Delete(Text dbName, 
                             Text model, 
                             Text session,
                             Text id_node,
                             Text from_param)
//////////////////////////////////////////////////////////////////////////////
{
  Real BysMcmc::Bsr::DynHlm::DBApi::ModSes.CheckBlocked(
    dbName, model, session, true);
  Real ForeignKey.Disable(0);
  NameBlock _table = BysMcmc::Bsr::DynHlm::DBApi::_.table;
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "DELETE FROM "+dbName+"."+_table::Parameter+"\n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node='"+id_node+"' AND id_parameter='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "DELETE FROM "+dbName+"."+_table::ObsInput+"\n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node='"+id_node+"' AND id_parameter='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "DELETE FROM "+dbName+"."+_table::LatOutput+"\n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_child='"+id_node+"' AND id_parameter_child='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "DELETE FROM "+dbName+"."+_table::LatInput+"\n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_father='"+id_node+"' AND id_parameter_father='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "DELETE FROM "+dbName+"."+_table::LatInput+"\n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_child='"+id_node+"' AND id_parameter_child='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "DELETE FROM "+dbName+"."+_table::PriOutput+"\n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_child='"+id_node+"' AND id_parameter_child='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "DELETE FROM "+dbName+"."+_table::OrderRel+"\n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_lower='"+id_node+"' AND id_parameter_lower='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "DELETE FROM "+dbName+"."+_table::OrderRel+"\n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_upper='"+id_node+"' AND id_parameter_upper='"+from_param+"';");
  Real ForeignKey.Enable(0);
  1
};


//////////////////////////////////////////////////////////////////////////////
Real ModSes.Mix.Param.Rename(Text dbName, 
                             Text model, 
                             Text session,
                             Text id_node,
                             Text from_param,
                             Text to_param)
//////////////////////////////////////////////////////////////////////////////
{
  Real BysMcmc::Bsr::DynHlm::DBApi::ModSes.CheckBlocked(
    dbName, model, session, true);
  Real ForeignKey.Disable(0);
  NameBlock _table = BysMcmc::Bsr::DynHlm::DBApi::_.table;
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "UPDATE "+dbName+"."+_table::Parameter+"\n"+
  "SET id_parameter = '"+to_param+"' \n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node='"+id_node+"' AND id_parameter='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "UPDATE "+dbName+"."+_table::ObsInput+"\n"+
  "SET id_parameter = '"+to_param+"' \n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node='"+id_node+"' AND id_parameter='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "UPDATE "+dbName+"."+_table::ObsInput+"\n"+
  "SET id_parameter = '"+to_param+"' \n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node='"+id_node+"' AND id_parameter='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "UPDATE "+dbName+"."+_table::LatOutput+"\n"+
  "SET id_parameter_child = '"+to_param+"' \n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_child='"+id_node+"' AND id_parameter_child='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "UPDATE "+dbName+"."+_table::LatInput+"\n"+
  "SET id_parameter_father = '"+to_param+"' \n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_father='"+id_node+"' AND id_parameter_father='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "UPDATE "+dbName+"."+_table::PriOutput+"\n"+
  "SET id_parameter_child = '"+to_param+"' \n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_child='"+id_node+"' AND id_parameter_child='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "UPDATE "+dbName+"."+_table::OrderRel+"\n"+
  "SET id_parameter_lower = '"+to_param+"' \n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_lower='"+id_node+"' AND id_parameter_lower='"+from_param+"';");
  Real BysMcmc::Bsr::DynHlm::DBApi::SqlExecTrace(
  "UPDATE "+dbName+"."+_table::OrderRel+"\n"+
  "SET id_parameter_upper = '"+to_param+"' \n"+
  "WHERE id_model='"+model+"' AND id_session='"+session+
  "' AND id_node_upper='"+id_node+"' AND id_parameter_upper='"+from_param+"';");
  Real ForeignKey.Enable(0);
  1
};

//////////////////////////////////////////////////////////////////////////////
//Inserts a new order relation register
Real ModSes.Mix.OrderRelation.Create(Text dbName, 
                                     Text model, 
                                     Text session,
                                     Text nodeLower, 
                                     Text parameterLower,
                                     Text nodeUpper, 
                                     Text parameterUpper)
//////////////////////////////////////////////////////////////////////////////
{
  NameBlock _table = BysMcmc::Bsr::DynHlm::DBApi::_.table;
  Real ok = BysMcmc::Bsr::DynHlm::DBApi::SqlCachedInsert(
  dbName+"."+_table::OrderRel,
  "'"+model+"','"+session+"',"
  "'"+nodeLower+"','"+parameterLower+"',"+
  "'"+nodeUpper+"','"+parameterUpper+"'");
  Eval("ModSes.Mix.OrderRelation.Create.ok=ok")
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.ModSes.Mix.Constraint.Create =
"Inserts a new arbitrary constraint

  leftBound <= linComb[1] + иии + linComb[k] <= rightBound

where 
  leftBound could be -1/0 or ? if there are no lower limit
  rightBound could be +1/0 or ? if there are no upper limit
  Each element of linComb is a NameBlock like this
  [[
    Text _.id_node; 
    Text _.id_parameter; 
    Real _.coef
  ]]

Example: In order to insert this inequation

  3.5*nodo1::beta2 -2.1*nodo2::beta5 <= 7.1*nodo1::beta3

Syntax could be 

  Real { ModSes.Mix.Constraint.Create(
    my_dbName, my_model,my_session,
    Real leftBound = -1/0,
    Set  linComb = SetOfNameBlock
    ([[
      Text _.id_node = \"nodo1\"; 
      Text _.id_parameter = \"beta2\"; 
      Real _.coef = 3.5
    ]],[[
      Text _.id_node = \"nodo2\"; 
      Text _.id_parameter = \"beta5\"; 
      Real _.coef = -2.1
    ]],[[
      Text _.id_node = \"nodo1\"; 
      Text _.id_parameter = \"beta3\"; 
      Real _.coef = -7.1
    ]]),
    Real rightBound = 0)};
";
Real ModSes.Mix.Constraint.Create(Text dbName,
                                  Text model,
                                  Text session,
                                  Real leftBound,
                                  Set  linComb,
                                  Real rightBound)
//////////////////////////////////////////////////////////////////////////////
{
  NameBlock _table = BysMcmc::Bsr::DynHlm::DBApi::_.table;
  Real numInequation = 
  {
    Real aux = BysMcmc::Bsr::DynHlm::DBApi::SqlTableTrace(
    "SELECT max(nu_inequation) FROM "+dbName+"."+_table::ConstrBorder+"\n"
    "WHERE id_model='"+model+"' AND\n"
    "      id_session='"+session+"';","")[1][1];
    If(IsUnknown(aux),1,aux+1)
  };
  Set nodes = Classify(linComb,Real(NameBlock a, NameBlock b)
  {
    Compare(a::_.id_node, b::_.id_node)
  });
  Text id_node = If(Card(nodes)==1, (linComb[1])::_.id_node,
  {
    Real ModSes.Mix.Node.Create(dbName, model, session);
    "MIXTURE"
  });
  Real ok.1 = BysMcmc::Bsr::DynHlm::DBApi::SqlCachedInsert(
  dbName+"."+_table::ConstrBorder,
  "'"+model+"','"+session+"',"+
  IntText(numInequation)+","+
  "'"+id_node+"',"+
  BysMcmc::Bsr::DynHlm::DBApi::SqlFormatReal(leftBound)+","+
  BysMcmc::Bsr::DynHlm::DBApi::SqlFormatReal(rightBound));
  Real ok.2 = SetMin(EvalSet(linComb, Real(NameBlock a)
  {
    BysMcmc::Bsr::DynHlm::DBApi::SqlCachedInsert(
    dbName+"."+_table::ConstrLinComb,
    "'"+model+"','"+session+"',"+
    IntText(numInequation)+","+
    "'"+a::_.id_node+"',"+
    "'"+a::_.id_parameter+"',"+
    BysMcmc::Bsr::DynHlm::DBApi::SqlFormatReal(a::_.coef))
  }));
  Eval("ModSes.Mix.Constraint.Create.ok=ok.1 & ok.2")
};
PutDescription(_.autodoc.member.ModSes.Mix.Constraint.Create,
               ModSes.Mix.Constraint.Create);