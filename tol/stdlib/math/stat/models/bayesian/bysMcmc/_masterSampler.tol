//////////////////////////////////////////////////////////////////////////////
// FILE   : _masterSampler.tol
// PURPOSE: Declares class BysMcmc::MasterSampler
// PURPOSE: Generic handler for masters in MonteCarlo Markov Chain methods
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Class MasterSampler
//////////////////////////////////////////////////////////////////////////////
{
  //Stores all blocks in expected order
  Set _.blocks;
  //User configuration parameters
  BysMcmc::Config _.config;
  //Messages identifier
  Text _MID;

  Set  eval(Matrix values);
  Text get.name(Real unused);
  Text get.session(Real unused);
  Text get.path(Real unused);
  Real initialize(Real unused);
  VMatrix draw(Real numSim);
  Real setStore(Matrix values);

  ////////////////////////////////////////////////////////////////////////////
  Set get.colNames(Real unused) 
  ////////////////////////////////////////////////////////////////////////////
  { 
    Set gcn(BysMcmc::BlockSampler blk)
    {
      blk::_.colNames
    };
    BinGroup("<<",EvalSet(_.blocks, gcn))
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.initialize.blocks =
  "Applies initialize method of each block";
  Real initialize.blocks(Real unused)
  ////////////////////////////////////////////////////////////////////////////
  {
    Real init.blk(BysMcmc::BlockSampler blk)
    {
      blk::initialize(0)
    };
    SetMin(EvalSet(_.blocks, init.blk))
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.draw.blocks =
  "Applies draw method of each block. This is the sampling method for self-"
  "updated blocks.";
  VMatrix draw.blocks(Real numSim)
  ////////////////////////////////////////////////////////////////////////////
  {
    VMatrix draw.blk(BysMcmc::BlockSampler blk)
    {
      blk::draw(numSim)
    };
    Group("ConcatRows", EvalSet(_.blocks, draw.blk))
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.setStore.blocks =
  "Set values of all blocks from a given row vector of values";
  Real setStore.blocks(Matrix values) 
  ////////////////////////////////////////////////////////////////////////////
  {
    Real store.blk(BysMcmc::BlockSampler blk)
    {
      If(Or(!(blk::enabled), blk::_.N<=0),0,
        blk::setStore(blk::getMcmc(values)))
    };
    Set EvalSet(_.blocks, store.blk);
    1
  }

};

//////////////////////////////////////////////////////////////////////////////
MasterSampler NoMasterSample(Real unused)
//////////////////////////////////////////////////////////////////////////////
{
  BysMcmc::MasterSampler noMasterSampler = [[
  //Stores all blocks in expected order
  Set _.blocks = Copy(Empty);
  //User configuration parameters
  BysMcmc::Config _.config = BysMcmc::Config.Default(0);
  //Messages identifier
  Text _MID = "";

  Set  eval(Matrix values) { ? };
  Text get.name(Real unused) { ? };
  Text get.session(Real unused) { ? };
  Text get.path(Real unused) { ? };
  Real initialize(Real unused) { ? };
  VMatrix draw(Real numSim) { ? };
  Real setStore(Matrix values) { ? } ]]
};
