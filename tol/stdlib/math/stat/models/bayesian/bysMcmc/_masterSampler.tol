//////////////////////////////////////////////////////////////////////////////
// FILE   : _masterSampler.tol
// PURPOSE: Declares class BysMcmc::MasterSampler
// PURPOSE: Generic handler for masters in MonteCarlo Markov Chain methods
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Class SubMasterBlockSampler: BlockSampler
//////////////////////////////////////////////////////////////////////////////
{
  //Stores all blocks in expected order
  Set _.blocks;

  Real _.fixedParamNum = ?;
  Real _.reloadParamNum = ?;
  Real _.freeParamNum = ?;

  ////////////////////////////////////////////////////////////////////////////
  Set get.fixedParam(Real unused) 
  ////////////////////////////////////////////////////////////////////////////
  { 
    Set gfp(BysMcmc::BlockSampler blk)
    {
      blk::_.partialSampler::_.fixedParam
    };
    BinGroup("<<",EvalSet(_.blocks, gfp))
  };

  ////////////////////////////////////////////////////////////////////////////
  Set get.reloadParam(Real unused) 
  ////////////////////////////////////////////////////////////////////////////
  { 
    Set grp(BysMcmc::BlockSampler blk)
    {
      blk::_.partialSampler::_.reloadParam
    };
    BinGroup("<<",EvalSet(_.blocks, grp))
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.define =
  "Creates common information handler about each MCMC block"
  "Arguments are:\n"
  "  Text name: Identifies the block.\n"
  "  Set colNames: Identifiers of block parameters that must be all unique.\n"
  "  McmcPartialHandler mcmcPartialHandler: partial simulation info.\n"
  "  Real numBlock: The position of this block in full MCMC.\n"
  "  Real firstCol: First column of this block in full MCMC\n"
  "  NameBlock config: User configuration parameters\n";
  Real define(Text name, 
              Set colNames, 
              BysMcmc::McmcPartialHandler mcmcPartialHandler,
              Real numBlock, 
              Real firstCol,
              BysMcmc::Config config)
  ////////////////////////////////////////////////////////////////////////////
  { 
  //WriteLn("TRACE "+_MID+"::define"+"\n  name="<<name+"\n  numBlock="<<numBlock+"\n  firstCol="<<firstCol);
    Text _.name := name;
    Text _MID := "[MasterSampler "+name+"] ";
    Real _.N := Card(colNames);
    Real If(_.N, {
      Real GT0 (Real idx) { idx>0 };
      Set _.colNames := SetTolNameAndIndex(colNames);
      Real SetIndexByName(_.colNames);
      1
    });
    Real _.numBlock := numBlock;
    Real _.firstCol := firstCol;
    Real _.lastCol  := firstCol+_.N-1;
    Set _.colIdx := Range(_.firstCol, _.lastCol, 1);
    BysMcmc::Config _.config := config;
    VMatrix If(Or(!_.N, VRows(_.store)!=_.N), _.store := Rand(_.N,1,0,0), _.store);
    WriteLn(_MID+" created with "<<
       _.N+" parameters from "<<_.firstCol+" to "<<_.lastCol+"");
    1
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.initialize.blocks =
  "Applies initialize method for each block";
  Real initialize.blocks(Real unused)
  ////////////////////////////////////////////////////////////////////////////
  {
    Real _.N := 0; 
    Real _.fixedParamNum := 0;
    Real _.reloadParamNum := 0;
    Real init.blk(BysMcmc::BlockSampler blk)
    {
      Real _.N := _.N + blk::_.N; 
      Real _.fixedParamNum := _.fixedParamNum + 
                              Card(blk::_.partialSampler::_.fixedParam); 
      Real _.reloadParamNum := _.reloadParamNum + 
                              Card(blk::_.partialSampler::_.reloadParam); 
      blk::initialize(0)
    };
    
    Set EvalSet(_.blocks, init.blk);
    Real _.freeParamNum := _.N - (_.fixedParamNum + _.reloadParamNum);
    1
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.draw.blocks =
  "Applies draw method for each block. This is the sampling method for self-"
  "updated blocks.";
  VMatrix draw.blocks(Real numSim)
  ////////////////////////////////////////////////////////////////////////////
  {
    VMatrix draw.blk(BysMcmc::BlockSampler blk)
    {
      blk::get.draw(numSim, False)
    };
    Group("ConcatRows", EvalSet(_.blocks, draw.blk))
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.setStore.blocks =
  "Set values of all blocks from a given row vector of values";
  Real setStore.blocks(Matrix values_) 
  ////////////////////////////////////////////////////////////////////////////
  {
    Matrix values = If(Columns(values_)==1,Tra(values_),values_);
  //WriteLn("TRACE "+_.name+"::setStore.blocks("<<Rows(values)+"x"<<Columns(values)+")");   
    Real store.blk(BysMcmc::BlockSampler blk)
    {
      If(Or(!(blk::enabled), blk::_.N<=0),0,
        blk::setStore(blk::getMcmc(values)))
    };
    Set EvalSet(_.blocks, store.blk);
    1
  };

  ////////////////////////////////////////////////////////////////////////////
  Real initialize(Real unused)
  ////////////////////////////////////////////////////////////////////////////
  {
    initialize.blocks(unused)
  };

  ////////////////////////////////////////////////////////////////////////////
  VMatrix draw(Real numSim) 
  ////////////////////////////////////////////////////////////////////////////
  {
    draw.blocks(numSim) 
  };

  ////////////////////////////////////////////////////////////////////////////
  VMatrix get.draw(Real numSim, Real force)
  ////////////////////////////////////////////////////////////////////////////
  {
    draw(numSim) 
  };

  ////////////////////////////////////////////////////////////////////////////
  Real setStore(Matrix values) 
  ////////////////////////////////////////////////////////////////////////////
  {
  //WriteLn("TRACE "+_.name+"::setStore("<<Rows(values)+"x"<<Columns(values)+")");   
    setStore.blocks(values) 
  }


};


//////////////////////////////////////////////////////////////////////////////
Class MasterSampler: SubMasterBlockSampler
//////////////////////////////////////////////////////////////////////////////
{
  //Stores all blocks in expected order
  Set _.blocks;

  Set  eval(Matrix values);
  Text get.name(Real unused) { _.name }; 
  Text get.session(Real unused);
  Text get.path(Real unused);

  ////////////////////////////////////////////////////////////////////////////
  Set get.colNames(Real unused) 
  ////////////////////////////////////////////////////////////////////////////
  { 
    Set gcn(BysMcmc::BlockSampler blk)
    {
      blk::_.colNames
    };
    BinGroup("<<",EvalSet(_.blocks, gcn))
  }

};

//////////////////////////////////////////////////////////////////////////////
MasterSampler NoMasterSample(Real unused)
//////////////////////////////////////////////////////////////////////////////
{
  BysMcmc::MasterSampler noMasterSampler = [[
  //Stores all blocks in expected order
  Set _.blocks = Copy(Empty);
  //User configuration parameters
  BysMcmc::Config _.config = BysMcmc::Config.Default(0);
  //Messages identifier
  Text _MID = "";

  Set  eval(Matrix values) { ? };
  Text get.session(Real unused) { ? };
  Text get.path(Real unused) { ? };
  Real initialize(Real unused) { ? };
  VMatrix draw(Real numSim) { ? };
  Real setStore(Matrix values) { ? } ]]
};

/* */
