/////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// MODULE: Stat (Statistics)
// FILE: _mainLinearBlock.tol
// PURPOSE: Declares method BysMcmc::Bsr::Gibbs::MainLinearBlock
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// MODULE: Stat (Statistics)
// FILE: _mainLinearBlock.tol
// PURPOSE: Declares method BysMcmc::Bsr::Gibbs::MainLinearBlock
/////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
//Method _.buildWorkSpace must create _.ws as an instance of this class
Class WorkSpace.ArimaReg : WorkSpace.LinReg
////////////////////////////////////////////////////////////////////////////
{
  Set _.armBlkRef;
  
  //////////////////////////////////////////////////////////////////////////
  VMatrix standarize(VMatrix _Z) 
  //////////////////////////////////////////////////////////////////////////
  { 
    (_.armBlkRef[1])::filter(_Z)
  };

  //////////////////////////////////////////////////////////////////////////
  Static WorkSpace.ArimaReg Null(Real unused)
  //////////////////////////////////////////////////////////////////////////
  {
    BysMcmc::Bsr::Gibbs::WorkSpace.ArimaReg aux = 
    [[
      VMatrix _.Y = Rand(0,0,0,0);
      VMatrix _.X = Rand(0,0,0,0);
      Set _.armBlkRef = Copy(Empty)
    ]]
  }
};

////////////////////////////////////////////////////////////////////////////
Class BlockMainLinear : BlockStdLin 
////////////////////////////////////////////////////////////////////////////
{
  //--------------------------------------------------------------------------
  // Auxiliar members
  //--------------------------------------------------------------------------
  WorkSpace.ArimaReg _.ws = BysMcmc::Bsr::Gibbs::WorkSpace.ArimaReg::Null(0);

  //--------------------------------------------------------------------------
  //Methods
  //--------------------------------------------------------------------------

  ////////////////////////////////////////////////////////////////////////////
  WorkSpace.LinReg getWorkSpaceLinReg(Real unused) 
  ////////////////////////////////////////////////////////////////////////////
  { _.ws };

  ////////////////////////////////////////////////////////////////////////////
  Real _do_buildWorkSpace(VMatrix Y,    //Non filtered output
                          VMatrix X,    //Non filtered input
                          BysMcmc::Bsr::Gibbs::BlockArima arm.blk) 
  ////////////////////////////////////////////////////////////////////////////
  {
    VMatrix _.ws::_.Y := Y;
    VMatrix _.ws::_.X := X;
    Set  _.ws::_.armBlkRef := [[arm.blk]];
    True
  };

  ////////////////////////////////////////////////////////////////////////////
  Real _buildWorkSpace(VMatrix Y,    //Non filtered output
                       VMatrix X,    //Non filtered input
                       BysMcmc::Bsr::Gibbs::BlockArima arm.blk) 
  ////////////////////////////////////////////////////////////////////////////
  {
  //WriteLn("TRACE"+_MID+" MainLinearBlock::_buildWorkSpace 0");
    If(!_.N1,
    {
    //WriteLn("TRACE"+_MID+" MainLinearBlock::_buildWorkSpace 1");
      _do_buildWorkSpace(Y,X,arm.blk)
    },
    {
    //WriteLn("TRACE"+_MID+" MainLinearBlock::_buildWorkSpace 2");
      VMatrix b1 = SubRow(_.partialSampler::_.values, _.i1);
      VMatrix X1 = SubCol(X, _.i1);
      VMatrix X2 = SubCol(X, _.i2);
      VMatrix Y2 = Y - X1*b1;
      _do_buildWorkSpace(Y2,X2,arm.blk)
    })
  };

  //////////////////////////////////////////////////////////////////////////////
  Static Text _.autodoc.member.MainLinearBlock =
  "Builds a NameBlock that can draw a Gibbs sample of the Main Linear block "
  "of a Bayesian Sparse Regression model";
  //////////////////////////////////////////////////////////////////////////////
  Static BlockStdLin New(
    Text name, 
    Set  varNames, 
    BysMcmc::McmcPartialHandler mcmcPartialHandler,
    Real numBlock, 
    Real firstCol,
    BysMcmc::Config config)
  //////////////////////////////////////////////////////////////////////////////
  {
    If(!Card(varNames), 
    BysMcmc::Bsr::Gibbs::BlockStdLinEmpty::New(name,numBlock,firstCol,config),
    BysMcmc::Bsr::Gibbs::BlockMainLinear blk = [[

    Code _.buildWorkSpace = _buildWorkSpace;

    //Defining the block in the Markov Chain
    Real _defined = define(
      name, 
      varNames, 
      mcmcPartialHandler,
      numBlock, 
      firstCol, 
      config)

  ]])}

};

