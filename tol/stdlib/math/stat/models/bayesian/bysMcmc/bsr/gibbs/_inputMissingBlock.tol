/////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// MODULE: Stat (Statistics)
// FILE: _inputMissingBlock.tol
// PURPOSE: Declares method BysMcmc::Bsr::Gibbs::InputMissingBlock
/////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////
Class BlockInputMissing : BlockStdLin 
////////////////////////////////////////////////////////////////////////////
{
  //--------------------------------------------------------------------------
  // Mandatory members
  //--------------------------------------------------------------------------
  //Input missing pairs (equation,variable)
  Matrix _.tj;
  //Input missing pairs (equation,missing)
  Matrix _.tk;
  //Input missing index j
  Set _.j;
  //Selecting input missing variables with prior information
  Set _.prior.sel;
  //Number of input missing prior equations
  Real _.prior.M;
  //Average vector of input missing priors
  Matrix _.prior.nu;
  //Inverse of standard deviation vector of input missing priors
  Matrix _.prior.si;
  //Standarized output of input missing priors
  VMatrix _.prior.Y;
  //Standarized input of input missing priors
  VMatrix _.prior.X;


  //--------------------------------------------------------------------------
  // Auxiliar members
  //--------------------------------------------------------------------------
  WorkSpace.LinReg _.ws = BysMcmc::Bsr::Gibbs::WorkSpace.LinReg::Null(0);
  //Standarized input of free missing priors
  VMatrix _.prior.X.free = Rand(0,0,0,0);

  Set _.j1  = Copy(Empty);
  Set _.j2  = Copy(Empty);
  Matrix _.tk1 = Rand(0,0,0,0);
  Matrix _.tk2 = Rand(0,0,0,0);

  //--------------------------------------------------------------------------
  //Methods
  //--------------------------------------------------------------------------
  ////////////////////////////////////////////////////////////////////////////
  WorkSpace.LinReg getWorkSpaceLinReg(Real unused) 
  ////////////////////////////////////////////////////////////////////////////
  { _.ws };


  ////////////////////////////////////////////////////////////////////////////
  Real _buildWorkSpace_full(
    BysMcmc::Bsr::Gibbs::BlockArima arm.blk, //ArimaBlock filter
    VMatrix si,    //SigmaBlock filter
    VMatrix Z,     //Noise of main linear block
    VMatrix beta)  //Main Linear Block parameters 
  ////////////////////////////////////////////////////////////////////////////
  {
  //WriteLn("TRACE"+_MID+" BlockInputMissing::_buildWorkSpace 0");
    Real    M = VRows(Z);
    VMatrix b_= SubRow(beta, _.j);
    Matrix  b = VMat2Mat(b_);
  //WriteLn("TRACE "+_MID+" draw 2 b="<<b);
    VMatrix B = (Convert(Triplet(_.tk | b, M, _.N),"Cholmod.R.Sparse"));
  //WriteLn("TRACE "+_MID+" draw 3 B="<<B);
    BysMcmc::Bsr::Gibbs::WorkSpace.LinReg wslr = 
    [[
      VMatrix _.Y = arm.blk::filter(si*Z) << _.prior.Y;
  //WriteLn("TRACE "+_MID+" draw 4 Y01="<<Y01);
      VMatrix _.X = arm.blk::filter(si*B) << _.prior.X
    ]];
    BysMcmc::Bsr::Gibbs::WorkSpace.LinReg _.ws := wslr;
    True
  };

  ////////////////////////////////////////////////////////////////////////////
  Real _buildWorkSpace_partial(
    BysMcmc::Bsr::Gibbs::BlockArima arm.blk, //ArimaBlock filter
    VMatrix si,    //SigmaBlock filter
    VMatrix Z,     //Noise of main linear block
    VMatrix beta)  //Main Linear Block parameters 
  ////////////////////////////////////////////////////////////////////////////
  {
    VMatrix If(VRows(_.prior.X.free)==0,
    {
       Set _.j1  := ExtractByIndex(_.j,  _.i1);
       Set _.j2  := ExtractByIndex(_.j,  _.i2);
      _.prior.X.free := SubCol(_.prior.X, _.i2)
    });

    Real M = VRows(Z);

    VMatrix B = (Convert(Triplet(_.tk | VMat2Mat(beta), M, _.N),"Cholmod.R.Sparse"));
    VMatrix B1 = SubCol(B,_.i1);
    VMatrix B2 = SubCol(B,_.i2);
  //WriteLn("TRACE "+_MID+" _buildWorkSpace_partial 2 B2\n="<<B2);
    VMatrix u1 = SubRow(_.partialSampler::_.values, _.i1);
  //WriteLn("TRACE "+_MID+" _buildWorkSpace_partial 2 u1\n="<<u1);
    VMatrix U1 = B1 * u1;
  //WriteLn("TRACE "+_MID+" _buildWorkSpace_partial 2 u1\n="<<U1);

    BysMcmc::Bsr::Gibbs::WorkSpace.LinReg wslr = 
    [[
      VMatrix _.Y = arm.blk::filter(si*Z+U1) << _.prior.Y;
      VMatrix _.X = arm.blk::filter(si*B2  ) << _.prior.X.free
    ]];
  //WriteLn("TRACE "+_MID+" _buildWorkSpace_partial 3.1 wslr::_.Y("<<VRows(wslr::_.Y)+"x"<<VColumns(wslr::_.Y)+")");
  //WriteLn("TRACE "+_MID+" _buildWorkSpace_partial 3.2 wslr::_.X("<<VRows(wslr::_.X)+"x"<<VColumns(wslr::_.X)+")");
    BysMcmc::Bsr::Gibbs::WorkSpace.LinReg _.ws := wslr;
    True
  };

  ////////////////////////////////////////////////////////////////////////////
  Real _buildWorkSpace(
    BysMcmc::Bsr::Gibbs::BlockArima arm.blk, //ArimaBlock filter
    VMatrix si,    //SigmaBlock filter
    VMatrix Z,     //Noise of main linear block
    VMatrix beta)  //Main Linear Block parameters 
  ////////////////////////////////////////////////////////////////////////////
  {
    If(!_.N1,
    {
      _buildWorkSpace_full(arm.blk,si,Z,beta)
    },
    {
      _buildWorkSpace_partial(arm.blk,si,Z,beta)
    })
  };

  ///////////////////////////////////////////////////////////////////////////
  Real initialize(Real unused)
  ///////////////////////////////////////////////////////////////////////////
  {
    Real initialize.subBlocks(unused);
  //WriteLn("TRACE "+_MID+" initialize 1");
  //WriteLn("TRACE "+_MID+" 7");
    VMatrix u = _.store;
    //Selecting input missing variables with left truncated prior information
    Set leftConstrainedPrior.sel = 
      Select(_.prior.sel, Real(BSR.MissingBlock b)
      {
        GT(b->MinBound,-1/0)
      });
    //Selecting input missing variables with right truncated prior information
    Set rightConstrainedPrior.sel = 
      Select(_.prior.sel, Real(BSR.MissingBlock b)
      {
        LT(b->MaxBound,1/0)
      });
  //WriteLn("TRACE "+_MID+" initialize 2");
    //Number of input missing with left constrained prior 
    Real left.R = Card(leftConstrainedPrior.sel);
    //Number of input missing with left constrained prior 
    Real right.R = Card(rightConstrainedPrior.sel);
    //Number of input missing with constrained prior 
    Real R = left.R + right.R;
    //Border of input missing constrains
    VMatrix prior.a = If(!R, Rand(0,0,0,0), 
    {
    //WriteLn("TRACE "+_MID+" 8");
      VMatrix aux1=If(!left.R,  Rand(0,1,0,0), 
        (-Mat2VMat(SetMat(Extract(leftConstrainedPrior.sel,  8)))));
    //WriteLn("TRACE "+_MID+" 9");
      VMatrix aux2=If(!right.R, Rand(0,1,0,0), 
        (+Mat2VMat(SetMat(Extract(rightConstrainedPrior.sel, 9)))));
      aux1<<aux2
    });
  //WriteLn("TRACE "+_MID+" initialize 3");
    //Coefficients of input missing constrains
    VMatrix prior.A = If(!R, Rand(0,0,0,0), 
    {
      Set left.range  = Range(1,        left.R, 1);
      Set right.range = Range(1+left.R, R,      1);
    //WriteLn("TRACE "+_MID+" 10");
      Matrix left  = If(!left.R, Rand(0,3,0,0), 
                                 SetMat(Traspose([[left.range]])) | 
                                 SetMat(Extract(leftConstrainedPrior.sel, 2)) | 
                                 Rand(left.R,1,-1,-1));
    //WriteLn("TRACE "+_MID+" 11");
      Matrix right = If(!right.R, Rand(0,3,0,0),
                                  SetMat(Traspose([[right.range]])) | 
                                  SetMat(Extract(rightConstrainedPrior.sel, 2)) | 
                                  Rand(right.R,1,+1,+1));
      Convert(Triplet(left<<right,R,_.N),"Cholmod.R.Sparse")
    });
  //WriteLn("TRACE "+_MID+" initialize 4");
    Real ok = matchConstrains(u,prior.A,prior.a);
  //WriteLn("TRACE "+_MID+" initialize 5");
    ok
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.filter =
  "Filter regression input with current missing block values. You can set a "
  "previously simulated vector of paramters calling before to method "
  "setMcmcRow";
  VMatrix filter(VMatrix Z)
  ////////////////////////////////////////////////////////////////////////////
  {
    If(Not(enabled), Z,
    {
      Matrix tr = _.tj | VMat2Mat(_.store);
      VMatrix U =Triplet(tr,VRows(Z),VColumns(Z));
      Z+Convert(U,"Cholmod.R.Sparse")
    })
  };

  //////////////////////////////////////////////////////////////////////////////
  Static Text _.autodoc.member.InputMissingBlock =
  "Builds a NameBlock that can draw a Gibbs sample of a Input Missing block "
  "of a Bayesian Sparse Regression model";
  //////////////////////////////////////////////////////////////////////////////
  Static BlockStdLin New(
    Text name, 
    Set  inputMissingBlock, 
    BysMcmc::McmcPartialHandler mcmcPartialHandler,
    Real numBlock, 
    Real firstCol,
    BysMcmc::NameBlock config)
  //////////////////////////////////////////////////////////////////////////////
  {
    If(!Card(inputMissingBlock), 
    BysMcmc::Bsr::Gibbs::BlockStdLinEmpty::New(name, numBlock, firstCol, config),
    BysMcmc::Bsr::Gibbs::BlockInputMissing blk = [[
    Code _.buildWorkSpace = _buildWorkSpace;
    //Given initial values of block variables
    VMatrix _.store = Mat2VMat(SetMat(Extract(inputMissingBlock, 6)));
    //Defining the block in the Markov Chain
    Real _defined = define(
      name, 
      EvalSet(inputMissingBlock, Text(BSR.MissingBlock b){ b->Name }), 
      mcmcPartialHandler,
      numBlock, 
      firstCol, 
      config);
    //Input missing pairs (equation,variable)
    Matrix _.tj = {
    //WriteLn("TRACE "+_MID+" 1");
      SetMat(Extract(inputMissingBlock, 3,4))
    };
    //Input missing pairs (equation,missing)
    Matrix _.tk = 
    {
    //WriteLn("TRACE "+_MID+" 2");
      SetMat(Extract(inputMissingBlock, 3,2))
    };
    //Input missing index j
    Set _.j = Traspose(Extract(inputMissingBlock, 4))[1];
    //Selecting input missing variables with prior information
    Set _.prior.sel = Select(inputMissingBlock, Real(BSR.MissingBlock b)
    {
      b->Prior != "None"
    });
    //Number of input missing prior equations
    Real _.prior.M = Card(_.prior.sel);
    //Average vector of input missing priors
    Matrix _.prior.nu = If(Not(_.prior.M),Rand(0,1,0,0),
    {
    //WriteLn("TRACE "+_MID+" 3");
      SetMat(Extract(_.prior.sel, 6))
    });
    //Inverse of standard deviation vector of input missing priors
    Matrix _.prior.si = If(Not(_.prior.M),Rand(0,1,0,0),
    {
    //WriteLn("TRACE "+_MID+" 4");
      Matrix s2 = SetMat(Extract(_.prior.sel, 7));
      RPow(s2,-1/2)
    });
    //Standarized output of input missing priors
    VMatrix _.prior.Y = If(Not(_.prior.M),Rand(0,1,0,0), 
      Mat2VMat(_.prior.nu $* _.prior.si));
    //Standarized input of input missing priors
    VMatrix _.prior.X = If(Not(_.prior.M),Rand(0,_.N,0,0),
    {
    //WriteLn("TRACE "+_MID+" _.prior.X 1");
    //WriteLn("TRACE "+_MID+" 5");
      Matrix aux1= SetMat(Traspose([[Set Range(1,_.prior.M,1)]]));
    //WriteLn("TRACE "+_MID+" 6");
      Matrix aux2= SetMat(Extract(_.prior.sel, 2));
      Matrix triplet =  aux1 | aux2 | _.prior.si;
    //WriteLn("TRACE "+_MID+" _.prior.X 2 triplet=\n"<<triplet);
      VMatrix tr = Triplet(triplet,_.prior.M,_.N);
    //WriteLn("TRACE "+_MID+" _.prior.X 3");
      VMatrix pX = Convert(tr,"Cholmod.R.Sparse");
    //WriteLn("TRACE "+_MID+" _.prior.X 4");
      pX
    })
  ]])}

};

