/////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// MODULE: Stat (Statistics)
// FILE: _estim.tol
// PURPOSE: Declares method BysMcmc::Bsr::Gibbs estimation methods
/////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.GetCyclerFromParsed =
"Builds the @Cycler of a BSR model by Gibbs method\n"+
"Argument `parsed` must be defined as the result of calling function "
"BSR.Parse\n";

@Cycler GetCyclerFromParsed(Set parsed_, 
                           @McmcPartialHandler mcmcPartialHandler,
                           @Config config,
                           @Notifier notifier)
//////////////////////////////////////////////////////////////////////////////
{
//WriteLn("TRACE EstimParsed Card(nonLinFilter) = "<<Card(nonLinFilter));
  Text struct = StructName(parsed_);
  Set parsed = Case(
    struct == "@BSR.ModelDef",
    {
      parsed_
    },
    struct == "@BSR.MasterInfo",
    {
      BysMcmc::Bsr::ModularSchema::Monophasic::MasterToJoint(parsed_)
    },
    1==1,
    {
      WriteLn("Argument Set parsed_ of GetCyclerFromParsed must have "
      "structure '@BSR.ModelDef' or '@BSR.MasterInfo' instead of '"+
      struct+"'","E");
      Real Stop;
      Copy(Empty)
    }
  );

  BysMcmc::@MasterSampler sampler = 
    BysMcmc::Bsr::Gibbs::@MasterSamplerBasic::New(
      parsed, mcmcPartialHandler, 1, 1, config);	

  BysMcmc::@Cycler cycler = [[
    BysMcmc::@MasterSampler _.sampler  = sampler;
    BysMcmc::@Notifier      _.notifier = notifier;
    BysMcmc::@Config        _.config   = config
  ]];
  Real cycler::define(0);
  Set Append(cycler::auxInfo, [[parsed]]);
//Set Append(cycler::auxInfo, [[sampler]]);
  cycler
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.GetCyclerFromAscii =
"Builds the @Cycler of a BSR model by Gibbs method\n"+
"Argument `ascii` must be an ASCII file path prepared to be parsed by "
"function BSR.Parse\n";
@Cycler GetCyclerFromAscii(Text ascii_, 
                          @McmcPartialHandler mcmcPartialHandler,
                          @Config config,
                          @Notifier notifier)
//////////////////////////////////////////////////////////////////////////////
{
//WriteLn("TRACE EstimAscii Card(nonLinFilter) = "<<Card(nonLinFilter));
  Text ascii = ascii_;
  Real notifier::parsing(0);
  Set parsed = BSR.Parse(ascii);
  BysMcmc::@Cycler cycler = GetCyclerFromParsed(
    parsed, mcmcPartialHandler, config, notifier);
  Set Append(cycler::auxInfo, [[ascii]]);
  cycler
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.GetCycler =
"Builds the @Cycler of a BSR model by Gibbs method\n"+
"Argument `modelDef` must be one of these things: \n "
" - A Text containing an ASCII file path prepared to be parsed by "
" function BSR.Parse\n"+
" - A Set containing the result of calling function BSR.Parse\n"+
" - A NameBlock with the minimum API accepted by standard importing method "
"BysMcmc::Bsr::Import::Write\n";
@Cycler GetCycler(Anything modelDef, 
                 @McmcPartialHandler mcmcPartialHandler,
                 @Config config,
                 @Notifier notifier)
//////////////////////////////////////////////////////////////////////////////
{
  Text g = Grammar(modelDef);
  Case
  (
    g=="Set",  GetCyclerFromParsed(
      modelDef, mcmcPartialHandler, config, notifier),
    g=="Text", GetCyclerFromAscii(
      modelDef, mcmcPartialHandler, config, notifier),
    g=="NameBlock", 
    {
      Text ascii = BysMcmc::Bsr::Import::Write(modelDef);
      BysMcmc::@Cycler cycler = GetCyclerFromAscii(
        ascii, mcmcPartialHandler, config, notifier);
      Real cycler::setImporter(modelDef);
      cycler
    },
    1==1, 
    {
      Error("Not allowd type "+g+" for argument modelDef of "
            "Bsr::Gibbs::Estim");
      Real Stop
    }
  )
};
