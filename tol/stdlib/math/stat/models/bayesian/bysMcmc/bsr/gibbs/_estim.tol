/////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// MODULE: Stat (Statistics)
// FILE: _estim.tol
// PURPOSE: Declares method BysMcmc::Bsr::Gibbs estimation methods
/////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.GetCyclerFromParsed =
"Builds the Cycler of a BSR model by Gibbs method\n"+
"Argument `parsed` must be defined as the result of calling function "
"BSR.Parse\n";

Cycler GetCyclerFromParsed(BSR.ModelDef parsed, 
                           McmcPartialHandler mcmcPartialHandler,
                           Set nonLinFilter,
                           Config config,
                           Notifier notifier)
//////////////////////////////////////////////////////////////////////////////
{
//WriteLn("TRACE EstimParsed Card(nonLinFilter) = "<<Card(nonLinFilter));

  BysMcmc::MasterSampler sampler = If(!Card(nonLinFilter),
  {
    WriteLn("[BSR] Using Basic Master");
    BysMcmc::Bsr::Gibbs::BasicMaster(
      parsed, mcmcPartialHandler, config)
  },
  {
    WriteLn("[BSR] Using Non Linear Filter Extended Master");
    BysMcmc::Bsr::Gibbs::NonLinMaster(
      parsed, mcmcPartialHandler, nonLinFilter, config)
  });	

  BysMcmc::Cycler cycler = [[
    BysMcmc::MasterSampler _.sampler  = sampler;
    BysMcmc::Notifier      _.notifier = notifier;
    BysMcmc::Config        _.config   = config
  ]];
  Real cycler::define(0);
  Set Append(cycler::auxInfo, [[parsed]]);
//Set Append(cycler::auxInfo, [[sampler]]);
  cycler
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.GetCyclerFromAscii =
"Builds the Cycler of a BSR model by Gibbs method\n"+
"Argument `ascii` must be an ASCII file path prepared to be parsed by "
"function BSR.Parse\n";
Cycler GetCyclerFromAscii(Text ascii_, 
                          McmcPartialHandler mcmcPartialHandler,
                          Set nonLinFilter,
                          Config config,
                          Notifier notifier)
//////////////////////////////////////////////////////////////////////////////
{
//WriteLn("TRACE EstimAscii Card(nonLinFilter) = "<<Card(nonLinFilter));
  Text ascii = ascii_;
  Real notifier::parsing(0);
  Set parsed = BSR.Parse(ascii);
  BysMcmc::Cycler cycler = GetCyclerFromParsed(
    parsed, mcmcPartialHandler, nonLinFilter, config, notifier);
  Set Append(cycler::auxInfo, [[ascii]]);
  cycler
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.GetCycler =
"Builds the Cycler of a BSR model by Gibbs method\n"+
"Argument `modelDef` must be one of these things: \n "
" - A Text containing an ASCII file path prepared to be parsed by "
" function BSR.Parse\n"+
" - A Set containing the result of calling function BSR.Parse\n"+
" - A NameBlock with the minimum API accepted by standard importing method "
"BysMcmc::Bsr::Import::Write\n";
Cycler GetCycler(Anything modelDef, 
                 McmcPartialHandler mcmcPartialHandler,
                 Config config,
                 Notifier notifier)
//////////////////////////////////////////////////////////////////////////////
{
  Text g = Grammar(modelDef);
  Case
  (
    g=="Set",  GetCyclerFromParsed(
      modelDef, mcmcPartialHandler, Empty, config, notifier),
    g=="Text", GetCyclerFromAscii(
      modelDef, mcmcPartialHandler, Empty, config, notifier),
    g=="NameBlock", 
    {
      Text ascii = BysMcmc::Bsr::Import::Write(modelDef);
    //WriteLn("TRACE EstimAndNotify FunctionExist('Set','modelDef::Get.NonLinFilter') = "<<FunctionExist("Set","modelDef::Get.NonLinFilter"));
      Set nonLinFilter = 
        If(!FunctionExist("Set","modelDef::Get.NonLinFilter"), Copy(Empty), 
          modelDef::Get.NonLinFilter(0));
    //WriteLn("TRACE EstimAndNotify Card(nonLinFilter) = "<<Card(nonLinFilter));
      GetCyclerFromAscii(
        ascii, mcmcPartialHandler, nonLinFilter, config, notifier)
    },
    1==1, 
    {
      Error("Not allowd type "+g+" for argument modelDef of "
            "Bsr::Gibbs::Estim");
      Real Stop
    }
  )
};
