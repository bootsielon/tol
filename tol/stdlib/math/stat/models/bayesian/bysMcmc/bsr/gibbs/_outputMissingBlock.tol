/////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// MODULE: Stat (Statistics)
// FILE: _outputMissingBlock.tol
// PURPOSE: Declares method BysMcmc::Bsr::Gibbs::OutputMissingBlock
/////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.OutputMissingBlock =
"Builds a NameBlock that can draw a Gibbs sample of a Output Missing block "
"of a Bayesian Sparse Regression model";
//////////////////////////////////////////////////////////////////////////////
  StdLinearBlock OutputMissingBlock(Text name, 
                                    Set  outputMissingBlock, 
                                    McmcPartialHandler mcmcPartialHandler,
                                    Real numBlock, 
                                    Real firstCol,
                                    NameBlock config)
//////////////////////////////////////////////////////////////////////////////
{
  If(!Card(outputMissingBlock), 
  BysMcmc::Bsr::Gibbs::StdLinearBlock.Default(name, numBlock, firstCol, config),
  BysMcmc::Bsr::Gibbs::StdLinearFullBlock blk = [[
  //Given initial values of block variables
  VMatrix _.store = Mat2VMat(SetMat(Extract(outputMissingBlock, 6)));

  //Defining the block in the Markov Chain
  Real _define = define(
    name, 
    EvalSet(outputMissingBlock, Text(BSR.MissingBlock b){ b->Name }), 
    mcmcPartialHandler,
    numBlock, 
    firstCol, 
    config);

  //Output missing pairs i,k
  Set _.t = Traspose(Extract(outputMissingBlock, 3))[1];
  //Selecting output missing variables with prior information
  Matrix _.I = SetCol(_.t);
  Set _.prior.sel = Select(outputMissingBlock, Real(BSR.MissingBlock b)
  {
    b->Prior != "None"
  });
  //Number of output missing prior equations
  Real _.prior.M = Card(_.prior.sel);
  //Average vector of output missing priors
  Matrix _.prior.nu = If(!_.prior.M, Rand(0,0,0,0), 
    SetMat(Extract(_.prior.sel, 6)));
  //Inverse of standard deviation vector of output missing priors
  Matrix _.prior.si = If(!_.prior.M, Rand(0,0,0,0), 
  {
    Matrix s2 = SetMat(Extract(_.prior.sel, 7));
    RPow(s2,-1/2)
  });
  //Standarized output of output missing priors
  VMatrix _.prior.Y = If(!_.prior.M, Rand(0,1,0,0), 
    Mat2VMat(_.prior.nu $* _.prior.si));
  //Standarized output of output missing priors
  VMatrix _.prior.X = If(!_.prior.M, Rand(0,_.N,0,0), 
  {
  //WriteLn("TRACE "+_MID+" _.prior.X 1");
    Matrix triplet = SetMat(Traspose([[Set Range(1,_.prior.M,1)]])) | 
                     SetMat(Extract(_.prior.sel, 2)) |
                     _.prior.si;
  //WriteLn("TRACE "+_MID+" _.prior.X 2 triplet=\n"<<triplet);
    VMatrix tr = Triplet(triplet,_.prior.M,_.N);
  //WriteLn("TRACE "+_MID+" _.prior.X 3");
    VMatrix pX = Convert(tr,"Cholmod.R.Sparse");
  //WriteLn("TRACE "+_MID+" _.prior.X 4 prior.X="<<pX);
    pX
  });

  ///////////////////////////////////////////////////////////////////////////
  Real initialize(Real unused)
  ///////////////////////////////////////////////////////////////////////////
  {
    Real initialize.subBlocks(unused);
  //WriteLn("TRACE "+_MID+" initialize 1");
    VMatrix u = _.store;
    //Selecting output missing variables with left truncated prior information
    Set leftConstrainedPrior.sel = 
      Select(_.prior.sel, Real(BSR.MissingBlock b)
      {
        GT(b->MinBound,-1/0)
      });
    //Selecting output missing variables with right truncated prior information
    Set rightConstrainedPrior.sel = 
      Select(_.prior.sel, Real(BSR.MissingBlock b)
      {
        LT(b->MaxBound,1/0)
      });
  //WriteLn("TRACE "+_MID+" initialize 2");
    //Number of output missing with left constrained prior 
    Real left.R = Card(leftConstrainedPrior.sel);
    //Number of output missing with left constrained prior 
    Real right.R = Card(rightConstrainedPrior.sel);
    //Number of output missing with constrained prior 
    Real R = left.R + right.R;
    //Border of output missing constrains
    VMatrix prior.a = If(!R, Rand(0,0,0,0), 
    {
      If(!left.R,  Rand(0,1,0,0), (-Mat2VMat(SetMat(Extract(leftConstrainedPrior.sel,  8)))))  <<
      If(!right.R, Rand(0,1,0,0), (+Mat2VMat(SetMat(Extract(rightConstrainedPrior.sel, 9)))))  
    });
  //WriteLn("TRACE "+_MID+" initialize 3");
    //Coefficients of output missing constrains
    VMatrix prior.A = 
    {
      Set left.range  = Range(1,        left.R, 1);
      Set right.range = Range(1+left.R, R,      1);
      Matrix left  = If(!left.R, Rand(0,3,0,0),
                     SetMat(Traspose([[left.range]])) | 
                     SetMat(Extract(leftConstrainedPrior.sel, 2)) |
                     Rand(left.R,1,-1,-1));
      Matrix right = If(!right.R, Rand(0,3,0,0),
                     SetMat(Traspose([[right.range]])) | 
                     SetMat(Extract(rightConstrainedPrior.sel, 2)) |
                     Rand(right.R,1,+1,+1));
      Convert(Triplet(left<<right,R,_.N),"Cholmod.R.Sparse")
    };
  //WriteLn("TRACE "+_MID+" initialize 4");
    Real ok = matchConstrains(u,prior.A,prior.a);
  //WriteLn("TRACE "+_MID+" initialize 5");
    ok
  };
  
  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.filter =
  "Filter regression output with current missing block values. You can set a "
  "previously simulated vector of paramters calling before to method "
  "setMcmcRow";
  VMatrix filter(VMatrix Z)
  ////////////////////////////////////////////////////////////////////////////
  {
  //WriteLn("TRACE"+_MID+" filter B");
    If(Not(enabled), Z,
    {
      VMatrix V = MergeRows(VRows(Z), [[ [[ _.store, _.I]] ]]);
      Z+Convert(V,"Cholmod.R.Sparse")
    })
  };

  VMatrix _.F = Rand(0,0,0,0);

  ////////////////////////////////////////////////////////////////////////////
  Real _buildWorkSpace(BysMcmc::BlockSampler arm.blk, //Arima Block handler
                       VMatrix   si,    //SigmaBlock filter
                       VMatrix   Z)     //Noise with missing as zero
  ////////////////////////////////////////////////////////////////////////////
  {
    VMatrix If(VRows(_.F)==0,
    {
      _.F := SubCol(Eye(VRows(Z)),_.t)
    });
    VMatrix F = arm.blk::filter(_.F);
    BysMcmc::Bsr::Gibbs::WorkSpace.LinReg wslr = 
    [[
      VMatrix _.Y = arm.blk::filter(si*Z) << _.prior.Y;
      VMatrix _.X = (-si*F) << _.prior.X
    ]];
    NameBlock _.ws := wslr;
    True
  };
  Code _.buildWorkSpace = _buildWorkSpace

]])};
