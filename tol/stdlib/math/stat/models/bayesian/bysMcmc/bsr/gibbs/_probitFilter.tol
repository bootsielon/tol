//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.ProbitFilter =
"Builds a NameBlock that can be used as non linear filter by method "
"NonLinBlock in order to simulate cut coefficent of probit model "
"\n"
"  Y = F(c) + X*beta + e; e ~ N(0,s^2)        \n"
"\n"
"where\n"
"\n"
"where the non linear filter of output is defined as\n"
"\n"
"          /                                  \n"
"         | 0 - TN(0, 1, -1/0, c) if Y=0      \n"
" F(c) ~ <                                    \n"
"         | 1 - TN(0, 1, c, +1/0) if Y=1      \n"
"          \\                                 \n"
"\n"
"being TN a drawer function of an scalar random variable distributed as an "
"standard truncated normal with paraemters\n"
"\n"
"  TN(Real average, Real sigma, Real lowerBound, Real upperBound)\n"
"\n"
"Linear parameter omega will be simulated by BSR linear block.\n"
"Arguments are:\n"
"  Real      enabled     : enables/disables non linear filter \n"
"  Text      segmentName : identifier of affected output segment \n"
"  Anything  origOutput  : Series or vector of binary output \n"
"  Date      firstDate   : UnknownDate for vector data \n" 
"  Date      lastDate    : UnknownDate for vector data \n" 
"";
//////////////////////////////////////////////////////////////////////////////
NameBlock ProbitFilter
(
  Real      enabled,
  Text      segmentName,
  Anything  origOutput,
  Date      firstDate,
  Date      lastDate
)
//////////////////////////////////////////////////////////////////////////////
{[[
  Real _.isNonLinearFilter = True;
  Set  _.externalInfo = Copy(Empty);
  Real      _.enabled = enabled;
  Text      _.cleanSegmentName = segmentName;
  Anything  _.origOutput = origOutput;
  Date      _.firstDate = firstDate;
  Date      _.lastDate = lastDate;

  Text _.segmentName = segmentName+"::Noise";
  //Identifier of original input
  Text _.inputName = "ProbitFilter";
  //Identifier prefix for non linear parameters
  Text _.name = "NonLinearFilterBlk::"+_.cleanSegmentName+"::ProbitFilter";
  Text _MID = "["+_.name+"]";

  Real _.hasVectorData = Grammar(_.origOutput)=="Matrix";
  Matrix _.Y = If(_.hasVectorData, _.origOutput,
  {
    Tra(SerSetMat([[_.origOutput]],_.firstDate,_.lastDate))
  });
  Real _.m = Rows(_.Y);
  Matrix _.A = IfMat(_.Y,_.Y*(   0),Not(_.Y)*(-1/0));
  Matrix _.B = IfMat(_.Y,_.Y*(+1/0),Not(_.Y)*(   0));

  Matrix   _.S = Not(_.Y)-_.Y;
  VMatrix _.VS = Mat2VMat(_.S);
  VMatrix _.D  = SetDiag(MatSet(Tra(_.S))[1]);
  Matrix _one = Rand(1,1,1,1);
  Matrix _emptyMatrix = Rand(0,0,0,0);

  ///////////////////////////////////////////////////////////////////////////
  //Called by BysMcmc::Bsr::Gibbs::NonLinBlock at initialization time
  Real initialize(Real unused)
  ///////////////////////////////////////////////////////////////////////////
  {
    NameBlock bsr = _.externalInfo[1];
    NameBlock nlb = _.externalInfo[2];
    Set Append(_.externalInfo, [[bsr::_.filter, nlb::_.segment->EquIdx]]);
    Real SetIndexByName(_.externalInfo);
    True
  };

/////////////////////////////////////////////////////////////////////////////
//Mandatory methods for all non linear filters
/////////////////////////////////////////////////////////////////////////////

  //Identifies the filter
  Text get.name(Real unused) { _.name };
  //Identifies the segment
  Text get.segmentName(Real unused) { _.segmentName };
  //Parameters of non linear block
  Set  get.colNames(Real unused) { Copy(Empty) };

  ///////////////////////////////////////////////////////////////////////////
  Matrix get.parameter(Real unused)
  ///////////////////////////////////////////////////////////////////////////
  {
    _emptyMatrix
  };

  ///////////////////////////////////////////////////////////////////////////
  Matrix eval(Matrix unused)
  //Returns the filter matrix
  ///////////////////////////////////////////////////////////////////////////
  {
    Matrix Xb = VMat2Mat(SubRow(_.externalInfo[3],_.externalInfo[4]));
    _.Y-RandTruncatedMultNormal(Xb, _one, _.A, _.B)
  }

]]};

//////////////////////////////////////////////////////////////////////////////
NameBlock ProbitFilter.Serie
(
  Real      enabled,
  Text      segmentName,
  Serie     origOutput,
  Date      firstDate,
  Date      lastDate,
  NameBlock cutValue
)
//////////////////////////////////////////////////////////////////////////////
{
  ProbitFilter(enabled,segmentName,origOutput,
               firstDate, lastDate, cutValue)
};

//////////////////////////////////////////////////////////////////////////////
NameBlock ProbitFilter.Vector
(
  Real      enabled,
  Text      segmentName,
  Serie     origOutput,
  NameBlock cutValue
)
//////////////////////////////////////////////////////////////////////////////
{
  ProbitFilter(enabled,segmentName,origOutput,
               UnknownDate, UnknownDate, cutValue)
};

