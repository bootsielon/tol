//////////////////////////////////////////////////////////////////////////////
// FILE    : build.node.pri.tol
// PURPOSE : Prior nodes building methods
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//Returns the NameBlock needed to build BSR information about an homogeneous 
//prior node over a set of independent parameters with the same known average 
//and standard deviation
NameBlock Pri.Homog(
  //Latent node identifier must be unique along whole hierarchy
  Text name,
  //Fixed and known average for all child parameters
  Real average,
  //Fixed and known standard deviation for all child parameters
  Real sigma, 
  //The list of names of child parameters of a lower level node
  Set  lowLevelParam)
//////////////////////////////////////////////////////////////////////////////
{[[
//Optional ad-hoc API.
  //The node identifier must be unique along the whole hierarchy of nodes
  Text _.name = name;
  //Set of Bsr.Param.Info related to variables of child nodes that are the
  //input of the regression segment defined by this node
  Set  _.alfa = lowLevelParam;
  //Fixed average for all equations
  Real _.average = average;
  //Fixed standard deviation for all equations
  Real _.sigma = sigma;
  
//Mandatory methods that will be used by BysMcmc::Bsr::Import

  //Returns the unique identifier of the regression segment
  Text Get.Name(Real unused) { _.name };

  /////////////////////////////////////////////////////////////////////////
  // NO SIGMA BLOCK
  Real Get.Sigma2(Real unused) { _.sigma^2 };
  /////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////
  // NO ARIMA BLOCK
  Real Get.ARIMA.Size(Real unused) { 0 };

  /////////////////////////////////////////////////////////////////////////
  // NO MAIN LINEAR BLOCK
  Real Get.Param.Size(Real unused) { 0 };

  /////////////////////////////////////////////////////////////////////////
  // NO MISSING VALUES BLOCK
  Real Get.Missing.Size(Real unused) {  0 };
  Set Get.Missing(Real numMissing) { Empty };
  /////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////
  // REGRESSION EQUATIONS
  Set Get.TimeInfo(Real unused) { Copy(Empty) };
  Real Get.Equation.Size(Real unused) { Card(_.alfa) };
  //Returns Real known output or Text missing name
  Text Get.Equation.Output(Real t) { FormatReal(-_.average,"%+.17lg") };
  //Returns the number of input terms involved in t-th equation
  Real Get.Equation.Input.Size(Real t) { Card(_.alfa) };
  //Returns Real known output or Text missing name of an input term
  Text Get.Equation.Input.Coef(Real t, Real term) { "-1" };
  //Returns the param name of an input term
  Text Get.Equation.Input.Param(Real numEqu, Real term) { _.alfa[term] };
  ///////////////////////////////////////////////////////////////////////////
  // NO Linear Constraints Section
  Code Get.Constraints.Handler = BysMcmc::Bsr::Import::Unconstrained

]]};

