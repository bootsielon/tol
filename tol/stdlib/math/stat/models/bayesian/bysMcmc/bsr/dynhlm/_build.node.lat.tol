//////////////////////////////////////////////////////////////////////////////
// FILE    : build.node.lat.tol
// PURPOSE : latent levels building methods
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//Returns the NameBlock needed to build BSR information about an homogeneous 
//latent node over a set of independent parameters with the same known
//standard deviation and unknown average, that is the only one parameter of 
//the latent node
NameBlock Lat.Homog(
  //Latent node identifier must be unique along whole hierarchy
  Text name,
  //Initial value for the regression parameter
  Real initValue,
  //Fixed and known standard deviation  for all child parameters
  Real sigma, 
  //Minimum feasible value for regression parmeter
  //If you don't have prior information about this set it to -1/0
  Real lowerBound, 
  //Maximum feasible value for regression parmeter
  //If you don't have prior information about this set it to +1/0
  Real upperBound, 
  //The list of names of child parameters of a lower level node
  Set  lowLevelParam,
  //The result of calling BysMcmc::Bsr::Import::Constraints
  NameBlock constraints)
//////////////////////////////////////////////////////////////////////////////
{[[
//Optional ad-hoc API.
  Text _.name = name;
  Set _.alfa = lowLevelParam;
  Real _.sigma = sigma;
  Set _.param = [[Bsr.Param.Info(_.name+".Average", initValue, lowerBound, upperBound)]];
  NameBlock _.constraints = constraints;
//Mandatory methods that will be used by BysMcmc::Bsr::Import

  //Returns the unique identifier of the regression segment
  Text Get.Name(Real unused) { _.name };

  /////////////////////////////////////////////////////////////////////////
  // NO SIGMA BLOCK
  Real Get.Sigma2(Real unused) { _.sigma^2 };
  /////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////
  // NO ARIMA BLOCK
  Real Get.ARIMA.Size(Real unused) { 0 };

  /////////////////////////////////////////////////////////////////////////
  // MAIN LINEAR BLOCK
  Real Get.Param.Size(Real unused) { Card(_.param) };
  Set Get.Param(Real numParam) { _.param[numParam] };

  /////////////////////////////////////////////////////////////////////////
  // NO MISSING VALUES BLOCK
  Real Get.Missing.Size(Real unused) {  0 };
  /////////////////////////////////////////////////////////////////////////

  /////////////////////////////////////////////////////////////////////////
  // REGRESSION EQUATIONS
  Set Get.TimeInfo(Real unused) { Copy(Empty) };
  Real Get.Equation.Size(Real unused) { Card(_.alfa) };
  //Returns Real known output or Text missing name
  Text Get.Equation.Output(Real t) { "+0" };
  //Returns the number of input terms involved in t-th equation
  Real Get.Equation.Input.Size(Real t) { 2 };
  //Returns Real known output or Text missing name of an input term
  Text Get.Equation.Input.Coef(Real t, Real term) 
  { 
    If(term==1, "-1", "+1") 
  };
  //Returns the param name of an input term
  Text Get.Equation.Input.Param(Real numEqu, Real term)
  {
    If(term==1, _.alfa[numEqu], _.param[1]->Name)
  };
  ///////////////////////////////////////////////////////////////////////////
  // LINEAR CONSTRAINING INEQUATIONS
  NameBlock Get.Constraints.Handler(Real unused) { _.constraints }

]]};


