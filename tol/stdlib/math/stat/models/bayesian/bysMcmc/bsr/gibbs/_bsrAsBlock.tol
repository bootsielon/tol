//////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// MODULE: Stat (Statistics)
// FILE: _bsrAsBlock.tol
// PURPOSE: Declares method BysMcmc::Bsr::Gibbs::BsrAsBlock
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.BsrAsBlock =
"Builds a NameBlock that can draw a Gibbs sample of a full BSR used as block "
"of any other simulator.";
//////////////////////////////////////////////////////////////////////////////
  BlockSampler BsrAsBlock(MasterSampler bsrInstance, 
                          Real numBlock, 
                          Real firstCol,
                          NameBlock  config)
//////////////////////////////////////////////////////////////////////////////
{
  BysMcmc::BlockSampler blk = [[
  BysMcmc::MasterSampler _.bsr = bsrInstance;
  //Defining the block in the Markov Chain
  Real _define = 
  {
    define(
    _.bsr::get.name(0),
    _.bsr::get.colNames(0);
    _.bsr::_.mcmcPartialHandler,
    numBlock,
    firstCol,
    config)
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.initialize =
  "Initializes the BSR as block";
  Real initialize(Real unused)
  ////////////////////////////////////////////////////////////////////////////
  {
    _.bsr::initialize(unused)
  };

  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.draw =
  "Method of simulation of BSR as block";
  VMatrix draw(Real numSim)
  ////////////////////////////////////////////////////////////////////////////
  {
    VMatrix param = _.bsr::draw(numSim);
    Real putStoreV(param);
    param
  };
  ////////////////////////////////////////////////////////////////////////////
  Text _.autodoc.member.setStore =
  "Sets _.store to the specified row vector of values";
  Real setStore(Matrix values) 
  ////////////////////////////////////////////////////////////////////////////
  {
    putStore(values);
    _.bsr::setStore(values)
  }


]]};
