/////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// FILE: _recover.tol
// PURPOSE: 
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
Real StoreRecover(Cycler cycler)
/////////////////////////////////////////////////////////////////////////////
{
  Text recover.path = cycler::_.sampler::get.path(0)+cycler::_.name+".recover.oza";
  NameBlock recover = 
  [[
    Text _.name      = cycler::_.name;
    Set  _.colNames  = cycler::_.sampler::get.colNames(0);
    Set  _.repCfg    = cycler::bysInf_;
    Text _.mcmc.path = cycler::_.path;
    Real stored.simulations(Real unused)
    {
      Set mcmc.dim = MatReadDimensions(path);
      mcmc.dim::Rows
    };
    Set report(Real burnin, Real length, Real thinning)
    {
      BysMcmc::Inference::loadAndReport(
        _.mcmc.path, burnin, length, thinning, 
        _.name, _.colNames, _.repCfg)
    }
  ]];
  Real Ois.Store([[recover]],recover.path);
  1
};

/////////////////////////////////////////////////////////////////////////////
NameBlock Get.Recover(Text rootPath, Text id_model, Text id_session)
/////////////////////////////////////////////////////////////////////////////
{
  Text path = rootPath+id_model+"."+id_session+".recover.oza";
  WriteLn("Recovering path "+path);
  Set Include(path);
  recover 
};

/////////////////////////////////////////////////////////////////////////////
Set RecoveAndReport(Text rootPath, Text id_model, Text id_session,
                    Real burnin, Real length, Real thinning)
/////////////////////////////////////////////////////////////////////////////
{
  NameBlock recover = BysMcmc::Get.Recover(
    rootPath, id_model, id_session);
  Set report = recover::report(burnin,length,thinning)
};

