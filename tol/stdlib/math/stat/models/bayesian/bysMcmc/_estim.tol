/////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// FILE: _estim.tol
// PURPOSE: 
/////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Class Estimation
//////////////////////////////////////////////////////////////////////////////
{
  BysMcmc::Cycler cycler;
  Set report = Copy(Empty);
  Matrix param.average = Rand(0,0,0,0);
  Set eval.average = Copy(Empty);
  Set linear.effects = Copy(Empty)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Estim =
"Estimates a bayesian model\n";
Estimation Estim(Cycler cycler_)
//////////////////////////////////////////////////////////////////////////////
{
  BysMcmc::Estimation estim = 
  [[
    BysMcmc::Cycler cycler = cycler_
  ]];
  Real StoreRecover(cycler_);
  BysMcmc::Config config = cycler_::_.config;
  BysMcmc::Notifier notifier = cycler_::_.notifier;
  Real cycler_::initialize(0);
  Real sampleLength = config::mcmc.burnin+config::mcmc.sampleLength;
  Real cycler_::generate(sampleLength); 

  Real notifier::reporting(0);
  Real If(config::do.report,
  {
    Set estim::report := cycler_::report(config::mcmc.burnin,
                                         config::mcmc.sampleLength,
                                         config::mcmc.thinning);
    Matrix estim::param.average := 
    {
      Tra(SetMat(Extract(estim::report::coda.summary, 2)))
    };
    Real If(config::do.eval,
    {
      Real notifier::evaluating(0);
      Set estim::eval.average := cycler_::_.sampler::eval(estim::param.average);
      1
    });
    1 
  });
  estim
};
