/////////////////////////////////////////////////////////////////////////////
// LIBRARY: StdtLib (Standard Library of TOL)
// FILE: _estim.tol
// PURPOSE: 
/////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Class @Estimation
//////////////////////////////////////////////////////////////////////////////
{
  BysMcmc::@Cycler cycler;
  Set report = Copy(Empty);
  Matrix param.average = Rand(0,0,0,0);
  Set eval.average = Copy(Empty);
  Set linear.effects = Copy(Empty);

  ////////////////////////////////////////////////////////////////////////////
  Real Run(Real void)
  ////////////////////////////////////////////////////////////////////////////
  {
    BysMcmc::@Config config = cycler::_.config;
    BysMcmc::@Notifier notifier = cycler::_.notifier;
    Real BysMcmc::@McmcRecover::Store(cycler, config::partialSampling.Sequential);
    Real sampleLength = config::mcmc.burnin+config::mcmc.sampleLength;
    
    Real cycler::generate(sampleLength); 

    Real notifier::reporting(0);
    Real If(config::do.report,
    {
      Set report := cycler::report(config::mcmc.burnin,
                                    config::mcmc.sampleLength,
                                    config::mcmc.thinning);
      Matrix param.average := 
      {
        Tra(SetMat(Extract(report::coda.summary, 2)))
      };
      Real If(config::do.eval,
      {
        Real notifier::evaluating(0);
        Set eval.average := cycler::_.sampler::eval(param.average);
        1
      });
      1 
    });
    1
  };

  ////////////////////////////////////////////////////////////////////////////
  Static @Estimation New(@Cycler cycler_)
  ////////////////////////////////////////////////////////////////////////////
  {
    BysMcmc::@Estimation estim = 
    [[
      BysMcmc::@Cycler cycler = cycler_
    ]]
  }

};

