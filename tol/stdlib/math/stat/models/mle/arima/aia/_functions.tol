//////////////////////////////////////////////////////////////////////////////
// MODULE: stdlib.math.stat.model.arima.aia 
// THEME:  Automatic Intervention Analysis
// FILE:   aia.functions.tol
// BRIEF:  Generic functions
//////////////////////////////////////////////////////////////////////////////

//VBR_PENDENT: Falta traducir comentarios al inglés

//////////////////////////////////////////////////////////////////////////////
  Set Aia.OutlierInfo.BuildFromSetInpDef(Set aia)
//////////////////////////////////////////////////////////////////////////////
{
  For(1,Card(aia),Set(Real k)
  {
    Text id = Replace(Replace(Identify(aia[k]),"(",","),")",",");
    Set tok = Tokenizer(id,",");
    Aia.OutlierInfo
    (
      tok[6],
      tok[5],
      Eval(tok[4]),
      Coef(aia[k]->Omega,0)
    )
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Transforma el resultado de la función AIA de un conjunto de estructuras "
"InputDef a otro codificado en Aia.OutlierInfo",
Aia.OutlierInfo.BuildFromSetInpDef);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
  Text Aia.OutlierInfo.GetInpDefExpression(Aia.OutlierInfo inf)
//////////////////////////////////////////////////////////////////////////////
{
  Text v = FormatReal(inf->value_,"%.15lg");
  Text d = FormatDate(inf->date_,"%uy%Ym%md%dh%hi%is%s");
  "Set InputDef("+v+", Aia."+inf->shape_+"."+d+"="+
  "RationExpand("+d+","+inf->dating_+","+inf->shape_+"));\n"
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Devuelve en un formato estandarizado la expresión de la estructura InputDef "
"correspondiente a un input AIA definido con estructura Aia.OutlierInfo",
Aia.OutlierInfo.GetInpDefExpression);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
  Text Aia.OutlierInfo.StandardExpression(Set aia)
//////////////////////////////////////////////////////////////////////////////
{
  Set aiaId = Aia.OutlierInfo.BuildFromSetInpDef(aia);
  SetSum(aiaId, Aia.OutlierInfo.GetInpDefExpression)
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Devuelve la expresión estandarizada del resultado de la función AIA",
Aia.OutlierInfo.BuildFromSetInpDef);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
  Text Aia.OutlierInfo.GetSerExpression(Aia.OutlierInfo inf)
//////////////////////////////////////////////////////////////////////////////
{
  Text v = FormatReal(inf->value_,"%.15lg");
  Text d = FormatDate(inf->date_,"%uy%Ym%md%dh%hi%is%s");
  "+("+v+":RationExpand("+d+","+inf->dating_+","+inf->shape_+"))"
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Devuelve la expresión sin nombre de la serie de efecto correspondiente a un "
"input AIA definido con estructura Aia.OutlierInfo",
Aia.OutlierInfo.GetSerExpression);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
  Serie Aia.OutlierInfo.GetSerie(Aia.OutlierInfo out)
//////////////////////////////////////////////////////////////////////////////
{
  Eval(Aia.OutlierInfo.GetSerExpression(out))
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Devuelvecomo objeto local la serie de efecto correspondiente a un input AIA "
"definido con estructura Aia.OutlierInfo",
Aia.OutlierInfo.GetSerie);
//////////////////////////////////////////////////////////////////////////////


