//////////////////////////////////////////////////////////////////////////////
// FILE: _db_connect.tol
// PURPOSE: Data base connections
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
NameBlock DBConnect =
//////////////////////////////////////////////////////////////////////////////
[[
  Text _.autodoc.description = 
  "Allows a simpler way of DataBase connection handling.\n"
  "User just needs to cretae all connections  at the begin of a project:\n"
  "\n"
  "  DBHandler MyDbc_1 = DBConnect::Create(...);\n"
  "  DBHandler MyDbc_2 = DBConnect::Create(...);\n"
  "\n"
  "Afterwords user can call MyDbc_n::Open(0) or better MyDbc_n::Activate(0) "
  "indistinctly due to the handler remember if it's open or not and call the "
  "appropiate internal method in a transparent way."
  "Method MyDbc_n::Close(0) is not mandatory although it should be "
  "recommended to avoid server overhead.";

  //////////////////////////////////////////////////////////////////////////////
  Class DBHandler  
  //////////////////////////////////////////////////////////////////////////////
  {
    Text _.autodoc.description;
    Text _.alias;
    Text _.user;
    Text _.password;
    Text _.server;
    Text _.driver;
    Text _.defaultDB;
    Real _.isOpen;

    Real Open(Real unused) 
    { 
      If(_.isOpen, 1,
      {
      //VBR: Esto es un parche para salvar el ticket #697 pero lo adecuado 
      //sería poder usar los argumentos adicionales con el driver ODBC sin 
      //necesidad de crear el alias en la configuración de herramientas del
      //sistema
        Real ok = If(_.driver=="odbc",
          DBOpen(_.alias, _.user, _.password),
          DBOpen(_.alias, _.user, _.password, 
                 [[_.driver, _.defaultDB, _.server]]));
        Real _.isOpen := ok;
        WriteLn("[DBConnect::"+_.alias+"::Open] "+
         I2("Connection is ", "La conexión ")+
         If(ok,I2("is OK","tuvo exito"),I2("has failed","ha fallado")));
        ok
      })
    };
    Real Activate(Real unused) 
    { 
      If(!_.isOpen, Open(0), DBActivate(_.alias) )
    };
    Real Close(Real unused) 
    { 
      If(!_.isOpen, 0, 
      {
        Real _.isOpen := false;
        DBClose(_.alias)
      })
    };
    Real Check(Real unused)
    {
      WriteLn("[DBConnect::Create] "+
        I2("Checking connection to ",
           "Chequeando la conexión a ")+_.alias);
      Real ok.open = Open(0);
      If(!ok.open, false, Close(0))
    }
  };

  //Stores all available connections
  Set _.allConnections = Copy(Empty);

  ////////////////////////////////////////////////////////////////////////////
  //Ctreates a generic database connection handler
  NameBlock Create(Text alias, Text user, Text password, 
                   Text driver, Text defaultDataBase, Text server,
                   Text purpose)
  ////////////////////////////////////////////////////////////////////////////
  { 
    DBHandler dbc = 
    [[
      Text _.autodoc.description = 
        I2("Data base conexion ",
           "Conexión con la base de datos ")+alias+"\n"+
        I2("Purpose: ","Propósito: ")+purpose;

      Text _.alias     = alias;
      Text _.user      = user;
      Text _.password  = password;
      Text _.server    = server;
      Text _.driver    = 
      {
        Text dr = ToLower(driver);
        Case(
          dr=="postgresql","postgres",
          dr=="pgsql",     "postgres",
          dr=="postgres",  "postgres",
          dr=="mysql",     "mysql",
          dr=="odbc",      "odbc",
          1==1,            
          {
            WriteLn("Unknown driver "+driver+". Using default odbc","W");
            "odbc"
          }
        )
      };
      //VBR: Curiosamente el driver ODBC funciona con los arguemntos 
      //adicionales si se sustituye defaultDataBase por alias
      //Text _.defaultDB = If(_.driver=="odbc", alias, defaultDataBase);
      Text _.defaultDB = defaultDataBase;
 
      Real _.isOpen    = false
    ]];
    Real If(!ObjectExist("NameBlock","_.allConnections::"+alias),
    { 
      Set Append(_.allConnections, [[ Eval("NameBlock "+alias+"=dbc") ]]);
      Real SetIndexByName(_.allConnections)
    });
    Eval("_.allConnections::"+alias)
  };

  Real OpenAll(Real unused)
  {
    SetMin(EvalSet(_.allConnections, Real(DBHandler dbc) { dbc::Open(0) }))
  };
  Real CheckAll(Real unused)
  {
    SetMin(EvalSet(_.allConnections, Real(DBHandler dbc) { dbc::Check(0) }))
  };
  Real CloseAll(Real unused)
  {
    SetMin(EvalSet(_.allConnections, Real(DBHandler dbc) { dbc::Close(0) }))
  }
]];

