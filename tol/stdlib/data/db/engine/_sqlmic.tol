//////////////////////////////////////////////////////////////////////////////
// FILE    : _sqlmic.tol
// PURPOSE : Funciones propias del gestor Microsoft SQL Server
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// CONSTANTS
//////////////////////////////////////////////////////////////////////////////

Text SqlMicFormatRealTol2Sql = "%.6lf";
Date SqlMicDefaultTheBegin   = y1900m01d01h00i00s00;
Date SqlMicDefaultTheEnd     = y3000m01d01h00i00s00;
Real SqlMicDefaultPrecision  = 10^38-1;

//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text SqlMicFormatDate(Date dte)
//////////////////////////////////////////////////////////////////////////////
{
  If(dte == UnknownDate, "convert(datetime, null, 120)",
  {
    Date dteAux = 
     If(dte == TheBegin, SqlMicDefaultTheBegin,
     If(dte == TheEnd,   SqlMicDefaultTheEnd, dte));
    "convert(datetime, '"+
      Replace(FormatDate(dteAux, "%c%Y-%m-%d %h:%i:%s"), ".00", "")+"', 120)"
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Formateador de fecha con formato independiente del de TOL al formato 
equivalente Microsoft SQL Server.",
SqlMicFormatDate);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text SqlMicFormatReal(Real rea)
//////////////////////////////////////////////////////////////////////////////
{
  Real isUnk = IsUnknown(rea);
  Real isInf = IsInfinite(rea);
  Real filRea = If(LT(-SqlMicDefaultPrecision, rea, SqlMicDefaultPrecision),
   rea, Sign(rea)*SqlMicDefaultPrecision);
  If(Or(isUnk, isInf), "convert(float, null)", 
   FormatReal(filRea,SqlMicFormatRealTol2Sql))
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Formateador de reales TOL a formato real de Microsoft SQL Server.",
SqlMicFormatReal);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text SqlMicFormatInteger(Real rea)
//////////////////////////////////////////////////////////////////////////////
{
  Real isUnk = IsUnknown(rea);
  Real isInf = IsInfinite(rea);
  If(Or(isUnk, isInf), "convert(float, null)", IntText(rea))
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Formateador de reales TOL a formato entero de Microsoft SQL Server. Si el 
numero no es entero lo redondea.",
SqlMicFormatInteger);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text SqlMicFormatText(Text txt)
//////////////////////////////////////////////////////////////////////////////
{ If(txt == "", "convert(char, null)","'"+Replace(txt, "'", "''")+"'") };
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Formateador de text a char de Microsoft SQL Server",
SqlMicFormatText);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text SqlMicFormatPolyn(Polyn pol)
//////////////////////////////////////////////////////////////////////////////
{ 
  If(IsUnknownPolyn(pol), "convert(char, null)", "'"+FormatPolyn(pol)+"'") 
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Formateador de polyn a char de Microsoft SQL Server",
SqlMicFormatPolyn);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Set SqlMicInfoColumns(Text tabla)
//////////////////////////////////////////////////////////////////////////////
{ 
  // query
  Text strSql =
"
select cast(o.name as varchar(8000)) as Table_, 
       cast(c.name as varchar(8000)) as Column_, 
       cast(t.name as varchar(8000)) as Type_, 
       c.length                as Length_, 
       c.prec                  as Precision_,
       c.scale                 as Scale_,
       c.isnullable            as IsNull_,
       case
         when
           (select cast(c2.name as varchar(8000))
            from syscolumns c2, sysobjects o2, sysindexkeys ik2
            where o2.id       = c2.id
              and o2.id       = ik2.id
              and ik2.indid   = 1          -- primary key
              and c2.colorder = ik2.colid
              and o.name      = o2.name
              and c.name      = c2.name) is null then 0
          else 1
        end as IsKey_
from syscolumns c, sysobjects o, systypes t
where o.id    = c.id
  and t.xtype = c.xtype
  and upper(o.name) = upper('"+tabla+"')
order by c.colorder
  ";
  Set info = SqlDBTable(strSql, "StSqlInfoColums");
  info
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Información de los campos de una tabla de Microsoft SQL Server",
SqlMicInfoColumns);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Set SqlMicInfoKeys(Text tabla)
//////////////////////////////////////////////////////////////////////////////
{ 
  // query
  Text strSql =
"
select cast(o.name as varchar(8000)) as Table_,
       cast(i.name as varchar(8000)) as Index_,
       cast(c.name as varchar(8000)) as Column_
from syscolumns c, sysobjects o, sysindexkeys ik, sysindexes i
where o.id       = c.id
  and o.id       = ik.id
  and i.indid    = ik.indid
  and i.indid    = 1          -- primary key
  and c.colorder = ik.colid
  and o.id       = i.id
  and upper(o.name) = upper('"+ tabla +"')
order by ik.keyno
";
  Set info = SqlDBTable(strSql, "StSqlInfoKeys");
  info
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Información de los campos clave de una tabla de Microsoft SQL Server",
SqlMicInfoKeys);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Set SqlMicInfoForeign(Text tabla)
//////////////////////////////////////////////////////////////////////////////
{ 
  // query
  Text strSql =
"
select cast(o.name   as varchar(8000)) as Table_,
       cast(oo.name  as varchar(8000)) as Index_,
       cast(c.name   as varchar(8000)) as Column_,
       cast(o2.name  as varchar(8000)) as ForeignTable_,
       cast(i2.name as varchar(8000)) as ForeignIndex_,
       cast(c2.name  as varchar(8000)) as ForeignColumn_         
from sysobjects o,  sysobjects oo,  sysforeignkeys fk,  syscolumns c, 
     sysobjects o2, sysobjects oo2, sysforeignkeys fk2, syscolumns c2,
     sysindexes i2
where o.id          = fk.fkeyid
  and oo.id         = fk.constid
  and fk.fkeyid     = c.id
  and fk.fkey       = c.colid
  and o2.id         = fk2.rkeyid
  and oo2.id        = fk2.constid
  and fk2.rkeyid    = c2.id
  and fk2.rkey      = c2.colid
  and fk.constid    = fk2.constid
  and fk.keyno      = fk2.keyno
  and i2.indid      = 1          -- primary key
  and o2.id         = i2.id
  and upper(o.name) = upper('"+ tabla +"')
order by o2.name, fk.keyno
";
  Set info = SqlDBTable(strSql, "StSqlInfoForeing");
  info
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Información de las relacciones externas de una tabla de Oracle",
SqlMicInfoForeign);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Set SqlMicInfoDependent(Anything tabla)
//////////////////////////////////////////////////////////////////////////////
{ 
  Text gramTabla = Grammar(tabla);
  // informacion de los campos claves
  Text txtWhe = Case(
    gramTabla == "Text", " upper(o2.name) = upper('"+tabla+"') ",
    gramTabla == "Set",
    {
      Set lstWhe = EvalSet(tabla, Text (Set set)
      {
         Text " ( upper(o2.name) = upper('"+set->Table+"') 
                  and upper(c2.name) = upper('"+set->Column+"'))"
      });
      Text TxtListItem (lstWhe, " or "+NL)
    }, 
    "",
    {
      WriteLn("ERROR: SqlMicInfoDependent\n"+
              "Gramatica '"+ gramTabla +"' desconocida!");
      " = '"<< tabla +"'"
    }
  );
  // query
  Set info = If(txtWhe == "", Empty,
  {
    Text strSql =
"
select cast(o.name   as varchar(8000)) as Table_,
       cast(oo.name  as varchar(8000)) as Index_,
       cast(c.name   as varchar(8000)) as Column_,
       cast(o2.name  as varchar(8000)) as ForeignTable_,
       cast(i2.name  as varchar(8000)) as ForeignIndex_,
       cast(c2.name  as varchar(8000)) as ForeignColumn_         
from sysobjects o,  sysobjects oo,  sysforeignkeys fk,  syscolumns c, 
     sysobjects o2, sysobjects oo2, sysforeignkeys fk2, syscolumns c2,
     sysindexes i2 
where o.id           = fk.fkeyid
  and oo.id          = fk.constid
  and fk.fkeyid      = c.id
  and fk.fkey        = c.colid
  and o2.id          = fk2.rkeyid
  and oo2.id         = fk2.constid
  and fk2.rkeyid     = c2.id
  and fk2.rkey       = c2.colid
  and fk.constid     = fk2.constid
  and fk.keyno       = fk2.keyno
  and i2.indid       = 1          -- primary keyd
  and o2.id          = i2.id
  and ("+ txtWhe +")
order by o.name, fk.keyno
";
    Set info = SqlDBTable(strSql, "StSqlInfoForeing");
    info
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Información de las tablas que dependen de una tabla dada en 
Microsoft SQL Server. La función puede recibir un Text o un Set.
Parámetros:
  tabla -> Text: Nombre de una tabla la Base de Datos
           Set : Conjunto con la estructura 'StSqlInfoForeing'",
SqlMicInfoDependent);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Set SqlMicGetDependantTables(Text tabla, Set columns)
//////////////////////////////////////////////////////////////////////////////
{ 
  // informacion de los campos claves
  Text txtWhe = " upper(o2.name) = upper('"+tabla+"')" + 
    Case(
       IsEmpty(columns), "",
       1,
       {
        Set lstWhe = EvalSet(columns, Text (Text col)
        {
           Text " ( upper(c2.name) = upper('"+col+"'))"
        });
        Text " and (" + TxtListItem (lstWhe, " or "+NL) + ")"
       }
     );
  // query
  Set info = If(txtWhe == "", Empty,
  {
    Text strSql =
"
select cast(o.name   as varchar(8000)) as Table_,
       cast(oo.name  as varchar(8000)) as Index_,
       cast(c.name   as varchar(8000)) as Column_,
       cast(o2.name  as varchar(8000)) as ForeignTable_,
       cast(i2.name  as varchar(8000)) as ForeignIndex_,
       cast(c2.name  as varchar(8000)) as ForeignColumn_         
from sysobjects o,  sysobjects oo,  sysforeignkeys fk,  syscolumns c, 
     sysobjects o2, sysobjects oo2, sysforeignkeys fk2, syscolumns c2,
     sysindexes i2 
where o.id           = fk.fkeyid
  and oo.id          = fk.constid
  and fk.fkeyid      = c.id
  and fk.fkey        = c.colid
  and o2.id          = fk2.rkeyid
  and oo2.id         = fk2.constid
  and fk2.rkeyid     = c2.id
  and fk2.rkey       = c2.colid
  and fk.constid     = fk2.constid
  and fk.keyno       = fk2.keyno
  and i2.indid       = 1          -- primary keyd
  and o2.id          = i2.id
  and ("+ txtWhe +")
order by o.name, fk.keyno
";
    //Text WriteLn(strSql);
    Set info = SqlDBTable(strSql, "StSqlInfoForeing");
    info
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Información de las tablas que dependen de una tabla dada. La función
recibe un Text y un Set.
Parámetros:
  tabla    -> Text: Nombre de una tabla la Base de Datos
  columns  -> Set : Conjunto de columnas de las cuales se quiere saber
              qué claves externas están relacionadas a ella
  gestor   -> SGBD activo 
Devuelve un Set de estructuras StSqlInfoForeing 
  (Text Table, Text Index, Text Column, Text ForeignTable,
   Text ForeignIndex, Text ForeignColumn)
",
SqlMicGetDependantTables);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Set SqlMicInfoDependentAll(Anything tabla)
//////////////////////////////////////////////////////////////////////////////
{
  // query
  Set sGetTabDep = SqlMicInfoDependent(tabla);

  Set info = If(IsEmpty(sGetTabDep), Empty,
  {
    Text gramTabla = Grammar(tabla);
    Set cnj  = Case(
      gramTabla == "Text", SetOfText(tabla),
      gramTabla == "Set", tabla,
      Empty,
      {
        WriteLn("ERROR: SqlMicInfoDependentAll\n"+
                "Gramatica '"+ gramTabla +"' desconocida!");
        Empty
    });
//    Set sGetTabDepTra = Traspose(sGetTabDep);
//    Set infPk = Traspose(SetOfSet(sGetTabDepTra[1] , sGetTabDepTra[3]));
    sGetTabDep << SqlMicInfoDependentAll(sGetTabDep)
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("
Información de todas las tablas que dependen de una tabla dada en 
Microsoft SQL Server. La función puede recibir un Text o un Set.
Parámetros:
  tabla -> Text: Nombre de una tabla la Base de Datos
           Set : Conjunto con la estructura 'StSqlInfoForeing'
",
SqlMicInfoDependentAll);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text SqlMicForeignEnable(Text tabla, Text restriccion)
//////////////////////////////////////////////////////////////////////////////
{
  Text "alter table "+ tabla +" check constraint "+ restriccion
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Sentencia para habilitar una clave ajena dada para Microsoft SQL Server.
Valida los cambios realizados.
Parámetros:
  tabla       -> Nombre de la tabla
  restriccion -> Nombre de la resticcion
Devuelve: El texto a ejecutar",
SqlMicForeignEnable);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text SqlMicForeignDisable(Text tabla, Text restriccion)
//////////////////////////////////////////////////////////////////////////////
{
  Text "alter table "+ tabla +" nocheck constraint "+ restriccion
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Sentencia para deshabilitar una clave ajena dada para Microsoft SQL Server.
Valida los cambios realizados.
Parámetros:
  tabla       -> Nombre de la tabla
  restriccion -> Nombre de la resticcion
Devuelve: El texto a ejecutar",
SqlMicForeignDisable);
//////////////////////////////////////////////////////////////////////////////
