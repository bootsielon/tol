/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : server.tol
// PURPOSE: TolPackage server side tools
//////////////////////////////////////////////////////////////////////////////

/*
Reglas de construcción de paquetes y repositorios:

 * No puede haber paquetes con el mismo nombre de NameBlock ni el mismo ni en 
distinto repositorio.
 * No está permitido el requerimiento cíclico directo ni indirecto entre 
paquetes, es decir, si A requiere a B directa o indirectamente B no puede 
requerir a A ni directa ni indirectamente.

*/

//////////////////////////////////////////////////////////////////////////////
Text ScapeField(Text field)
//////////////////////////////////////////////////////////////////////////////
{
  ReplaceTable(field,[[
    [["\n","[[BR]]"]],
    [[";",","]] ]])
};

//////////////////////////////////////////////////////////////////////////////
Real ResetPackageInfo(Text file, NameBlock pkg)
//////////////////////////////////////////////////////////////////////////////
{
  Text info = 
  "repository;"+
  "name;"+
  "name.version;"+
  "version.high;"+
  "version.low;"+
  "description;"+
  "keys;"+
  "authors;"+
  "minTolVersion;"+
  "releaseDate;"+
  "dependencies;\n";
  Text WriteFile(file, info);
  True
};

//////////////////////////////////////////////////////////////////////////////
  Set GetNameVersion(Text packageName, Real specificVersion)
//////////////////////////////////////////////////////////////////////////////
{
  NameBlock p = Eval(packageName);
  Text name.version = If(!specificVersion,packageName,
    packageName+"."<<p::_.autodoc.version.high+"."<<p::_.autodoc.version.low)
};

//////////////////////////////////////////////////////////////////////////////
  Set GetDeepDependencies(Text packageName, Real specificVersion)
//////////////////////////////////////////////////////////////////////////////
{
  NameBlock p = Eval(packageName);
  Text name.version = GetNameVersion(p);
  If(!Card(p::_.autodoc.dependencies), Copy(Empty),
  {
    Unique(SetConcat(EvalSet(p::_.autodoc.dependencies,GetDeepDependencies))<<
           name.version)
  }) 
};

//////////////////////////////////////////////////////////////////////////////
Real AddPackageInfo.Version(
  Text statusFile, 
  NameBlock pkg, 
  Real specificVersion)
//////////////////////////////////////////////////////////////////////////////
{
  Text name = Name(pkg);
  Text name.version = GetNameVersion(pkg);
  Set dependencies = GetDeepDependencies(name);
  Text info =
    pkg:: _.autodoc.url + ";"
  <<name + ";"
  <<name.version+ ";"
  <<If(!specificVersion,?,pkg::_.autodoc.version.high) + ";"
  <<If(!specificVersion,?,pkg::_.autodoc.version.low) + ";"
  <<pkg::ScapeField(_.autodoc.description) + ";"
  <<pkg::ScapeField(_.autodoc.keys) + ";"
  <<pkg::ScapeField(_.autodoc.authors) + ";"
  <<pkg::_.autodoc.minTolVersion + ";"
  <<Now + ";"
  <<dependencies+ "\n";
  Text AppendFile(statusFile, info);
  True
};

//////////////////////////////////////////////////////////////////////////////
Real AddPackageInfo(Text statusFile, NameBlock pkg)
//////////////////////////////////////////////////////////////////////////////
{
  Real AddPackageInfo.Version(statusFile,pkg,True);
  Real AddPackageInfo.Version(statusFile,pkg,False)
};

