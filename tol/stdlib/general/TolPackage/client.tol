/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : client.tol
// PURPOSE: TolPackage client tools
//////////////////////////////////////////////////////////////////////////////

NameBlock Client = [[

Text _.localRoot = 
  Replace(TolAppDataPath+"TolPackage/Client/","\\","/");

#Embed "repository.tol";
#Embed "autoLoadSave.tol";


//////////////////////////////////////////////////////////////////////////////
//Inicializa el sistema de almacenamiento persistente de la lista de 
//repositorios 
NameBlock Initialize(Real void)
//////////////////////////////////////////////////////////////////////////////
{
  Real OSDirMake(_.localRoot);
  TolPackage::Client::@AutoLoadSave _autoLoadSave = 
    TolPackage::Client::@AutoLoadSave::Create(0);
  _autoLoadSave
};


//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.LocalPack = 
"Devuelve el path completo del fichero local correspondiente a un paquete "
"comprimido.";
Text LocalPack(Text package.version)
//////////////////////////////////////////////////////////////////////////////
{
  TolPackage::Client::_.localRoot+package.version+"/"+package.version+".zip"
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.LocalOza = 
"Devuelve el path completo del fichero local OIS correspondiente a un "
"paquete.";
Text LocalOza(Text package.version)
//////////////////////////////////////////////////////////////////////////////
{
  TolPackage::Client::_.localRoot+package.version+"/"+package.version+".oza"
};


//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.LocalResourcePath = 
"Devuelve el path completo del directorio local de un recurso ajeno a TOL "
"necesario para el paquete especificado.";
Text LocalResourcePath(Text package.version, Text resource)
//////////////////////////////////////////////////////////////////////////////
{
  TolPackage::Client::_.localRoot+package.version+"/"+resource
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Exist = 
"Devuelve cierto si existe el paquete especificado";
Real Exist(Text package.version)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository r = @Repository::Get(repository, True);
  r::Exist(package.version)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.InstallFromUrl = 
"Instala desde una URL arbitraria un paquete determinado para que esté "
"disponible llamando a #Require. \n"
"La URL puede ser en realidad un directorio local para "
"facilitar proceso de instalación cerrada. Para ello la URL comenzará por "
"file:// seguido del path local donde se ubica el repositorio.\n"
"Si la URL empieza por http:// https:// ftp:// o cualquier otro protocolo"
"reconocible por el sistema operativo se realizará la correspondiente "
"descarga remota. \n";
//////////////////////////////////////////////////////////////////////////////
Real InstallFromUrl(Text url)
//////////////////////////////////////////////////////////////////////////////
{
  WriteLn("TRACE [InstallFromUrl] url="<<url);
  Text path = RemoveLastSlash(GetFilePath(url));
  WriteLn("TRACE [InstallFromUrl] path="<<path);
  Text package = GetFilePrefix(url);
  WriteLn("TRACE [InstallFromUrl] package="<<package);
  @Repository::DownloadPackageFromUrl(path,package)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Install = 
"Instala desde el repositorio remoto al local un paquete determinado "
"para que esté disponible llamando a #Require. \n"
"Un repositorio remoto puede ser en realidad un directorio local para "
"facilitar proceso de instalación cerrada. Para ello la URL comenzará por "
"file:// seguido del path local donde se ubica el repositorio.\n"
"Si la URL empieza por http:// https:// ftp:// o cualquier otro protocolo"
"reconocible por el sistema operativo se realizará la correspondiente "
"descarga remota. \n"
"En un mismo repositorio local puede haber distintas veriones de un mismo "
"paquete que se distinguirán unas de otras por el texto posterior al "
"primer punto. Antes del punto el nombre del paquete ha de seguir la "
"nomenclatura tipo WIKI AaaBbb \n"
"Si no se especifica ninguna versión se instalará la última disponible "
"con una copia que especifique el nombre con versión y otra sin versión, "
"sólo con el nombre del paquete, de forma que el #Require funcione igual "
"tanto si se especifica la última versión como si no se especifica "
"ninguna. \n"
"Si ya existía una copia en el repositorio local será substituida sin "
"mayores contemplaciones por lo que el usuario debe saber lo que pide. \n"
"Sólo es necesario instalar una vez un paquete y todas las sesiones TOL "
"que se lancen desde ese momento podrán usarlos.";
//////////////////////////////////////////////////////////////////////////////
Real Install(Text repository, Text package.version, Real showError)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository r = @Repository::Get(repository, True);
  r::Install(package.version,showError)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Install.All = 
"Instala la última versión de todos los paquetes disponibles en un "
"repositorio remoto.";
Real Install.All(Text repository)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository r = @Repository::Get(repository, True);
  r::Install.All(0)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Install.AllInAll = 
"Instala todos los paquetes disponibles en todos los repositorios remotos "
"consultados.";
Real Install.AllInAll(Real void)
//////////////////////////////////////////////////////////////////////////////
{
//WriteLn("TRACE Client::Install.AllInAll");
  @Repository::Install.AllInAll(void)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Find = 
"Busca un paquete entre todos los repositorios consultables y, si lo "
"encuentra, devuelve el registro de información con estructura @PackageInfo, "
"y si no, el conjunto vacío.";
Set Find(Text repository)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository::Find(repository)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.FindAndInstall = 
"Busca un paquete entre todos los repositorios consultables y si lo "
"encuentra lo instala.";
Real FindAndInstall(Text repository, Real showError)
//////////////////////////////////////////////////////////////////////////////
{
//WriteLn("TRACE Client::FindAndInstall(\""+repository+"\","<<showError+")");
  @Repository::FindAndInstall(repository, showError)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.ReleaseDate = 
"Devuelve la fecha de la última actualización de un paquete en un "
"repositorio";
Date ReleaseDate(Text repository, Text package)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository r = @Repository::Get(repository, True);
  r::ReleaseDate(package)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Upgrade = 
"Actualiza automáticamente un paquete si ha caducado caduca la copia local "
"llamando a Install.";
Real Upgrade(Text repository, Text package.version, Real caducityInMinutes)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository r = @Repository::Get(repository, True);
  r::Upgrade(package, caducityInMinutes)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Upgrade.All = 
"Actualiza automáticamente todos los paquetes disponibles en un repositorio "
"remoto para los que la copia local haya caducado.";
Real Upgrade.All(Text repository, Real caducityInMinutes)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository r = @Repository::Get(repository, True);
  r::Upgrade.All(caducityInMinutes)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Upgrade.AllInAll = 
"Actualiza automáticamente todos los paquetes disponibles en todos los "
"repositorios remotos consultados para los que la copia local haya caducado.";
Real Upgrade.AllInAll(Real caducityInMinutes)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository::Upgrade.AllInAll(caducityInMinutes)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Clean = "Elimina un paquete concreto.";
Real Clean(Text repository, Text package.version)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository r = @Repository::Get(repository, True);
  r::Clean(package)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Clean.All = 
"Elimina todos los paquetes disponibles localmente procedentes del "
"repositorio.";
Real Clean.All(Text repository)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository r = @Repository::Get(repository, True);
  r::Clean.All(0)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Clean.AllInAll = 
"Elimina todos los paquetes disponibles localmente.";
Real Clean.AllInAll(Real void)
//////////////////////////////////////////////////////////////////////////////
{
  @Repository::Clean.AllInAll(void)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.GetRequirements= 
"Crea un texto con los #Require para una lista de paquetes";
Text GetRequirements(Set packages)
//////////////////////////////////////////////////////////////////////////////
{
  SetSum(EvalSet(packages,Text(Text required)
  {
    "#Require "+required+";\n"
  }))
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.DoRequirements= 
"Llama a #Require para una lista de paquetes";
Real DoRequirements(Set packages)
//////////////////////////////////////////////////////////////////////////////
{
  Set EvalSet(packages,Real(Text required)
  {
    Set IncludeText("#Require "+required+";\nReal True;");
    True
  });
  True
}

]];


