/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : builder.tol
// PURPOSE: Class TolPackage::Client::@Builder
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
//Construye en el disco local el directorio de un repositorio de paquetes
Class @Builder {
//////////////////////////////////////////////////////////////////////////////

Text _.url;          //A unique address with remote or local protocol
Text _.name;         //A unique name 
Text _.type;         //Private, Public
Text _.description;  //Purpose of repository
Text _.sourceRoot;   //Root directory of package's TOL code 
Set _.packages;      //Set of names of packages
Text _.root;         //Local server-side installing directory

//////////////////////////////////////////////////////////////////////////////
Static @Builder Create(
  Text url,          
  Text name,         
  Text type,         
  Text description,  
  Text sourceRoot,
  Set packages)
//////////////////////////////////////////////////////////////////////////////
{
  Text root = TolPackage::Server::_.localRoot+name+"/";
  Real OSDirMake(root+"register/");
  @Builder new = [[
    Text _.url = url;
    Text _.name = name;
    Text _.type = type;
    Text _.description = description;
    Text _.sourceRoot = sourceRoot;
    Set _.packages = packages;
    Text _.root = root 
  ]];
  Real new::Build(void);
  new
};

//////////////////////////////////////////////////////////////////////////////
Real Initialize(Real void)  
//////////////////////////////////////////////////////////////////////////////
{
  Text index.csv = 
  "repository;"+
  "name;"+
  "name.version;"+
  "version.high;"+
  "version.low;"+
  "brief;"+
  "keys;"+
  "authors;"+
  "minTolVersion;"+
  "releaseDate;"+
  "dependencies;\n";

  Text index.tol =
  "//////////////////////////////////////////////////////////////////////////////\n"
  "//FILE : index.tol                                                            \n"
  "//PURPOSE : internal use of Class TolPackage::Client::@Repository             \n"
  "//                                                                            \n"
  "//       PLEASE, DON´T TOUCH THIS FILE NOR OTHER ONE IN THIS DIRECTORY!       \n"
  "//                                                                            \n"
  "//////////////////////////////////////////////////////////////////////////////\n"
  "  Text name = \""+_.name+"\";\n"+
  "  Text type = \""+_.type+"\";\n"+
  "  Text description = \""+_.description+"\";\n"+
  "\n";
    
  Text WriteFile(_.root+"index.csv",  index.csv);
  Text WriteFile(_.root+"index.tol",  index.tol);
//Text WriteFile(_.root+"index.wiki", index.wiki);
//Text WriteFile(_.root+"index.html", index.html);
  True
};

//////////////////////////////////////////////////////////////////////////////
Text Escape(Text field)
//////////////////////////////////////////////////////////////////////////////
{
  ReplaceTable(field,[[
    [["\n","[[BR]]"]],
    [[";",","]] ]])
};

//////////////////////////////////////////////////////////////////////////////
Text Build.PackageInfo.Version(Text name, Real specificVersion)
//////////////////////////////////////////////////////////////////////////////
{
  Set aux = IncludeText("NameBlock "+packageName+";");
  NameBlock pkg = aux[1];
  Text name.version = GetCurrentNameVersion(name,specificVersion);
  Set dependencies = GetDeepDependencies(name);
  Text index.csv =
    pkg:: _.autodoc.url + ";"
  <<name + ";"
  <<name.version+ ";"
  <<If(!specificVersion,?,pkg::_.autodoc.version.high) + ";"
  <<If(!specificVersion,?,pkg::_.autodoc.version.low) + ";"
  <<pkg::Escape(_.autodoc.brief) + ";"
  <<pkg::Escape(_.autodoc.keys) + ";"
  <<pkg::Escape(_.autodoc.authors) + ";"
  <<pkg::_.autodoc.minTolVersion + ";"
  <<Now + ";"
  <<dependencies+ "\n";
  Text WriteFile(_.root+"register/"+name,  index.csv);
  Real Ois.Store(aux,_.root+name.version+".oza");
  index.csv
};

//////////////////////////////////////////////////////////////////////////////
Text Build.PackageInfo(Text name)
//////////////////////////////////////////////////////////////////////////////
{
  Text Build.PackageInfo.Version(name,True);
  Text Build.PackageInfo.Version(name,False);
  True
};

//////////////////////////////////////////////////////////////////////////////
Real Build.All(Real void)
//////////////////////////////////////////////////////////////////////////////
{
  Real new::Initialize(void);
  Set IncludeText(SetConcat(EvalSet(_.packages, Text(Text pkgName)
  {
    "Set Include(\""+_.sourceRoot+pkgName+"/"+pkgName+".tol\");"
  })));
  Set EvalSet(_.packages, Real(Text pkgName)
  {
    Text AppendFile(_.root+"index.csv",  Build.PackageInfo(pkgName));
  //Text AppendFile(_.root+"index.wiki", index.wiki);
  //Text AppendFile(_.root+"index.html", index.html);
    True
  });
  True
};

//////////////////////////////////////////////////////////////////////////////
Real Rebuild.One(Text pkgName)
//////////////////////////////////////////////////////////////////////////////
{
  Real new::Initialize(void);
  Set IncludeText(
    "Set Include(\""+_.sourceRoot+pkgName+"/"+pkgName+".tol\");"
  );
  Text Build.PackageInfo(pkgName);
  Set pkgLst = Sort(GetDir(_.root+"register/")[2], Real(Text a, Text b)
  {
    Compare(b,a)
  });
  Set EvalSet(pkgLst, Real(Text pkgName)
  {
    Text AppendFile(_.root+"index.csv",ReadFile(_.root+"register/"+pkgName));
    True 
  });
  True
}

};
