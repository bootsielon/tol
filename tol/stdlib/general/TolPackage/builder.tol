/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : builder.tol
// PURPOSE: Class TolPackage::Client::@Builder
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Class @Builder {
//////////////////////////////////////////////////////////////////////////////

Text _.url;          //A unique address with remote or local protocol
Text _.name;         //A unique name 
Text _.type;         //Private, Public
Text _.description;  //Purpose of repository
Text _.root;         //Local server-side installing directory

//////////////////////////////////////////////////////////////////////////////
Static @Builder Create(
  Text url,          //A unique address with remote or local protocol
  Text name,         //A unique name 
  Text type,         //Private, Public
  Text description)  //Purpose of repository
//////////////////////////////////////////////////////////////////////////////
{
  @Builder new = [[
    Text _.url = url;
    Text _.name = name;
    Text _.type = type;
    Text _.description = description;
    Text _.root = TolPackage::Server::_.localRoot+name+"/" ]];
  Real new::Initialize(void)
};

//////////////////////////////////////////////////////////////////////////////
Real Initialize(Real void)  
//////////////////////////////////////////////////////////////////////////////
{
  Text index.csv = 
  "repository;"+
  "name;"+
  "name.version;"+
  "version.high;"+
  "version.low;"+
  "brief;"+
  "keys;"+
  "authors;"+
  "minTolVersion;"+
  "releaseDate;"+
  "dependencies;\n";

  Text index.tol =
  "//////////////////////////////////////////////////////////////////////////////\n"
  "//FILE : index.tol                                                            \n"
  "//PURPOSE : internal use of Class TolPackage::Client::@Repository             \n"
  "//                                                                            \n"
  "//       PLEASE, DON'T TOUCH THIS FILE NOR OTHER ONE IN THIS DIRECTORY!       \n"
  "//                                                                            \n"
  "//////////////////////////////////////////////////////////////////////////////\n"
  "  Text name = \""+_.name+"\";\n"+
  "  Text type = \""+_.type+"\";\n"+
  "  Text description = \""+_.description+"\";\n"+
  "\n";
    
  Text WriteFile(_.root+"index.csv",  index.csv);
  Text WriteFile(_.root+"index.tol",  index.tol);
//Text WriteFile(_.root+"index.wiki", index.wiki);
//Text WriteFile(_.root+"index.html", index.html);
  True
};

//////////////////////////////////////////////////////////////////////////////
Text Escape(Text field)
//////////////////////////////////////////////////////////////////////////////
{
  ReplaceTable(field,[[
    [["\n","[[BR]]"]],
    [[";",","]] ]])
};

//////////////////////////////////////////////////////////////////////////////
Real AddPackageInfo.Version(NameBlock pkg, Real specificVersion)
//////////////////////////////////////////////////////////////////////////////
{
  Text name = Name(pkg);
  Text name.version = GetNameVersion(pkg);
  Set dependencies = GetDeepDependencies(name);
  Text index.csv =
    pkg:: _.autodoc.url + ";"
  <<name + ";"
  <<name.version+ ";"
  <<If(!specificVersion,?,pkg::_.autodoc.version.high) + ";"
  <<If(!specificVersion,?,pkg::_.autodoc.version.low) + ";"
  <<pkg::Escape(_.autodoc.brief) + ";"
  <<pkg::Escape(_.autodoc.keys) + ";"
  <<pkg::Escape(_.autodoc.authors) + ";"
  <<pkg::_.autodoc.minTolVersion + ";"
  <<Now + ";"
  <<dependencies+ "\n";
  Text AppendFile(_.root+"index.csv",  index.csv);
  //Text AppendFile(root+"index.wiki", index.wiki);
  //Text AppendFile(root+"index.html", index.html);
  True
};

//////////////////////////////////////////////////////////////////////////////
Real AddPackage(NameBlock pkg)
//////////////////////////////////////////////////////////////////////////////
{
  Real AddPackageInfo.Version(pkg,True);
  Real AddPackageInfo.Version(pkg,False)
}

};
