//////////////////////////////////////////////////////////////////////////////
// FILE   : algMetSqlDepDBT.tol
// PURPOSE: Metodo SQL.03 de obtención de un conjunto de datos a partir de la 
//          definición del álgebra. Se basa en extracción de datos desde una 
//          BBDD con DBTable mediante la construcción de una query de la forma:
// 
//               select <exp_select>
//               from <exp_from>
//               [where]  <exp_where> 
//               [group by] <exp_group> 
//               [having] <exp_having> 
//               [order by] <exp_order>
// 
//           Cada una de las expresiones <exp_*> son generadas en función de
//          los valores que toman ciertas dimensiones y subdimensiones, que 
//          se especifican en un conjunto *Dep y también se especifica la 
//          función que forma la expresión *Fun.
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// STRUCTURES and Pseudo-structures
//////////////////////////////////////////////////////////////////////////////


Struct @AlgMetSqlDepDBTExtSt
{
  Code SelFun, // Función que construye exp_select
  Code FroFun, // Función que construye exp_from
  Code WheFun, // Función que construye exp_where
  Code GroFun, // Función que construye exp_group
  Code HavFun, // Función que construye exp_having
  Code OrdFun, // Función que construye exp_order
  Code SetParFun // Función que devuelve un conjunto de parametros con
                 // estructura @TclArgSt, para por ejemplo:
                 // -traQry: Para trazar o no la query
                 // -traTms: Para trazar el tiempo que tarda la query
                 // -struct: Para darle un struct al metodo
};


Set defParamsForMetSqlDBT = SetOfSet(
    @TclArgSt("-traQry", "1"),
    @TclArgSt("-traTms", "1"),
    @TclArgSt("-struct", "")
);

//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
Text MetSqlDepGetDBTQuery (
  Set  algSetNode,  // 
  Set  metSqlDep,    // Conjunto con estructura AlgMetSqlDepDBTSt
  Text setName)
//////////////////////////////////////////////////////////////////////////////
{

  Code selFun = metSqlDep->SelFun;
  Text selExp = selFun(algSetNode);
  Code froFun = metSqlDep->FroFun;
  Text froExp = froFun(algSetNode);
  Code wheFun = metSqlDep->WheFun;
  Text wheExp = wheFun(algSetNode);
  Code groFun = metSqlDep->GroFun;
  Text groExp = groFun(algSetNode);
  Code havFun = metSqlDep->HavFun;
  Text havExp = havFun(algSetNode);
  Code ordFun = metSqlDep->OrdFun;
  Text ordExp = ordFun(algSetNode);


  Code parFun = metSqlDep->SetParFun;
  Set  parVal = parFun(algSetNode);

  Set params = TclMixArg(defParamsForMetSqlDBT, parVal);


  Text query =
    "select "+ selExp  +NL+
    "from "  + froExp  +NL+
    If(wheExp!="","where "   +wheExp+NL,wheExp)+
    If(groExp!="","group by "+groExp+NL,groExp)+
    If(havExp!="","having "  +havExp+NL,havExp)+
    If(ordExp!="","order by "+ordExp+NL,ordExp);

  query
};


//////////////////////////////////////////////////////////////////////////////
Set MetSqlDepGetDBT (
  Set  algSetNode,  // 
  Set  metSqlDep,    // Conjunto con estructura AlgMetSqlDepExtSt
  Text serName)
//////////////////////////////////////////////////////////////////////////////
{
  Code parFun = metSqlDep->SetParFun;
  Set  parVal = parFun(algSetNode);

  Set params = TclMixArg(defParamsForMetSqlDBT, parVal);
  Real traQry = Eval(TclGAV("-traQry", params));
  Real traTms = Eval(TclGAV("-traTms", params));

  Text query = MetSqlDepGetDBTQuery(algSetNode,metSqlDep,serName);
  Text If(traQry, WriteLn(TextIndent(query,6)), "");

  Set res = DBTable(query);
  res
};

