//////////////////////////////////////////////////////////////////////////////
// FILE   : algMetSqlDepSet.tol
// PURPOSE: Metodo SQL.02 de obtención de un conjunto de series a partir de la
//          definición del álgebra. Se basa en extracción de datos desde una
//          BBDD con DBSeriesColumn mediante la construcción de una query de
//          la forma:
// 
//               select <exp_name>  as idName,
//                      <exp_date>  as idDateValue,
//                      <exp_value> as value
//               from <exp_from>
//               [where] { <exp_where> }
//               group by <exp_name>,
//                        <exp_date>
//               order by idName, idDateValue
// 
//           Cada una de las expresiones <exp_*> son generadas en función de
//          los valores que toman ciertas dimensiones y subdimensiones, que 
//          se especifican en un conjunto *Dep y también se especifica la 
//          función que forma la expresión *Fun.
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// STRUCTURES and Pseudo-structures
//////////////////////////////////////////////////////////////////////////////

Struct @AlgMetSqlDepSetExtSt
{
  Code NamFun, // Función que construye exp_name
  Code DatFun, // Función que construye exp_date
  Code ValFun, // Función que construye exp_value
  Code FroFun, // Función que construye exp_from
  Code WheFun, // Función que construye exp_where
  Code FecFun, // Función que devuelve el fechado de las series
  Code SetParFun // Función que devuelve un conjunto de parametros con
                 // estructura @TclArgSt, para por ejemplo:
                 // -defVal: determinar el valor por defecto de DBSeries
                 // -traQry: Para trazar o no la query
                 // -traTms: Para trazar el tiempo que tarda la query
};

Set AlgMetSqlDepSetSt(
  Code NamFun, // Función que construye exp_name
  Code DatFun, // Función que construye exp_date
  Code ValFun, // Función que construye exp_value
  Code FroFun, // Función que construye exp_from
  Code WheFun, // Función que construye exp_where
  Code FecFun)
{
  Set @AlgMetSqlDepSetExtSt(NamFun, DatFun, ValFun, FroFun, WheFun, FecFun, FunEmpty)
};

Set defParamsForMetSqlDepSet = SetOfSet(
    @TclArgSt("-defVal", "0"),
    @TclArgSt("-traQry", "1"),
    @TclArgSt("-traTms", "1")
);

//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Set MetSqlDepGetSet (
  Set  algSetNode,  // 
  Set  metSqlDep,    // Conjunto con estructura AlgMetSqlDepSetExtSt
  Text setName
)
//////////////////////////////////////////////////////////////////////////////
{
  Code namFun = metSqlDep->NamFun;
  Text namExp = namFun(algSetNode);
  Code datFun = metSqlDep->DatFun;
  Text datExp = datFun(algSetNode);
  Code valFun = metSqlDep->ValFun;
  Text valExp = valFun(algSetNode);
  Code froFun = metSqlDep->FroFun;
  Text froExp = froFun(algSetNode);
  Code wheFun = metSqlDep->WheFun;
  Text wheExp = wheFun(algSetNode);
  Code fecFun = metSqlDep->FecFun;
  Text fechado = fecFun(algSetNode);
  Code parFun = metSqlDep->SetParFun;
  Set  parVal = parFun(algSetNode);

  Set params = TclMixArg(defParamsForMetSqlDepSet, parVal);
  Real defVal = Eval(TclGAV("-defVal", params));
  Real traQry = Eval(TclGAV("-traQry", params));
  Real traTms = Eval(TclGAV("-traTms", params));

  Text query =
    "select "+namExp+" as idName,"+NL+
    "       "+datExp+" as idDateValue,"   +NL+
    "       "+valExp+" as val"          +NL+
    "from "+ froExp                       +NL+
    If(wheExp!="","where "+wheExp,wheExp) +NL+
    "group by "+namExp+", "               +NL+
    "         "+datExp                    +NL+
    "order by idName, idDateValue";
  Text If(traQry, WriteLn(TextIndent(query,6)), "");

  Set res = DBSeriesColumn(query,Eval("TimeSet "+fechado+";"), defVal);

  Real If(IsEmpty(res), 
    Real Msg("MetSqlDepGetSet", "No hay set"),0);
  Set res
};

