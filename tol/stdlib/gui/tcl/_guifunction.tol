//////////////////////////////////////////////////////////////////////////////
// FILE   : guifunction.tol
// PURPOSE: Este archivo especifica la estructura que debe tener el conjunto
//          de funciones definidas por el usuario TOL para las que se ofrece
//          interface gráfico en tolbase.
//           (Versión en desarrollo)
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// STRUCTURES
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Struct GuiFunctionSt 
// 
// PURPOSE: Estrucutura para la definicion de funciones de usuario que se
//          integran en el interface gráfico de tolbase.(menu contextual en
//          el inspector de objetos).
// 
//////////////////////////////////////////////////////////////////////////////
{
  Text  nameFun,    // Nombre de la función
  Text  nameGui,    // Nombre de la función en el interface gráfico
  Text  typeGui,    // Tipo de menu: Ite (Iteracion) , Set(SetOfGrammar)
  Text  typeOut,    // Tipo de salida
                    //   Ej. Real, Text, Serie, Set...
  Set   parameters  // Conjunto de parámetros de la funcion con estructura
                    // GuiParameters
};
  
//////////////////////////////////////////////////////////////////////////////
Struct GuiParamSt 
// 
// PURPOSE: Estrucutura para la definicion de argumentos de las funciones de
//          usuario que se integran en el interface gráfico de tolbase.
// 
//////////////////////////////////////////////////////////////////////////////
{
  Text nameGui,  // Nombre de parametro en el interface gráfico
  Text typePar,  // Tipo de parámetro 
                 //   Ej. Real, Text, Serie, SQL, File, Code
  Real typeSel,  // Tipo de seleccion
                 //  0. Todos los valores de este tipo
                 //  (válido para gramaticas TOL, etc...
                 //  1. Lista de valores limitada
                 //  2. El usuario teclea un valor
  Set listVal    // Lista de valores (si typeSel vale 1)

};
  
//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Serie GuiDifAbs(Set s, Text item)
//////////////////////////////////////////////////////////////////////////////
{
  Real cs = Card(s);
  If(NE(cs, 2), UnknownSerie, 
  {
    Text gr1 = Grammar(s[1]);
    Text gr2 = Grammar(s[2]);
    If(And(gr1 == gr2, gr1 == "Serie"),
    {
      Serie s1 = s[1];
      Serie s2 = s[2];
      Text name1 = Name(s[1]);
      Text name2 = Name(s[2]);
      Serie dif  = s1-s2;
      Anything If(item == "+", 
        MakeAnyGlobal(Serie dif ,name1+"_minus_"+name2), 
        MakeAnyGlobal(Serie -dif,name2+"_minus_"+name1)
      )
    })
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Calcula la diferencia absoluta de dos series si el item es 
+ en otro caso la menos diferencia absoluta.",
GuiDifAbs);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Serie GuiDifPer(Set s, Text item)
//////////////////////////////////////////////////////////////////////////////
{
  Real cs = Card(s);
  If(NE(cs, 2), UnknownSerie, 
  {
    Text gr1 = Grammar(s[1]);
    Text gr2 = Grammar(s[2]);
    If(And(gr1 == gr2, gr1 == "Serie"),
    {
      Serie s1 = s[1];
      Serie s2 = s[2];
      Text name1 = Name(s[1]);
      Text name2 = Name(s[2]);
      Serie dif  = s1-s2;
      Anything If(item == "+",
        MakeAnyGlobal(Serie dif/s1,name1+"_minusper_"+name2),
        MakeAnyGlobal(Serie -dif/s2,name2+"_minusper_"+name2)
      )
    })
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Calcula la diferencia porcentual de dos series si el item es 
+ en otro caso la diferencia porcentual complementaria.",
GuiDifPer);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Anything MakeAnyGlobal(Anything object, Text name)
//////////////////////////////////////////////////////////////////////////////
{
  Text grammar = Grammar(object);
  Eval(grammar + " a = object;");
  Text uniqueName = GetUniqueName(grammar, name);
  Anything PutName(uniqueName, a); 
  Eval("MakeGlobal("+uniqueName+")")
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Convierte un objeto cualquiera a global. Si ya existe un 
objeto con el nombre propuesto para hacerlo global, se genera otro nombre
que no exista",
MakeAnyGlobal);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Anything EvalArgMatrix(Matrix mat, Code fun)
//////////////////////////////////////////////////////////////////////////////
{
  Anything a = fun(mat);
  PutName(Name(fun)+"."+Name(mat), a)
};

//////////////////////////////////////////////////////////////////////////////
Serie CorDatCh(Serie ser, TimeSet dating, Code statistic)
//////////////////////////////////////////////////////////////////////////////
{
  Date ini = Succ(First(ser),dating,-1);
  Serie newS = SubSer(CalInd(W,Dating(ser)), ini, First(ser)) << ser;
  DatCh(newS,dating,statistic)
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Corrige el DatCh, concatenando ceros a la serie original 
desde el succ -1 del nuevo fechado, antes de aplicar el cambio de fechado.",
CorDatCh);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Serie GuiDatCh(Serie ser, TimeSet dating, Code statistic)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);
  Text nDat = Sub(Name(dating),1,3);
  Text nSta = Sub(Name(statistic),1,3);
  Text name = nSer+"."+nDat+"."+nSta;
  Serie s = CorDatCh(ser,dating,statistic);
  Anything MakeAnyGlobal(s,name)
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Aplica la funcion DatCh a una serie, dados un fechado y un
estadístico, dando nombre a la serie y haciéndola global",
GuiDatCh);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Set GuiSerToBDT(Set setSer, Text dir, Text file)
//////////////////////////////////////////////////////////////////////////////
{
  Real lenDir = TextLength(dir);
  Real lenFil = TextLength(file);
  Text sep = If(Sub(dir,lenDir,lenDir)=="/","","/");
  Text ext = If(ToUpper(Sub(file,lenFil-4,lenFil))==".BDT",
    "",".bdt");
  Set BDTFile(setSer,dir+sep+file+ext)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiDatChMenSum(Serie ser)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);
  Text name = nSer+".Men.Sum";
  Serie s = CorDatCh(ser,Mensual,SumS);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiDatChSemSum(Serie ser)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);
  Text name = nSer+".Sem.Sum";
  Serie s = CorDatCh(ser,Semanal,SumS);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiDatChSemAvr(Serie ser)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);
  Text name = nSer+".Sem.Avr";
  Serie s = CorDatCh(ser,Semanal,AvrS);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiDatChPSMAvr(Serie ser)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);
  Text name = nSer+".PSM.Avr";
  Serie s = CorDatCh(ser,PseudoMensual,AvrS);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiAutoDatingUsu(Serie ser)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);
  Text name = nSer+".AutDat";
  Serie s = AutoDatingUsu(ser);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiIncAnu(Serie ser)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);
  Text name = nSer+".Inc.Anu";
  Serie s = ((1-B^12):ser)*100/((B^12):ser);
  Anything MakeAnyGlobal(s,name)
};


//////////////////////////////////////////////////////////////////////////////
Serie GuiInc(Serie ser, Real mov)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);
  Text name = nSer+".Inc."+IntText(mov);
  Serie s = ((1-B^mov):ser)*100/((B^mov):ser);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiApplyPolyn(Serie ser, Polyn p)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);
  Text nPol = IntText(Degree(p));

  Text name = nSer+"."+nPol;
  Serie s = p:ser;
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiSetSum(Set setSer)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(setSer[1]);

  Text name = nSer+".Sum";
  Serie s = SetSumC(setSer);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiSetProd(Set setSer)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(setSer[1]);

  Text name = nSer+".Prod";
  Serie s = SetProd(setSer);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiLog(Serie ser)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);

  Text name = nSer+".Log";
  Serie s   = Log(ser);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiExp(Serie ser)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);

  Text name = nSer+".Exp";
  Serie s   = Exp(ser);
  Anything MakeAnyGlobal(s,name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiIntegral(Serie ser)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);

  Text name = nSer+".Integrate";
  Serie s = DifEq(1/(1-B),ser,0);
  Anything MakeAnyGlobal(s, name)
};

//////////////////////////////////////////////////////////////////////////////
Serie GuiSubSer(Serie ser, Date ini, Date end)
//////////////////////////////////////////////////////////////////////////////
{
  Text nSer = Name(ser);

  Text name = nSer+".SubSer";
  Serie s = SubSer(ser, ini, end);
  Anything MakeAnyGlobal(s, name)
};


//////////////////////////////////////////////////////////////////////////////
// DEFINITION
//////////////////////////////////////////////////////////////////////////////

Set GuiFunction = SetOfSet
( 
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiSubSer",                      // Nombre Funcion 
    "Sub Serie",                      // Nombre Interface Grafico
    "Ite.Serie",                      // Tipo de menu
    "Serie",                          // Tipo de salida
    SetOfSet(
      GuiParamSt(
        "Fecha Inicial",   // Nombre Interface Grafico
        "Date",   // Tipo de parámetro
        2,           // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        Copy(Empty)  // Lista de valores
      ),
      GuiParamSt(
        "Fecha Final", // Nombre Interface Grafico
        "Date",        // Tipo de parámetro
        2,             // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        Copy(Empty)
      )
    )                      
  ),
  ////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiDatChMenSum",                 // Nombre Funcion 
    "Cambio Fechado Mensual (SumS)",  // Nombre Interface Grafico
    "Ite.Serie",                      // Tipo de menu
    "Serie",                          // Tipo de salida
    Copy(Empty)                       // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiDatChSemSum",                 // Nombre Funcion 
    "Cambio Fechado Semanal (SumS)",  // Nombre Interface Grafico
    "Ite.Serie",                      // Tipo de menu
    "Serie",                          // Tipo de salida
    Copy(Empty)                       // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiDatChSemAvr",                 // Nombre Funcion 
    "Cambio Fechado Semanal (AvrS)",  // Nombre Interface Grafico
    "Ite.Serie",                      // Tipo de menu
    "Serie",                          // Tipo de salida
    Copy(Empty)                       // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiDatChPSMAvr",                 // Nombre Funcion 
    "Cambio Fechado PseudoMensual (AvrS)",  // Nombre Interface Grafico
    "Ite.Serie",                      // Tipo de menu
    "Serie",                          // Tipo de salida
    Copy(Empty)                       // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    Text "GuiDatCh",       // Nombre Funcion 
    "Cambio Fechado",      // Nombre Interface Grafico
    "Ite.Serie",           // Tipo de menu
    "Serie",               // Tipo de salida
    SetOfSet(
      GuiParamSt(
        "Fechado",   // Nombre Interface Grafico
        "TimeSet",   // Tipo de parámetro
        0,           // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        Copy(Empty)  // Lista de valores
      ),
      GuiParamSt(
        "Estadistico", // Nombre Interface Grafico
        "Code",        // Tipo de parámetro
        1,             // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        SetOfText("SumS", "AvrS", "LastS", "FirstS",
                  "MinS", "MaxS", "StDsS", "MedianS")
      )
    )
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiAutoDatingUsu",               // Nombre Funcion 
    "Auto Cambio Fechado",            // Nombre Interface Grafico
    "Ite.Serie",                      // Tipo de menu
    "Serie",                          // Tipo de salida
    Copy(Empty)                       // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiApplyPolyn",      // Nombre Funcion 
    "Aplicar Polinomio",  // Nombre Interface Grafico
    "Ite.Serie",          // Tipo de menu
    "Serie",              // Tipo de salida
    SetOfSet(
      GuiParamSt(
        "Polinomio", // Nombre Interface Grafico
        "Polyn",     // Tipo de parámetro
        2,           // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        Copy(Empty)  // Lista de valores
      )
    )
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiInc",                     // Nombre Funcion 
    "Tasa Incremento Variable ",  // Nombre Interface Grafico
    "Ite.Serie",                  // Tipo de menu
    "Serie",                      // Tipo de salida
    SetOfSet(
      GuiParamSt(
        "Retardo",   // Nombre Interface Grafico
        "Real",      // Tipo de parámetro
        1,           // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        SetOfText("1","3", "4","7","12")        // Lista de valores
      )
    )
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiDifAbs",          // Nombre Funcion 
    "Diferencia absoluta",// Nombre Interface Grafico
    "Set.Serie",          // Tipo de menu
    "Serie",              // Tipo de salida
    SetOfSet(
      GuiParamSt(
        "Signo",     // Nombre Interface Grafico
        "Text",      // Tipo de parámetro
        1,           // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        SetOfText("+","-")        // Lista de valores
      )
    )
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiDifPer",            // Nombre Funcion 
    "Diferencia porcentual",// Nombre Interface Grafico
    "Set.Serie",            // Tipo de menu
    "Serie",                // Tipo de salida
    SetOfSet(
      GuiParamSt(
        "Signo",            // Nombre Interface Grafico
        "Text",             // Tipo de parámetro
        1,                  // Tipo seleccion. 0.AllType, 
                            //  1.ValueList, 2.UserWrite
        SetOfText("+","-")  // Lista de valores
      )
    )
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiIncAnu",                   // Nombre Funcion 
    "Tasa Incremento Interanual",  // Nombre Interface Grafico
    "Ite.Serie",                   // Tipo de menu
    "Serie",                       // Tipo de salida
    Copy(Empty)                    // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt(
    "GuiSetSum",                   // Nombre Funcion 
    "Suma Series",                 // Nombre Interface Grafico
    "Set.Serie",                   // Tipo de menu
    "Serie",                       // Tipo de salida
    Copy(Empty)                    // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiLog",                      // Nombre Funcion 
    "Logaritmo",                   // Nombre Interface Grafico
    "Ite.Serie",                   // Tipo de menu
    "Serie",                       // Tipo de salida
    Copy(Empty)                    // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiExp",                      // Nombre Funcion 
    "Exponencial",                 // Nombre Interface Grafico
    "Ite.Serie",                   // Tipo de menu
    "Serie",                       // Tipo de salida
    Copy(Empty)                    // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt(
    "GuiSetProd",                  // Nombre Funcion 
    "Producto Series",             // Nombre Interface Grafico
    "Set.Serie",                   // Tipo de menu
    "Serie",                       // Tipo de salida
    Copy(Empty)                    // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiIntegral",                 // Nombre Funcion 
    "Integral",                    // Nombre Interface Grafico
    "Ite.Serie",                   // Tipo de menu
    "Serie",                       // Tipo de salida
    Copy(Empty)                    // Parametros
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "GuiSerToBDT",                      // Nombre Funcion 
    "Guardar series",                   // Nombre Interface Grafico
    "Set.Serie",                        // Tipo de menu
    "Set",                              // Tipo de salida
    SetOfSet(
      GuiParamSt(
        "Directorio",   // Nombre Interface Grafico
        "Dir",          // Tipo de parámetro
        2,              // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        Copy(Empty)     // Lista de valores
      ),
      GuiParamSt(
        "Archivo BDT", // Nombre Interface Grafico
        "Text",        // Tipo de parámetro
        2,             // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        Copy(Empty)
      )
    )                      
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "EvalArgMatrix",                                 // Nombre Funcion 
    "EvalArg Matrix", // Nombre Interface Grafico
    "Ite.Matrix",                        // Tipo de menu
    "Anything",                              // Tipo de salida
    SetOfSet(
      GuiParamSt(
        "Code",   // Nombre Interface Grafico
        "Code",          // Tipo de parámetro
        2,              // Tipo seleccion. 0.AllType, 1.ValueList, 2.UserWrite
        Copy(Empty)     // Lista de valores
      )
    )                      
  ),
  ////////////////////////////////////////////////////////////////////////////
  GuiFunctionSt
  (
    "Traspose",                // Nombre Funcion 
    "Trasponer conjunto", // Nombre Interface Grafico
    "Ite.Set",                        // Tipo de menu
    "Set",                              // Tipo de salida
     Copy(Empty)                     
  )
  ////////////////////////////////////////////////////////////////////////////
);

