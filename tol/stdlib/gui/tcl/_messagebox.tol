//////////////////////////////////////////////////////////////////////////////
// FILE   : _messagebox.tol
// PURPOSE: Functions to create a message window that waits for user response
//          Encapsulates tk_messageBox TCL object
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text TclTkMessageBox(Set valArg)
//////////////////////////////////////////////////////////////////////////////
{
  Set defArg = SetOfSet (
    TclArgSt("-tclInterp",  "0")
  );
  Set aplArg = TclMixArg( TclMixArg(SeedArg,defArg), valArg );

  Real mode = If(TclGAV("-tclInterp",aplArg)=="0",   2,    1);
  Code fun  = If(TclGAV("-tclInterp",aplArg)=="0", BBr, BQt2);
  If(TclCheckArg("-message",aplArg),
  {
    Text tclCmd = "tk_messageBox" +
                     TclGAKV("-default",aplArg,0) +
                     TclGAKV("-icon",   aplArg,0) +
       " -message "+ fun(TclGAV ("-message",aplArg)) +
                     TclGAKV("-parent", aplArg,0) +
                     TclGAKV("-type",   aplArg,0) +
                     TclGAKV("-title",  aplArg,mode);
    Text TclTrace(tclCmd);
    Text answer = TclEvalT(tclCmd);
    answer
  },
  {
    Text TclError(MsgReqArg+":"+NL+" -message");
    "ERROR"
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Creates and displays a message window with an application-specified message,
an icon and a set of buttons. Each of the buttons in the message window is
identified by a unique symbolic name (see the -type options). After the
message window is popped up, tk_messageBox waits for the user to select one
of the buttons. Then it returns the symbolic name of the selected button.
The following option-value pairs are supported: 
-default name
 Name gives the symbolic name of the default button for this message window
('ok', 'cancel', and so on). See -type for a list of the symbolic names.
If this option is not specified, the first button in the dialog will be made
the default. 
-icon iconImage
 Specifies an icon to display. IconImage must be one of the following: error,
info, question or warning. If this option is not specified, then the info
icon will be displayed. 
-message string
 Specifies the message to display in this message box. 
-parent window
 Makes window the logical parent of the message box. The message box is 
displayed on top of its parent window. 
-title titleString
 Specifies a string to display as the title of the message box. The default
value is an empty string. 
-type predefinedType
 Arranges for a predefined set of buttons to be displayed. The following
values are possible for predefinedType: 
 * abortretryignore: Displays three buttons whose symbolic names are abort,
 retry and ignore. 
 * ok: Displays one button whose symbolic name is ok. 
 * okcancel: Displays two buttons whose symbolic names are ok and cancel. 
 * retrycancel: Displays two buttons whose symbolic names are retry and cancel. 
 * yesno: Displays two buttons whose symbolic names are yes and no. 
 * yesnocancel: Displays three buttons whose symbolic names are yes, no and
 cancel. 
Option -tclInterp (0 as default) indicates if -message and -title arguments
must be interpreted by tcl or not
See more help on http://www.tcl.tk/man/tcl8.4/TkCmd/messageBox.htm
",
TclTkMessageBox);
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
Text TclTkChooseDirectory(Set valArg)
//////////////////////////////////////////////////////////////////////////////
{
  Set defArg = SetOfSet (
    TclArgSt("-tclInterp",  "0")
  );
  Set aplArg = TclMixArg( TclMixArg(SeedArg,defArg), valArg );

  Real mode = If(TclGAV("-tclInterp",aplArg)=="0",   2,    1);

  Text tclCmd = "tk_chooseDirectory" +
                 TclGAKV("-initialdir", aplArg,2) +
                 TclGAKV("-parent",     aplArg,0) +
                 TclGAKV("-title",      aplArg,mode) +
                 TclGAKV("-mustexist",  aplArg,0);
 Text TclTrace(tclCmd);
 Text answer = TclEvalT(tclCmd);
 answer
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Pops up a dialog box for the user to select a directory. The following
option-value pairs are possible as command line arguments: 
-initialdir dirname
Specifies that the directories in directory should be displayed when the
dialog pops up. If this parameter is not specified, then the directories in
the current working directory are displayed. If the parameter specifies a 
relative path, the return value will convert the relative path to an absolute
path. This option may not always work on the Macintosh. This is not a bug.
Rather, the General Controls control panel on the Mac allows the end user to
override the application default directory. 
-parent window
Makes window the logical parent of the dialog. The dialog is displayed on top
of its parent window. 
-title titleString
Specifies a string to display as the title of the dialog box. If this option
is not specified, then a default title will be displayed. 
-mustexist boolean
Specifies whether the user may specify non-existant directories. If this
parameter is true, then the user may only select directories that already
exist. The default value is false. 
Option -tclInterp (0 as default) indicates if -title argument must be
interpreted by tcl or not
See more help on http://www.tcl.tk/man/tcl8.4/TkCmd/chooseDirectory.htm
",
TclTkChooseDirectory);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Text TclTkGetOpenFile (Set valArg)
//////////////////////////////////////////////////////////////////////////////
{
  Set defArg = SetOfSet (
    TclArgSt("-tclInterp",  "0")
  );
  Set aplArg = TclMixArg( TclMixArg(SeedArg,defArg), valArg );

  Real mode = If(TclGAV("-tclInterp",aplArg)=="0",   2,    1);

  Text tclCmd = "tk_getOpenFile" +
                 TclGAKV("-defaultextension", aplArg,0) +
                 TclGAKV("-filetypes",        aplArg,2) +
                 TclGAKV("-initialdir",       aplArg,2) +
                 TclGAKV("-initialfile",      aplArg,2) +
                 TclGAKV("-multiple",         aplArg,0) +
                 TclGAKV("-parent",           aplArg,0) +
                 TclGAKV("-title",            aplArg,mode);
 Text TclTrace(tclCmd);
 Text answer = TclEvalT(tclCmd);
 answer
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"The procedures tk_getOpenFile and tk_getSaveFile pop up a dialog box for the
user to select a file to open or save. The tk_getOpenFile command is usually 
associated with the Open command in the File menu. Its purpose is for the user
to select an existing file only. If the user enters an non-existent file, the
dialog box gives the user an error prompt and requires the user to give an
alternative selection. If an application allows the user to create new files,
it should do so by providing a separate New menu command. 
The tk_getSaveFile command is usually associated with the Save as command in
the File menu. If the user enters a file that already exists, the dialog box
prompts the user for confirmation whether the existing file should be 
overwritten or not. 
The following option-value pairs are possible as command line arguments to
these two commands: 
-defaultextension extension
Specifies a string that will be appended to the filename if the user enters a
filename without an extension. The defaut value is the empty string, which
means no extension will be appended to the filename in any case. This option
is ignored on the Macintosh platform, which does not require extensions to
filenames, and the UNIX implementation guesses reasonable values for this from
the -filetypes option when this is not supplied. 
-filetypes filePatternList
If a File types listbox exists in the file dialog on the particular platform,
this option gives the filetypes in this listbox. When the user choose a
filetype in the listbox, only the files of that type are listed. If this 
option is unspecified, or if it is set to the empty list, or if the File types
listbox is not supported by the particular platform then all files are listed
regardless of their types. See the section SPECIFYING FILE PATTERNS below for
a discussion on the contents of filePatternList. 
-initialdir directory
Specifies that the files in directory should be displayed when the dialog pops up. If this parameter is not specified, then the files in the current working directory are displayed. If the parameter specifies a relative path, the return value will convert the relative path to an absolute path. This option may not always work on the Macintosh. This is not a bug. Rather, the General Controls control panel on the Mac allows the end user to override the application default directory. 
-initialfile filename
Specifies a filename to be displayed in the dialog when it pops up. This
option is ignored on the Macintosh platform. 
-multiple
Allows the user to choose multiple files from the Open dialog. On the 
Macintosh, this is only available when Navigation Services are installed. 
-message string
Specifies a message to include in the client area of the dialog. This is only
available on the Macintosh, and only when Navigation Services are installed. 
-parent window
Makes window the logical parent of the file dialog. The file dialog is
displayed on top of its parent window. 
-title titleString
Specifies a string to display as the title of the dialog box. If this option
is not specified, then a default title is displayed. 

If the user selects a file, both tk_getOpenFile and tk_getSaveFile return the
full pathname of this file. If the user cancels the operation, both commands
return the empty string. 
Option -tclInterp (0 as default) indicates if -title argument must be
interpreted by tcl or not
See more help on http://www.tcl.tk/man/tcl8.4/TkCmd/getOpenFile.htm
",
TclTkGetOpenFile);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Text TclTkGetSaveFile (Set valArg)
//////////////////////////////////////////////////////////////////////////////
{
  Set defArg = SetOfSet (
    TclArgSt("-tclInterp",  "0")
  );
  Set aplArg = TclMixArg( TclMixArg(SeedArg,defArg), valArg );

  Real mode = If(TclGAV("-tclInterp",aplArg)=="0",   2,    1);

  Text tclCmd = "tk_getSaveFile" +
                 TclGAKV("-defaultextension", aplArg,0) +
                 TclGAKV("-filetypes",        aplArg,2) +
                 TclGAKV("-initialdir",       aplArg,2) +
                 TclGAKV("-initialfile",      aplArg,2) +
                 TclGAKV("-multiple",         aplArg,0) +
                 TclGAKV("-parent",           aplArg,0) +
                 TclGAKV("-title",            aplArg,mode);
 Text TclTrace(tclCmd);
 Text answer = TclEvalT(tclCmd);
 answer
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"The procedures tk_getOpenFile and tk_getSaveFile pop up a dialog box for the
user to select a file to open or save. The tk_getOpenFile command is usually 
associated with the Open command in the File menu. Its purpose is for the user
to select an existing file only. If the user enters an non-existent file, the
dialog box gives the user an error prompt and requires the user to give an
alternative selection. If an application allows the user to create new files,
it should do so by providing a separate New menu command. 
The tk_getSaveFile command is usually associated with the Save as command in
the File menu. If the user enters a file that already exists, the dialog box
prompts the user for confirmation whether the existing file should be 
overwritten or not. 
The following option-value pairs are possible as command line arguments to
these two commands: 
-defaultextension extension
Specifies a string that will be appended to the filename if the user enters a
filename without an extension. The defaut value is the empty string, which
means no extension will be appended to the filename in any case. This option
is ignored on the Macintosh platform, which does not require extensions to
filenames, and the UNIX implementation guesses reasonable values for this from
the -filetypes option when this is not supplied. 
-filetypes filePatternList
If a File types listbox exists in the file dialog on the particular platform,
this option gives the filetypes in this listbox. When the user choose a
filetype in the listbox, only the files of that type are listed. If this 
option is unspecified, or if it is set to the empty list, or if the File types
listbox is not supported by the particular platform then all files are listed
regardless of their types. See the section SPECIFYING FILE PATTERNS below for
a discussion on the contents of filePatternList. 
-initialdir directory
Specifies that the files in directory should be displayed when the dialog pops up. If this parameter is not specified, then the files in the current working directory are displayed. If the parameter specifies a relative path, the return value will convert the relative path to an absolute path. This option may not always work on the Macintosh. This is not a bug. Rather, the General Controls control panel on the Mac allows the end user to override the application default directory. 
-initialfile filename
Specifies a filename to be displayed in the dialog when it pops up. This
option is ignored on the Macintosh platform. 
-multiple
Allows the user to choose multiple files from the Open dialog. On the 
Macintosh, this is only available when Navigation Services are installed. 
-message string
Specifies a message to include in the client area of the dialog. This is only
available on the Macintosh, and only when Navigation Services are installed. 
-parent window
Makes window the logical parent of the file dialog. The file dialog is
displayed on top of its parent window. 
-title titleString
Specifies a string to display as the title of the dialog box. If this option
is not specified, then a default title is displayed. 

If the user selects a file, both tk_getOpenFile and tk_getSaveFile return the
full pathname of this file. If the user cancels the operation, both commands
return the empty string. 
Option -tclInterp (0 as default) indicates if -title argument must be
interpreted by tcl or not
See more help on http://www.tcl.tk/man/tcl8.4/TkCmd/getOpenFile.htm
",
TclTkGetSaveFile);
//////////////////////////////////////////////////////////////////////////////

