//////////////////////////////////////////////////////////////////////////////
// FILE   : _tclutils.tol
// PURPOSE: Funciones y estructuras comunes para ser utilizadas por otros
//          archivos de funciones TOL/TCL.
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// STRUCTURES
//////////////////////////////////////////////////////////////////////////////

// PURPOSE: Para definir un argumento TCL
Struct @TclArgSt {
  Text Key, // Clave
  Text Val  // Valor
};

// estructura de las bst de ayuda
Struct @HelpStruct {
  Text object,
  Text pathhelp,
  Text pagereference
};

//////////////////////////////////////////////////////////////////////////////
// CONSTANTS
//////////////////////////////////////////////////////////////////////////////

// Semilla de argumentos por defecto para los widgets TCL
Set SeedArg = SetOfSet(
  @TclArgSt("-font" ,    "Arial 8"),
  @TclArgSt("-title", "Selector"),
  @TclArgSt("-defValue",  "")
);


Text MsgReqArg = "<E>Debe especificar todos los argumentos obligatorios</E>";
Text TCLRESULT = "___TclResult__"; // Nombre de variable para retorno de
                                   // valores en los proceso de la TclEval
                                   // cuando esa variable deba hacerse global


//////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text TxtListTcl(Set valSet)
//////////////////////////////////////////////////////////////////////////////
{
  Set fmtSet = SetOfSet
  (
    FmtSt("Text",   "{",      "}", Identity,      Copy(Empty)),
    FmtSt("Real",   "",       "",  FormatIntReal, SetOfText("%0.4lf")),
    FmtSt("Polyn",  "{",      "}", FormatPolyn,   Copy(Empty)),
    FmtSt("Set",    "[list ", "]", Identity,      Copy(Empty)),
    FmtSt("Date",   "{",      "}", FormatDate,    SetOfText("%Y%m%d"))
  );
  Text txt = TxtFormListGen(valSet, "[list ", "]", " ", fmtSet);
  If(txt=="[list ]","",txt)
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("
Lista el conjunto valSet convirtiendolo en formato TCL.",TxtListTcl);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text TclEvalT(Text Cmd)
//////////////////////////////////////////////////////////////////////////////
{
  Set evalTcl = Tcl_Eval(Cmd);  // Cambiar por "TolTclEval"
  Text If(Not(evalTcl[2]),
    TclError(evalTcl[1])
  );   
  evalTcl["result"]  
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(I2("",
"Evalua un script Tcl. El valor de retorno es un Text con el resultado de la
evaluación.
Ejemplo:
  Text TclEval(\"set msg {Hola Mundo}\")"),
TclEvalT);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text Tclmc(Text string)
//////////////////////////////////////////////////////////////////////////////
{
  Text mcstring = "mc \""+string+"\"";
  TclEvalT(mcstring)
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(I2("Returns string translated to the current language",
"Devuelve la cadena de texto equivalente a string en el idioma activo"),
Tclmc);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text BBr(Text txt)
//////////////////////////////////////////////////////////////////////////////
{
  "{"+txt+"}"
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(I2("Returns a string between brackets",
"Devuelve el texto entre llaves."),
BBr);
//////////////////////////////////////////////////////////////////////////////

/* //////////////////////////////////////////////////////////////////////// */
/* FUNCIONES DUPLICADAS DE SADD A LA ESPERA DE PASAR GENERAL A INITLIBRARY  */
//////////////////////////////////////////////////////////////////////////////
Text BQt2(Text txt)
//////////////////////////////////////////////////////////////////////////////
{
  Quotes+txt+Quotes
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(I2("Returns a string between quotes",
"Devuelve el texto entrecomillado."),
BQt2);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Real IsEmpty2(Set set)
//////////////////////////////////////////////////////////////////////////////
{ EQ(Card(set),0) };
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"Devuelve TRUE si el conjunto es vacio, en otro caso devuleve FALSE.",
IsEmpty2);
//////////////////////////////////////////////////////////////////////////////


/* //////////////////////////////////////////////////////////////////////// */


//////////////////////////////////////////////////////////////////////////////
Set TclMixArg(
  Set defArg,  // Argumentos por defecto
  Set valArg   // Argumentos
)
//////////////////////////////////////////////////////////////////////////////
{
  Case (
    IsEmpty2(defArg), valArg,
    IsEmpty2(valArg), defArg,
    1, {
      Set keyV = Traspose(valArg)[1];
      Set defNotVal = Select(defArg, Real (Set reg) {
        Not( reg->Key <: keyV)
      });
      defNotVal << valArg
    }
  )
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Mecla los argumentos por defecto con los argumentos que se van
a pasar a una funcion TOL/TCL",
TclMixArg);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text TclTrace(Text msg)
//////////////////////////////////////////////////////////////////////////////
{
  TclEvalT("Tolcon_Trace "+BBr(msg))
};

//////////////////////////////////////////////////////////////////////////////
Text TclWarning(Text msg)
//////////////////////////////////////////////////////////////////////////////
{
  Text WriteLn("<W>"+msg+"</W>");
  msg
};

//////////////////////////////////////////////////////////////////////////////
Text TclError(Text msg)
//////////////////////////////////////////////////////////////////////////////
{
  Text WriteLn("<E>"+msg+"</E>");
  msg
};

//////////////////////////////////////////////////////////////////////////////
Real TclCheck(Set setKey, Set setArg)
//////////////////////////////////////////////////////////////////////////////
{
  Group("And",EvalSet(setKey, Real (Text key) { TclCheckArg(key,setArg) } ))
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Chequea para un conjunto de argumentos si se han especificado
valores para un conjunto de claves",
TclCheck);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Real TclCheckArg(Text key, Set setArg)
//////////////////////////////////////////////////////////////////////////////
{
  Set res = Select(setArg, Real (Set reg) {
    reg->Key == key
  });
  GE(Card(res),1)
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Chequea para un conjunto de argumentos si se han especificado
valor para una clave",
TclCheckArg);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text TclGAV(Text key, Set setArg)
//////////////////////////////////////////////////////////////////////////////
{
  Set res = Select(setArg, Real (Set reg) {
    reg->Key == key
  });
  Text Case (
    Eq(Card(res),1), res[1]->Val,
    Eq(Card(res),0), {
      TclError("TclGetArgVal (TclGAV). Key <"+key+"> not found.");
      ""
    },
    1, {
      TclWarning("TclGetArgVal (TclGAV). More then one key <"+key+"> found.");
      res[1]->Val
    }
  )
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Busca y devuelve el valor de un argumento dada la clave en un
conjunto de argumentos con estructura @TclArgSt. Si no existe informa del error
y devuelve la cadena vacia.",
TclGAV);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Text TclGAKV(Text key, Set setArg, Real mode)
//////////////////////////////////////////////////////////////////////////////
{
  If(Not(TclCheckArg(key, setArg)), "",
  { 
    Text val = TclGAV(key,setArg);
    Case(
      Eq(mode,0), " "+key+" "+val,
      Eq(mode,1), " "+key+" "+BQt2(val),
      Eq(mode,2), " "+key+" "+BBr (val),
      1,          "ERROR"
    )
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Busca y devuelve la clave y valor de un argumento especificado
por su clave en un conjunto de argumentos con estructura @TclArgSt si la clave
existe. El argumento mode indica el modo en que se devuelve la cadena:
 0 - Se devuelve el valor tal cual
 1 - Se encierra el valor entre comillas
 2 - Se encierra el valor entre llaves",
TclGAKV);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text TolSet2TclLst (Set set) 
//////////////////////////////////////////////////////////////////////////////
{
  TxtListTcl(set) 
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("A partir de un conjunto TOL genera el código TCL que evaluado
devuelve una lista correspondiente al conjunto.",
TolSet2TclLst);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Set TclLst2TolSet (Text lst, Real level)
//////////////////////////////////////////////////////////////////////////////
{
  Text code = TclEvalT("TclLst2TolSet "+lst+" -level "+IntText(level));
  Eval("Set "+code)
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("A partir del codigo TCL correspondiente a la definicion de una
lista devuelve el conjunto TOL correspondiente a esa lista.",
TclLst2TolSet);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Set TclLst2TolSetFull (Text lst, Real level, Text grammar, Text struct)
//////////////////////////////////////////////////////////////////////////////
{
  Text code = TclEvalT("TclLst2TolSet "+lst+" -level "+IntText(level)+
                       " -grammmar "+grammar+" -struct "+struct);
  Eval("Set "+code)
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("A partir del codigo TCL correspondiente a la definicion de una
lista devuelve el conjunto TOL correspondiente a esa lista. Utiliza todos 
los parámetros definidos en TCL.",
TclLst2TolSetFull);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
Text GetDirHelpSection(Text dirHelp, Text section)
//
// PURPOSE: Dado el directorio de la ayuda y una sección, devuelve la ruta
//          que debe abrirse en el navegador. Devuelve "" en el caso que el 
//          archivo no exista
//
//////////////////////////////////////////////////////////////////////////////
{
  Text bstHelp = dirHelp + "//" + "pathhelp.bst";
  Set helpSet = IncludeBST(bstHelp);
  Set helpRow = Select(helpSet, Real(Set item) 
               { 
                 Text name = item->object;                 
                 Real If(name==section,1,0) 
               });
  Set datapath = If(EQ(Card(helpRow),0),
  { // no ha encontrado la clave
    Set tcl_res = Tcl_Eval("list $::project::data(defaulthelpkey)");
    Text (section := tcl_res["result"]);
    Set (helpRow := Select(helpSet, Real(Set item) 
               { 
                 Text name = item->object;                 
                 Real If(name==section,1,0) 
               }))
  },
  {
    helpRow
  });
  Text If( EQ(Card(helpRow),0), 
    {
       TclWarning("There is no help associated to section <"+section+">.");
       Text dirHelp+ "/inx.htm"
    },
    {
      Text relDir = datapath[1]->pathhelp;
      Text reference = datapath[1]->pagereference;
      Text path = dirHelp + "/" + relDir + "/inx.htm";
      Text If(FileExist(path),{
        Text If(reference=="",
        { // no hay sección dentro de la página
          Text dirHelp + "/" + relDir + "/inx.htm"
        },
        { // hay sección dentro de la página
          Text dirHelp + "/" + relDir + "/inx.htm" + "#" + reference
        })
      },
      {
        Text dirHelp+ "/inx.htm"
      })
    })
  };
//////////////////////////////////////////////////////////////////////////////
PutDescription("Dado el directorio de la ayuda y una sección, devuelve la ruta
que debe abrirse en el navegador. Devuelve vacio en el caso que el archivo no
exista. Si la sección es incorrecta, abre la sección por defecto que tenga
establecido el interfaz.",
GetDirHelpSection);
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
  Real CheckTOLRelease(Real maxDaysOfDelay)
//////////////////////////////////////////////////////////////////////////////
{
  If(Or(OSUnix,ToLower(GetFilePrefix(TOLSessionPath))!="tolbase"),1,
  {
    Date tol_release_check = If(FileExist("tol_release_check.tol"),
    {
      Include("tol_release_check.tol")[1]
    },
    {
      y1583
    });
    Real delay = DateToIndex(Now)-DateToIndex(tol_release_check);
    Real If(delay < maxDaysOfDelay, 
    {
      WriteLn(I2("Last TOL updating check TOL was made at ",
                 "La última comprobación de la actualización de TOL se hizo en ")
              <<tol_release_check);
      -1
    },
    {
      WriteLn(I2("Checking if TOL is updated.",
                 "Comprobando si TOL está actualizado."));
      Text WriteFile("tol_release_check.tol", 
                     "Date tol_release_check = "+
                     FormatDate(Now,"%cy%Ym%md%dh%hi%is%s")+";\n");
      Text tol_site = "https://www.tol-project.org/wiki/DownloadTol";
      Text lastOldStableWin ="";
      Text lastOfficialWin  = "";
      Text lastDevelopmWin  = "";
      Real ostOK = False;
      Real ofcOK = False;
      Real devOK = False;
      Real Show(False,"ALL");
      Text lastOldStableWin := GetVersionFromTolProject("oldstable");
      Real ostOK := (Text lastOldStableWin!="");
      If(ostOK,
      {
        Text lastOfficialWin := GetVersionFromTolProject("official");
        Real ofcOK := (Text lastOfficialWin!="");
        If(ofcOK,
        {
          Text lastDevelopmWin := GetVersionFromTolProject("development");
          Real devOK := (Text lastDevelopmWin!="")
        })
      });
      Real Show(True,"ALL");
      Text msg="";
      Real cannot_connect = False;
      Real check = If(Or(!ostOK, !ofcOK, !devOK),
      {
        Real cannot_connect := True;
        WriteLn(msg:=I2("Cannot check TOL release.",
                        "No se pudo chequear la versión de TOL."),"W");
        -1
      },
      {
        Text current   = Tokenizer(Version,         " ")[1];
        Text oldStable = Tokenizer(lastOldStableWin," ")[1];
        Text official  = Tokenizer(lastOfficialWin, " ")[1];
        Text developm  = Tokenizer(lastDevelopmWin, " ")[1];
        Text ostMsg = I2("The last old-stable version of TOL for windows is ",
                         "La versión estable con mantenimiento más antigua de TOL para windows es ")+
                         lastOldStableWin;
        Text ofcMsg = I2("The last official version of TOL for windows is ",
                         "La última versión oficial de TOL para windows es ")+
                         lastOfficialWin;
        Text devMsg = I2("The last development version of TOL for windows is ",
                         "La última versión de desarrollo de TOL para windows es ")+
                         lastDevelopmWin;
        Text unkMsg = I2("You are using a too old or unknown TOL version ",
                         "Está usando una versión demasiado vieja "
                         "o desconocida de TOL ")+Version+
                         "\n"+ostMsg+
                         "\n"+ofcMsg+
                         "\n"+devMsg;
        Text obsMsg = I2("You have an obsolete TOL version ",
                         "Su versión de TOL está obsoleta ")+
                         Version+"."+
                         "\n"+ostMsg+
                         "\n"+ofcMsg+
                         "\n"+devMsg+"\n"+
                         I2("Please update it from official web page of TOL ",
                            "Por favor actualícela desde la página oficial "
                            "de TOL ")+ tol_site+"\n";
        Text updMsg = I2("TOL is updated.",
                         "TOL está actualizado.");
        Text advMsg = I2("CAUTION: You are using an advanced TOL version ",
                         "CUIDADO: Está usando una versión avanzada de TOL ")+Version+".";
        Text last = Case
        (
          current==oldStable,  { WriteLn(ostMsg);     lastOldStableWin },
          current==official,   { WriteLn(ofcMsg);     lastOfficialWin  },
          current==developm,   { WriteLn(devMsg);     lastDevelopmWin  },
          1==1,                { WriteLn(unkMsg,"W"); lastOfficialWin  }
        );
        Case
        ( 
          last == Version, { WriteLn(msg:=updMsg    ), 0},
          last <  Version, { WriteLn(msg:=advMsg,"W"), 0},
          last >  Version, { WriteLn(msg:=unkMsg,"W"), 2}
        )
      });
      Real ok = If(check==0, 1,
      {
        If(!cannot_connect,
          Text doTest = TclTkMessageBox(SetOfSet(
                          @TclArgSt("-title",   "Dialogo TclWarning"),
                          @TclArgSt("-message", msg),
                          @TclArgSt("-icon",    "warning"))));
        0
      });
    //Real If(!check|TolConfigManager::Config::Upgrading::TolPackage::LocalOnly,
      Real If(!check|TolConfigManager::Config::Upgrading::TolPackage::LocalOnly,
      {
        0
      },
      { 
        TolPackage::Client::RemoteUpdatePackSyncInfo(True)
      });
      check
    })
  })
};
//////////////////////////////////////////////////////////////////////////////
PutDescription("Comprueba si hay disponible una versión de TOL actualizada.", 
               CheckTOLRelease);
//////////////////////////////////////////////////////////////////////////////
