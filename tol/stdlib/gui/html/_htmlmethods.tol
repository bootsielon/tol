//////////////////////////////////////////////////////////////////////////////
// FILE    : HtmlMethods.tol
// PURPOSE : Methods to generate HTML reports
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
  Text HtmlHelp(Code fun, Text label)
//////////////////////////////////////////////////////////////////////////////
{
  HtmlTitle(label,2,TitCol)+"<br>"+NL+
  HtmlTitle("Argumentos",3,TitCol)+"<br>"+NL+
   Arguments(fun)+"<br>"+NL+
  HtmlTitle("Descripción",3,TitCol)+"<br>"+NL+
   Description(fun)+"<br>"+NL
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlSeriesReport(Set series)

// PURPOSE: Creates an HTML page width the default report of series 
//
//////////////////////////////////////////////////////////////////////////////
{
  "<OL>" +
  "  <LI>" + HtmlTitle("Gráfico" ,3,TitCol)+
    HtmlBdtChart(series)  + BR +
  "  <LI>" + HtmlTitle("Estadísticos" ,3,TitCol)+
    HtmlStatTable(series)  + BR +
  "  <LI>" + HtmlTitle("Tabla",3,TitCol)+
  If(Card(series)==1, HtmlPeriodicTable(series), HtmlBdtTable(series)) + BR +
  "</OL>"
};



//////////////////////////////////////////////////////////////////////////////
   Text HtmlSeriesDescription(Set series)

// PURPOSE: Creates an HTML page width a description of series 
//
//////////////////////////////////////////////////////////////////////////////
{
  Text old = PutEditor("");
  Text tmpDir = Replace(TmpDir,"\\","/"); 
  Text rand = FormatReal(Rand(0,99999999),"%0.lf");
  Text SerFile = tmpDir + "/Ser" + rand + ".txt";
  Set  SetTable(series,SerFile);
  Text txt = ReadFile(SerFile);
  txt := Replace(txt,"~",";");
  txt := Replace(txt,"Serie;","");
  txt := Replace(txt,"Tipo;","");
  Text WriteFile(SerFile,txt);
  Text html = HtmlTable(SerFile,FALSE,-1,-1,-1,3);
  Real SystemDelete(SerFile);
  Text PutEditor(old);
  html
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlBdtChart(Set series)

// PURPOSE: Creates an HTML page width a chart of series 
//
//////////////////////////////////////////////////////////////////////////////
{
  Text old = PutEditor("");
  Text tmpDir = Replace(TmpDir,"\\","/"); 
  Text rand = FormatReal(Rand(0,99999999),"%0.lf");
  Text SerFile = tmpDir + "/" + rand + ".bdt";
  Set Table(series, SerFile);
  Text chart = If(HTMLChartType=="GIF",
                  BDTGifChart(SerFile,
                              URLRoot + "/" + rand + ".gif",
                              GIFRoot + "/" + rand + ".gif",
                              "", CHARTWIDTH, CHARTHEIGHT),
                  BDTJavaChart(SerFile,
                              "", CHARTWIDTH, CHARTHEIGHT));
  Real SystemDelete(SerFile);
  Text PutEditor(old);
  chart
};

//////////////////////////////////////////////////////////////////////////////
   Text HtmlBdtTable(Set series)

// PURPOSE: Creates an HTML page width a table of series 
//
//////////////////////////////////////////////////////////////////////////////
{
  Text old = PutEditor("");
  Text tmpDir = Replace(TmpDir,"\\","/"); 
  Text rand = FormatReal(Rand(0,99999999),"%0.lf");
  Text SerFile = tmpDir + "/Ser" + rand + ".bdt";
  Set Table(series, SerFile);
  Text html = // HtmlTitle("Tabla de series",3,TitCol)+
              HtmlTable(SerFile);
  Real SystemDelete(SerFile);
  Text PutEditor(old);
  html
};



//////////////////////////////////////////////////////////////////////////////
   Text HtmlPeriodicTable(Set series)

// PURPOSE: Creates an HTML page width a periodic table of series 
//
//////////////////////////////////////////////////////////////////////////////
{
  Real n       = Card(series);
  Set  htmlSet = EvalSet(series, HtmlPeriodicTableOfSerie);
//Text title   = HtmlTitle("Tabla periódica",3,TitCol);
  Text table   = 
    If(
      n==0, "", If(
      n==1, htmlSet[1], If(
      n==2, htmlSet [1] + htmlSet[2], 
            {
              BinGroup("+", htmlSet) 
            })));
//title + table
  table
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlStatTableOne(Set series)

// PURPOSE: Creates an HTML page width a statistics table of series 
//
//////////////////////////////////////////////////////////////////////////////
{
  Text old = PutEditor("");
  Text tmpDir = Replace(TmpDir,"\\","/"); 
  Text rand = FormatReal(Rand(0,99999999),"%0.lf");
  Text SerFile = tmpDir + "/Ser" + rand + ".bdt";
  Set  Statistics(series, SerFile);
  Text html = //HtmlTitle("Tabla de estadísticos",3,TitCol)+
              HtmlTable(SerFile);
  Real SystemDelete(SerFile);
  Text PutEditor(old);
  html
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlStatTableVarious(Set series)

// PURPOSE: Creates an HTML page width the default report of series 
//
//////////////////////////////////////////////////////////////////////////////
{
  "<OL>" +
  "  <LI>" + HtmlTitle("Estadísticos" ,3,TitCol)+
    HtmlStatTableOne(series)  + BR +
  "  <LI>" + HtmlTitle("Matriz de correlación" ,3,TitCol)+
    HtmlSeriesCorrel(series)  + BR +
  "  <LI>" + HtmlTitle("Matriz de covarianza" ,3,TitCol)+
    HtmlSeriesCovar(series)  + BR +
  "</OL>"
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlStatTable(Set series)

// PURPOSE: Creates an HTML page width the default report of series 
//
//////////////////////////////////////////////////////////////////////////////
{
  If
  (
    Card(series)==1, 
    HtmlStatTableOne(series),
    HtmlStatTableVarious(series)
  )
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlSeriesCorrel(Set series)

// PURPOSE: Creates an HTML table width the correlation matrix of series
//
//////////////////////////////////////////////////////////////////////////////
{
  Real n = Card(series); 
  If
  (
    n<2,
    {
      WriteLn("Error: Son necesarias al menos dos series para calcular "+
              "la matriz de correlación.");
      "Número de series = " + IntText(n)
    },
    {
      Set idSet = For(1,n, Text id(Real j) { Identify(series[j]) });
      Matrix corMat = SerCorrelation(series);
      HtmlMatrixTable(corMat,idSet,idSet,"Correlación")
    }
  )
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlSeriesCovar(Set series)

// PURPOSE: Creates an HTML table width the covarianze matrix of series
//
//////////////////////////////////////////////////////////////////////////////
{
  Real n = Card(series); 
  If
  (
    n<2,
    {
      WriteLn("Error: Son necesarias al menos dos series para calcular "+
              "la matriz de covarianza.");
      "Número de series = " + IntText(n)
    },
    {
      Set idSet = For(1,n, Text id(Real j) { Identify(series[j]) });
      Matrix covMat = SerCovarianze(series);
      HtmlMatrixTable(covMat,idSet,idSet,"Covarianza")
    }
  )
};



//////////////////////////////////////////////////////////////////////////////
   Text HtmlSeriesComponents(Set series)

// PURPOSE: Creates an HTML principal components of series
//
//////////////////////////////////////////////////////////////////////////////
{
  Real n = Card(series); 
  If
  (
    n<2,
    {
      WriteLn("Error: Son necesarias al menos dos series para calcular "+
              "las componentes principales.");
      "Número de series = " + IntText(n)
    },
    {
      Set idSet = For(1,n, Text (Real j) { Identify(series[j]) });
//    Matrix covMat = SerCovarianze(series);
      Matrix covMat = SerCorrelation(series);
      Set J = JordanIterative(covMat);  
      Matrix comp = J[1];
      Matrix val  = J[2];
      Set compSet = For(1,n, Text (Real j) { "S" << j });
      Matrix serData    = SerSetMat(series);
      Matrix serNewData = Tra(comp)*serData;
      Date   first = Group("Max",EvalSet(series,Date (Serie s) { First(s) }));
      Set    newSeries  = MatSerSet(serNewData,Dating(series[1]),first);
      
      "<OL>"+NL+
      "  <li>"+HtmlTitle("Gráfico de componentes",3,TitCol)+NL+
               HtmlBdtChart(newSeries)+BR+NL+
//    "  <li>"+HtmlTitle("Matriz de covarianzas de las series",3,TitCol)+NL+
      "  <li>"+HtmlTitle("Matriz de correlaciones de las series",3,TitCol)+NL+
               HtmlMatrixTable(covMat,idSet,idSet,"Covarianza")+BR+NL+
      "  <li>"+HtmlTitle("Matriz de autovectores",3,TitCol)+NL+
               HtmlMatrixTable(comp,compSet,idSet,"Coeficientes")+BR+NL+
      "  <li>"+HtmlTitle("Matriz de covarianzas de las componentes",3,TitCol)+NL+
               HtmlMatrixTable(val,compSet,compSet,"Covarianza")+BR+NL+
    //"  <li>"+HtmlTitle("Tabla de componentes",3,TitCol)+NL+
    //         HtmlBdtTable(newSeries)+NL+
      "</OL>"
    }
  )
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlLevelBdtChart(Set series)

// PURPOSE: Creates an HTML JAVA chart width the series divided by its 
//          averages
//
//////////////////////////////////////////////////////////////////////////////
{
  HtmlTitle("Transformación de nivel" ,3,TitCol)+
  HtmlBdtChart(EvalSet(series,LevelTransf))
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlStandardBdtChart(Set series)

// PURPOSE: Creates an HTML JAVA chart width the standard-normalized series 
//
//////////////////////////////////////////////////////////////////////////////
{
  HtmlTitle("Transformación estándar" ,3,TitCol)+
  HtmlBdtChart(EvalSet(series,StandardNormTransf))
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlUniformBdtChart(Set series)

// PURPOSE: Creates an HTML JAVA chart width the uniform-normalized series 
//
//////////////////////////////////////////////////////////////////////////////
{
  HtmlTitle("Transformación uniforme" ,3,TitCol)+
  HtmlBdtChart(EvalSet(series,UniformNormTransf))
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlLogBdtChart(Set series)

// PURPOSE: Creates an HTML JAVA chart width the uniform-normalized series 
//
//////////////////////////////////////////////////////////////////////////////
{
  HtmlTitle("Transformación logarítmica" ,3,TitCol)+
  HtmlBdtChart(EvalSet(series,LogTransf))
};

//////////////////////////////////////////////////////////////////////////////
   Text HtmlBoxCoxBdtChart(Set series)

// PURPOSE: Creates an HTML JAVA chart width the uniform-normalized series 
//
//////////////////////////////////////////////////////////////////////////////
{
  Text html = HtmlTitle("Transformación de Box-Cox" ,3,TitCol);

  Serie TBoxCoxCicle(Real n) 
  { 
    Real bct  = BoxCoxTrans(series[n],BoxCoxOptions);
    Text ser  = Identify(series[n]);
    Text expr = If(bct, "("+ser+")^" << bct, "Log("+ser+")");
    Text ( html := html + "\n<br>" + ser + " -> " +expr) ; 
    BoxCoxTransform(series[n],bct)  
  };
  Set tSeries = For(1,Card(series),TBoxCoxCicle);
  Text bdt = HtmlBdtChart(tSeries);
  html + bdt 
};


Real TransformacionDeNivel     = 1;
Real TransformacionEstandar    = 2;
Real TransformacionUniforme    = 3;
Real TransformacionLogaritmica = 4;
Real TransformacionBoxCox      = 5;

//////////////////////////////////////////////////////////////////////////////
   Text HtmlTransBdtChart(Set series, Real transformType)

// PURPOSE: Creates HTML JAVA charts width different transformations of series 
//
//////////////////////////////////////////////////////////////////////////////
{
  Case
  (
    transformType == TransformacionDeNivel,     HtmlLevelBdtChart    (series),
    transformType == TransformacionEstandar,    HtmlStandardBdtChart (series),
    transformType == TransformacionUniforme,    HtmlUniformBdtChart  (series),
    transformType == TransformacionLogaritmica, HtmlLogBdtChart      (series), 
    transformType == TransformacionBoxCox,      HtmlBoxCoxBdtChart   (series) 
  )
};


//////////////////////////////////////////////////////////////////////////////
   Text HtmlLinReg(Set series)

// PURPOSE: Creates an HTML text width a linear regression report of series
//
//////////////////////////////////////////////////////////////////////////////
{
  Real n = Card(series); 
  If
  (
    n<2,
    {
      WriteLn("Error: Son necesarias al menos dos series para calcular "+
              "la regresión lineal.");
      "Número de series = " + IntText(n)
    },
    {
      HtmlLinearRegression(series, Periodicity(series[1]))
    }
  ) 
};


//////////////////////////////////////////////////////////////////////////////
  Text HtmlAutoReg(Set  series,
                   Real periodicidad,
                   Real numeroDePrevisiones,
                   Real nivelDeConfianza,
                   Real previsionHistorica,
                   Real analisisDeResiduos)
//////////////////////////////////////////////////////////////////////////////
{
  HtmlAutoRegression(series[1],
                     periodicidad,
                     Succ(Last(series[1]),
                     Dating(series[1]),1),
                     numeroDePrevisiones,
                     nivelDeConfianza,
                     previsionHistorica,
                     analisisDeResiduos)
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"
Calcula previsiones para la primera serie del conjunto con un modelo
autoregresivo cuyo grado se identifica automáticamente teniendo en cuenta la
periodicidad de la serie. Este parámetro indica que existen ciclos en el
comportamiento de la serie de longitud fija igual a dicha periodicidad. Por
ejemplo las series diarias suelen tener periodicidad 7 (semanal), las
mensuales 12 (anual), etc. Si se quiere indicar que la serie no tiene
comportamiento periódico o estacional se pasa periodicidad 1.

El argumento numeroDePrevisiones es el número de datos a prever. El error de
la previsión es no decreciente en función del retardo con el que se calcula,
o sea, los primeros valores suelen ser siempre más fiables que los
posteriores, aunque pueden ser de igual calidad si el modelo es de ruido
blanco.

El argumento nivelDeConfianza es el nivel de confianza para las bandas de
error de la previsión. Las bandas de error son dos series que se sitúan a
ambos lados de la previsión de tal forma que la probabilidad de que los
valores futuros se encuentren entre ambas sea precisamente el nivel de
confianza. Este valor ha de ser por tanto un valor entre 0 y 1. Cuanto mayor
es el valor mayor es el ángulo que forman entre sí las bandas de confianza.

La previsión histórica es la serie de previsiones del pasado generada por el
modelo de previsión. Puede ser útil para ver el comportamiento comparado con
la serie real y valorar la calidad de la previsión.

Si el valor del parámetro previsionHistorica es CIERTO se incluye la serie de
previsión histórica y si es FALSO no se incluye.

Si queremos observar más detenidamente el modelo se necesita hacer un
análisis de residuos para lo cual hay que pasar CIERTO en el parámetro
analisisDeResiduos.
"
,HtmlAutoReg);
//////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////////
  Polyn DifRegSea(Real reg, Real sea, Real per)
//////////////////////////////////////////////////////////////////////////////
{
  Polyn regDif = If(reg>0, ((1-B)^reg), 1);
  Polyn seaDif = If(And((per>1),(sea>0)), ((1-(B^per))^sea), 1);
//WriteLn("regDif = " << regDif);
//WriteLn("seaDif = " << seaDif);
  regDif*seaDif
};



//////////////////////////////////////////////////////////////////////////////
   Text HtmlAutoCorReport(Set  series,
                          Real parcial,
                          Real inversa,
                          Real diferenciaRegular,
                          Real diferenciaEstacional,
                          Real periodicidad)
//////////////////////////////////////////////////////////////////////////////
{
  ////////////////////////////////////////////////////////////////////////////
    Text HtmlXACor(Code aCorFun, Text header, Text concept)
  ////////////////////////////////////////////////////////////////////////////
  {
    Text old = PutEditor("");
    Text tmpDir = Replace(TmpDir,"\\","/");
    Text rand = FormatReal(Rand(0,99999999),"%0.lf");
//  Real p = Periodicity(series[1]);
    Real p = periodicidad;
    Real N = CountS(series[1]);
    Real size = Min(N,30,Max(3*p,N/4));
    Polyn dif = DifRegSea(diferenciaRegular,diferenciaEstacional,p);
    Serie dSer= dif:series[1];
    Matrix mat  = aCorFun(dSer,size);
    Text fileName = tmpDir + "/" + rand + ".txt";
    Set  Table([[mat]],fileName);
    Text htmlChart = If(HTMLChartType=="GIF",
                        CORGifChart(fileName,
                                    URLRoot + "/" + rand + ".gif",
                                    GIFRoot + "/" + rand + ".gif",
                                    "",p),
                        CORJavaChart(fileName,"",p));

//  Text WriteFile(fileName,"N;"+header+"ACOR;SIGMA;"+NL+ReadFile(fileName));
//  Text htmlTable = HtmlTable(fileName);
    Text serName   = Identify(series[1]);
    Text aConcept  = "Autocorrelaciones " + concept;
    Text report =
      "<OL>" +
      "  <LI>" + HtmlTitle("Estructura de diferencias",3,TitCol)+ BR +
      HtmlTitle("Diferencia Regular : "<<diferenciaRegular,4,Black)+
      HtmlTitle("Diferencia Estacional : "<<diferenciaEstacional,4,Black)+
      HtmlTitle("Periodicidad : "<<periodicidad,4,Black)+
      HtmlTitle("Polinomio de retardos : "<<dif,4,Black)+ BR +
      "  <LI>" + HtmlTitle("Gráfico de "+aConcept+" de "+serName,3,TitCol)+
        htmlChart  +
        BR +
//    "  <LI>" + HtmlTitle("Tabla de "+aConcept+" de "+ serName,3,TitCol)+
//      htmlTable +
      "</OL>";

    Real SystemDelete(fileName);
    Text PutEditor(old);
    report
  };

  Case
  (
    And(!parcial,!inversa),HtmlXACor(AutoCor,       "",  ""),
    And( parcial,!inversa),HtmlXACor(PartAutoCor,   "P", "Parciales"),
    And(!parcial, inversa),HtmlXACor(InverseAutoCor,"I", "Inversas"),
    And( parcial, inversa),HtmlXACor(InvPartAutoCor,"IP","Parciales Inversas")
  )
};
//////////////////////////////////////////////////////////////////////////////
PutDescription(
"
La autocorrelación de orden n de una serie es el coeficiente de correlación
entre dicha serie y la serie retardada n fechas.

El vector de autocorrelaciones de una serie nos da una representación gráfica
muy intuitiva de cómo dependen los valores de una serie de los valores del
pasado.

El parámetro diferenciaRegular indica el orden de la diferencia regular a
aplicar a la serie antes de calcular las autocorrelaciones. Si no hay
diferencia regular se pasa 0.

El parámetro diferenciaEstacional indica el orden de la diferencia estacional
a aplicar a la serie antes de calcular las autocorrelaciones. Si no hay
diferencia estacional se pasa 0; y si la hay se debe pasar el parámetro
periodicidad mayor que 1.
"
,HtmlAutoCorReport);
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
  Struct @SeriesMethodStruct
//////////////////////////////////////////////////////////////////////////////
(
  Text Title,
  Code Function,
  Set  Parameters
);

//////////////////////////////////////////////////////////////////////////////
// Non parametric methods
//////////////////////////////////////////////////////////////////////////////

Set ReportMet = 
  @SeriesMethodStruct("Informe básico" , Copy(HtmlSeriesReport), Empty);

Set BdtTableMet = 
  @SeriesMethodStruct("Tabla", Copy(HtmlBdtTable), Empty);

Set BdtPerTableMet = 
  @SeriesMethodStruct("Tabla periódica", Copy(HtmlPeriodicTable), Empty);

Set BdtStatTableMet = 
  @SeriesMethodStruct("Estadísticos", Copy(HtmlStatTable), Empty);

Set BdtChartMet = 
  @SeriesMethodStruct("Gráfico", Copy(HtmlBdtChart), Empty);

Set CorrelMet = 
  @SeriesMethodStruct("Correlación" , Copy(HtmlSeriesCorrel), Empty);

Set CovarMet = 
  @SeriesMethodStruct("Covarianza" , Copy(HtmlSeriesCovar), Empty);

Set ComponentsMet = 
  @SeriesMethodStruct("Componentes" , Copy(HtmlSeriesComponents), Empty);

Set LinRegMet = 
  @SeriesMethodStruct("Regresión lineal" , Copy(HtmlLinReg), Empty);


//////////////////////////////////////////////////////////////////////////////
// Non parametric methods
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
  Set TransformMet(Real type)
//////////////////////////////////////////////////////////////////////////////
{
  @SeriesMethodStruct
  (
    "Gráfico de transformación" , 
    HtmlTransBdtChart, 
    [[type]]
  )
};

//////////////////////////////////////////////////////////////////////////////
  Set AutoRegMet(Real periodicidad,
                 Real numeroDePrevisiones,
                 Real nivelDeConfianza,
                 Real previsionHistorica,
                 Real analisisDeResiduos)
//////////////////////////////////////////////////////////////////////////////
{
  @SeriesMethodStruct
  (
    "Autoregresión" , 
    HtmlAutoReg, 
    [[
       periodicidad,
       numeroDePrevisiones,
       nivelDeConfianza,
       previsionHistorica,
       analisisDeResiduos
    ]]
  )
};

//////////////////////////////////////////////////////////////////////////////
  Set AutoCorMet(Real parcial,
                 Real inversa,
                 Real diferenciaRegular,
                 Real diferenciaEstacional,
                 Real periodicidad)
//////////////////////////////////////////////////////////////////////////////
{
  @SeriesMethodStruct
  (
    "Autocorrelaciones" , 
    HtmlAutoCorReport, 
    [[
       parcial,
       inversa,
       diferenciaRegular,
       diferenciaEstacional,
       periodicidad
    ]]
  )
};



//////////////////////////////////////////////////////////////////////////////
  Text HtmlListOfMethods(Set series, Set serMet)
//////////////////////////////////////////////////////////////////////////////
{
  Text rand     = FormatReal(Rand(0,99999999),"%0.lf");
//WriteLn("HtmlListOfMethods " << Card(serMet));
  Set metTxt    = For(1,Card(serMet), Text(Real k)
  {
    Set  p = serMet[k]->Parameters;
    Real n = Card(p);
//  WriteLn("  Method " << k << " "<<serMet[k]->Title << " " <<n);
    Text extra = If(!n,"",
    {
      Set  pTxt  = For(1,n,Text(Real k){ ", p["<<k<<"]" });
      BinGroup("+", pTxt)
    });
    "<LI>" + HtmlTitle(serMet[k]->Title,2,Blue) + "<BR>"+
    Eval(Name(serMet[k]->Function)+"(series"+extra+")")
  });
  "<OL>"+BinGroup("+", metTxt)+"</OL>"
};
