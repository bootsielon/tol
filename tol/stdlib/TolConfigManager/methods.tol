/* -*- mode: C++ -*- */
//////////////////////////////////////////////////////////////////////////////
// FILE   : methods.tol
// PURPOSE: Defines TolConfigManager methods
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.BuildExpression=
"Builds the TOL expression of a NameBlock";
Text BuildExpression(NameBlock config, Text margin)
//////////////////////////////////////////////////////////////////////////////
{
  Set members = DeepCopy(NameBlockToSet(config));
  margin+"NameBlock "+Name(config)+" = \n"+margin+"[[\n"+
  SetSum(For(1,Card(members),Text(Real k)
  {
    Text g = Grammar(members[k]);
    Text dec = margin+"  "+g+" "+Name(members[k])+" = ";
    If(k>1,";\n","")+
    Case(
      g=="Text", dec+"\""+members[k]+"\"",
      g=="Real", dec<<members[k],
      g=="Date", dec<<members[k],
      g=="Set",  dec<<members[k],
      g=="NameBlock", BuildExpression(members[k],margin+"  ")
    )
  }))+"\n"+
  margin+"]]"
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.SaveConfig =
"Saves configuration file with especified options.";
Real SaveConfig(NameBlock config)
//////////////////////////////////////////////////////////////////////////////
{
  Text WriteFile(_.path, BuildExpression(config,""));
  True
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Apply =
"Applies user Config options.";
Real Apply(Real unused)
//////////////////////////////////////////////////////////////////////////////
{
  Date PutDefaultDates(
    TolConfigManager::Config::Time::FirstDate,
    TolConfigManager::Config::Time::LastDate);
  Text TolConfigManager::Config::Various::Language := 
    ToUpper(TolConfigManager::Config::Various::Language);
  Text PutLanguage(TolConfigManager::Config::Various::Language);
  Text WriteFile(TOLSH_PATH+"language.txt",""<<If( 
    TolConfigManager::Config::Various::Language=="CASTELLANO",1,0));
  Real ShowStackAtError := 
    TolConfigManager::Config::Various::Verbose::ShowStackAtError;
  Real ShowStackAtWarning := 
    TolConfigManager::Config::Various::Verbose::ShowStackAtWarning;
  True
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.Save =
"Saves configuration file with user Config options.";
Real Save(Real unused)
//////////////////////////////////////////////////////////////////////////////
{
//Real Apply(unused);
  SaveConfig(TolConfigManager::Config)
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.MergeOptions=
"Merge default and user configurations";
NameBlock MergeOptions(NameBlock default, NameBlock config, Text prefix)
//////////////////////////////////////////////////////////////////////////////
{
  Set default_set = NameBlockToSet(default);
  Set config_set = NameBlockToSet(config);
  Real aGTb = Card(default_set) >= Card(config_set);
//WriteLn("TRACE [MergeOptions] 1 default="<<Name(default)+"("<<Card(default_set)+") config="<<Name(config)+"("<<Card(config_set)+")  prefix="<<prefix);
  Set c_set = If(aGTb, 
  EvalSet(default_set, Anything(Anything element)
  {
    Text gra = Grammar(element);
    Text name = Name(element);
    Text fullName = prefix+name;
    Case(
    TextBeginWith(name, "_.autodoc.member."), 
    {
      element
    },
    !ObjectExist(gra,"config::"+name),             
    {
      WriteLn("[MergeOptions] New configuration option \n"<<
      "\n  "+gra+" "+fullName+"="<<element+";\n\n"+
      "You can use this default value or change it running \n"+
      "\n  "+gra+" "+fullName+":= Copy(<new_value>); \n\n"+
      "Then you must run this line to avoid this messages at future\n"+
      "\n  Real TolConfigManager::Save(?); \n\n"
      "NOTE: Changing some options do not take effect until next TOL session."
      ,"W");
      element
    },
    gra!="NameBlock",                         
    {
      Eval(gra+" config::"+name)
    },
    1==1,                                     
    {
      MergeOptions(element,Eval(gra+" config::"+name),fullName+"::")
    })
  }),
  EvalSet(config_set, Anything(Anything element)
  {
    Text gra = Grammar(element);
    Text name = Name(element);
    Case(
    TextBeginWith(name, "_.autodoc.member."), 
    {
      element
    },
    !ObjectExist(gra,"default::"+name),             
    {
      element
    },
    gra!="NameBlock",                         
    {
      element
    },
    1==1,                                     
    {
      MergeOptions(Eval(gra+" default::"+name),element,fullName+"::")
    })
  }));
  Eval(Name(config)+"=SetToNameBlock(c_set)")
};

//////////////////////////////////////////////////////////////////////////////
Text _.autodoc.member.LoadConfig=
"Loads configuration file. If not exists creates it with default values.";
Real LoadConfig(Real void)
//////////////////////////////////////////////////////////////////////////////
{
//WriteLn("TRACE [LoadConfig] 1");
  Real Case(!FileExist(_.path),
  {
//WriteLn("TRACE [LoadConfig] 2.1");
    Real SaveConfig(Default);
    NameBlock Config := Include(_.path)[1];
    True
  },
  1==1,
  {
  //WriteLn("TRACE [LoadConfig] 2.2");
    NameBlock Config := 
      MergeOptions(TolConfigManager::Default, { Include(_.path)[1] },
     "TolConfigManager::Config::");
    Real SaveConfig(Config)
  });
  Real Apply(?);
  True
};

//////////////////////////////////////////////////////////////////////////////
Real __destroy (Real void)  
//////////////////////////////////////////////////////////////////////////////
{
  Save(?)
};

