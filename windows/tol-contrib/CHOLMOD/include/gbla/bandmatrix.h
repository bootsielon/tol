/* bandmatrix.h
 *
 * Copyright (C) 2005 Jorge Suit Perez Ronda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/** @file bandmatrix.h
 Band Matrix Storage.

 An m-by-n band matrix with kl subdiagonals and ku superdiagonals may be
 stored compactly in a two-dimensional array with kl + ku + 1 rows and n
 columns. Columns of the matrix are stored in corresponding columns of the
 array, and diagonals of the matrix are stored in rows of the array. This
 storage scheme should be used in practice only if kl , ku << min(m , n),
 although LAPACK routines work correctly for all values of kl and ku. In
 LAPACK, arrays that hold matrices in band storage have names ending in `B'.

 \verbatim
 
 ( a00 a01             )       (  *  a01 a12 a23 a34 )
 ( a10 a11 a12         )       ( a00 a11 a22 a33 a44 )
 ( a20 a21 a22 a23     )  ==>  ( a10 a21 a32 a43  *  )
 (     a31 a32 a33 a34 )       ( a20 a31 a42  *   *  )
 (         a42 a43 a44 )

 aij is stored in

   AB(ku + i - j , j) for max(0 , j - ku) <= i <= min(m-1 , j + kl)
\endverbatim

 Note: when a band matrix is supplied for LU factorization, space must be
 allowed to store an additional kl superdiagonals, generated by fill-in as a
 result of row interchanges. This means that the matrix is stored according to
 the above scheme, but with kl + ku superdiagonals.

 Triangular band matrices are stored in the same format, with either kl = 0 if
 upper triangular, or ku = 0 if lower triangular.

 For symmetric or Hermitian band matrices with kd subdiagonals or
 superdiagonals, only the upper or lower band (as specified by UPLO) need
 be stored:

    * if UPLO = `U', is stored in AB(kd + i - j , j) for
      max(0 , j - kd) <= i <= j;

    * if UPLO = `L', is stored in AB(i - j , j) for
      j <= i <= min(n-1 , j + kd).

*/

#ifndef __GBLA_BAND_MATRIX_H__
#define __GBLA_BAND_MATIX__H__

#include <gbla/block.h>

__GBLA_BEGIN_DECLS

/** Band Matrix Storage.
 
 An m-by-n band matrix with kl subdiagonals and ku superdiagonals may be
 stored compactly in a two-dimensional array with kl + ku + 1 rows and n
 columns. Columns of the matrix are stored in corresponding columns of the
 array, and diagonals of the matrix are stored in rows of the array. This
 storage scheme should be used in practice only if kl , ku << min(m , n)
 */
typedef struct
{
  /** number of rows */
  int size1;
  /** number of columns */
  int size2;
  /** number of superdiagonals */
  int ku;
  /** number of subdiagonals */
  int kl;
  /** leading dimension of transformed matrix */
  int ldab;
  /** address of first element of the matrix */
  double * data;
  /** block of memory containing the elements */
  gbla_block_t block;
  /** Internal flags. Indicate if the block of memory is owned by this
   * matrix */
  int flags;
} gbla_band_matrix_t;

/** Band Matrix Initialization.

 This function create, if requested, and initialize a band matrix struct. The
 elements of the matrix remains uninitialized.
 
 \param[in] m number of rows.
 \param[in] n number of columns.
 \param[in] ku number of superdiagonals.
 \param[in] kl number of subdiagonals.
 
 \param[in,out] bm the band matrix struct to initialize. If bm is NULL a new
                band matrix is created from the heap, then initialized.
 
 \return the address of the initialized band matrix. If no memory is available
         NULL is returned.
 */
GBLA_API gbla_band_matrix_t * gbla_band_matrix_init (int m, int n, int ku, int kl,
						     gbla_band_matrix_t *bm);

/** Band Matrix Initialization.

 This function create, if requested, and initialize a band matrix struct. The
 elements of the matrix are set to zero.
 
 \param[in] m number of rows.
 \param[in] n number of columns.
 \param[in] ku number of superdiagonals.
 \param[in] kl number of subdiagonals.
 \param[in,out] bm the band matrix struct to initialize.  If bm is NULL a new
                band matrix is created from the heap, then initialized.

 \return the address of the initialized band matrix. If no memory is available
         NULL is returned.
 */
GBLA_API gbla_band_matrix_t * gbla_band_matrix_cinit (int m, int n, int ku, int kl,
						      gbla_band_matrix_t *bm);

/** Band Matrix Freeing.

 This function release the memory resources allocated to the band matrix given
 in the argument bm. If the band matrix was created from the heap it is also
 freed.
  
 \param[in,out] bm the band matrix to free. The underlying memory resources
 are released. On exit, if bm was created from the heap, the memory area
 pointed by bm is invalid.
 */
void GBLA_API gbla_band_matrix_free (gbla_band_matrix_t *bm);

/** Band Matrix Access Element.

 This function access the element bm(i,j), where bm is a valid band matrix
 struct. No range checking is performed.
 
 \param[in] bm the band matrix.
 \param[in] i row index of the element.
 \param[in] j column index of the element.
 \return the value of the element at bm(i,j).
 */
GBLA_API double gbla_band_matrix_get(gbla_band_matrix_t *bm, int i, int j);

/** Band Matrix Modify Element.

 Access the element bm(i,j) and change its value to x, where bm is a valid
 band matrix struct. No range checking is performed.
 
 \param[in,out] bm the band matrix.
 \param[in] i row index of the element.
 \param[in] j column index of the element.
 \param[in] x the new value for element bm(i,j).
 */
GBLA_API void gbla_band_matrix_set(gbla_band_matrix_t *bm, int i, int j, double x);

/** Band matrix random initialization

 This function sets all the elements of a band matrix, given as argument, to a
 random value from the interval @f$[0,1]@f$. The random values are generated
 using the POSIX function rand().
 
 @param[in,out] bm the matrix to initialize.
 */
GBLA_API void gbla_band_matrix_set_all_random (gbla_band_matrix_t * bm);

__GBLA_END_DECLS

#endif
