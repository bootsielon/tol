/* blas1.h : GBLA BLAS Level I API
 *
 * Copyright (C) 2005 Jorge Suit Perez Ronda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef __GBLA_BLAS1_H__
#define __GBLA_BLAS1_H__

#include <gbla/vector.h>

__GBLA_BEGIN_DECLS

/** @file blas1.h

 @b BLAS Level I API

 BLAS Level I include routines and functions, which perform vector-vector
 operations, e.g. @f$ y = \alpha x + y@f$. The routines provided here
 are based on the vectors and matrix types. The corresponding low level
 routines are provided in blapi.h
*/

/** Computes the sum of magnitudes of the vector elements.
 
 This function compute the sum of the absolute values of the elements of a
  real vector X: @f[\sum_{i=0..n-1}|X_i| = |X_0| + |X_1| + ... + |X_{n-1}|@f]


 @param[in] X the vector.
 @return @f$\sum_{i=1..n}|X(i)@f$
 */
GBLA_API double gbla_blas_dasum(const gbla_vector_t * X);

/** Vector plus the product of a scalar and a vector.

 This function compute the following scalar-vector product and sum: @f$Y :=
 \alpha * X+Y @f$ where @f$\alpha@f$ is a scalar, and X and Y are vectors.

 @param[in] alpha the scalar, @f$\alpha@f$,multiplier for the elements of the
 vector X.
 
 @param[in] X a one-dimensional array.
 
 @param[in,out] Y On entry, a one-dimensional array, containing the elements
                of the vector Y.  On exit, if alpha = 0,  is unchanged,
                otherwise, Y is overwritten; @f$Y(i)@f$ is replaced by
                @f$Y(i)+\alpha *X(i)@f$.
                
 @return GBLA_SUCCESS
 */
GBLA_API int gbla_blas_daxpy(double alpha,
                    const gbla_vector_t * X,
                    gbla_vector_t * Y);

/** Copies vector to another vector.

 This function perform a vector-vector operation defined as @f$ Y = X @f$
 @param[in] X the source vector
 @param[out] Y the destination vector
 @return GBLA_SUCCESS
 */
GBLA_API int gbla_blas_dcopy(const gbla_vector_t * X, gbla_vector_t * Y);

/** Computes a vector-vector dot product

 This function perform a vector-vector reduction operation defined as,
 @f[res=\sum_i{X(i)*Y(i)}@f]

 @param[in] X a vector
 @param[in] Y a vector
 @param[out] result @f$=\sum_i{X(i)*Y(i)}@f$
 */
GBLA_API int gbla_blas_ddot(const gbla_vector_t * Y,
                   const gbla_vector_t * X,
                   double * result);

/** Compute the Euclidean norm of a vector

 This function perform a vector-vector operation defined as @f$ res = ||X||
  = \sqrt{\sum_i{X_i^2}}@f$
 @param[in] X the vector to compute the norm.
 @return @f$= ||X|| @f$
 */
GBLA_API double gbla_blas_dnrm2(const gbla_vector_t * X);

/** Apply givens plane rotation.

 This function apply a real Givens plane rotation to each element in the pair
 of real vectors, @f$x@f$ and @f$y@f$. The cosine and sine of the angle of
 rotation are @f$c@f$ and @f$s@f$, respectively, and are provided by the BLAS
 Level 1 ::gbla_blas_drotg function. The Givens plane rotation follows:
 @f{align*}
 x_i =& c*x_i + s*y_i \\
 y_i =& -s*x_i + c*y_i
 @f}

 This function can be used to introduce zeros selectively into a matrix.

 @param[in,out] X a vector of reals, each element @f$x_i@f$ is replaced by @f$
                c*x_i + s*y_i @f$
 
 @param[in,out] Y a vector of reals, each element @f$y_i@f$ is replaced by @f$
                -s*x_i + c*y_i @f$
 
 @param[in] c the first rotation element, that is, the cosine of the angle of
 rotation. The argument c is the first rotation element generated by the
 ::gbla_blas_drotg function.
 
 @param[in] s the second rotation element, that is, the sine of the angle of
 rotation.  The argument s is the second rotation element generated by the
 ::gbla_blas_drotg function.
                      
 @return GBLA_SUCCESS
 */
GBLA_API int  gbla_blas_drot (gbla_vector_t * X,
                     gbla_vector_t * Y,
                     double c, double s);

/** Generate elements for a givens plane rotation

 This function construct a Givens plane rotation that eliminates the second
 element of a two-element vector and can be used to introduce zeros
 selectively into a matrix.

 Using @f$a@f$ and @f$b@f$ to represent elements of an input real vector, the
 function calculate the elements @f$c@f$ and @f$s@f$ of an orthogonal matrix
 such that:

 @f{align*}
   c*a + s*b = r \\
  -s*a + c*b = 0
 @f}

 A real Givens plane rotation is constructed for values @f$a@f$ and @f$b@f$ by
 computing values for @f$r@f$, @f$c@f$, @f$s@f$, and @f$z@f$, as follows:

 @f{align*}
  r& =p * \sqrt{a^2+b^2} \\
  p& =\begin{cases}
  sign(a) & \text{if $|a| > |b|$} \\
  sign(b) & \text{if $|a| <= |b|$}
  \end{cases} \\
  c& =\begin{cases}
  a/r & \text{if $r\neq 0$} \\ 
  1 & \text{if $r = 0$}
  \end{cases} \\
  s& =\begin{cases}
  b/r & \text{if $r\neq 0$} \\ 
  1 & \text{if $r = 0$}
  \end{cases} \\
  z& =\begin{cases}
  s & \text{if $|a| > |b|$} \\
  1/c & \text{if $|a|<=|b|$, $c \neq 0$, and $r \neq 0$} \\
  1 & \text{ if $|a|<=|b|$, $c = 0$, and $r \neq 0$} \\
  0 & \text{if $r = 0$}
  \end{cases}
 @f}

 ::gbla_blas_drotg can use the reconstruction element @f$z@f$ to store the
 rotation elements for future use. The quantities @f$c@f$ and @f$s@f$ are
 reconstructed from @f$z@f$ as follows:

@f{align*}
c& =0.0& s& = 1.0 && \text{for $|z| = 1$} \\
c& = \sqrt{1-z^2}& s& = z && \text{for $|z| < 1$} \\
c& = 1/z& s& = \sqrt{1-c^2} && \text{for $|z| > 1$}
@f}

 @param[in,out] a On entry, the first element of the input vector.  On exit,
		  @f$a@f$ is overwritten with the rotated element @f$r@f$.
		  
 @param[in,out] b On entry, the second element of the input vector. On exit,
		  @f$b@f$ is overwritten with the reconstruction element
		  @f$z@f$.
		      
 @param[out] c On exit, @f$c@f$ is overwritten with the first rotation
               element, that is, the cosine of the angle of rotation.
		      
 @param[out] s On exit, @f$s@f$ is overwritten with the second rotation
               element, that is, the sine of the angle of rotation.

 @return GBLA_SUCCESS
 */
GBLA_API int  gbla_blas_drotg (double *a, double *b, double *c, double *s);

/** Apply modified givens transformation

  This function apply a modified Givens transform to each element in the
  pair of real vectors, X and Y, using the transformation matrix H as fol-
  lows:

  @f{equation*}
  \begin{bmatrix}
  X(i) \\
  Y(i)
  \end{bmatrix} = H *
  \begin{bmatrix}
  X(i) \\
  Y(i)
  \end{bmatrix}
  @f}
    
  Depending on the value of P(0), the transformation matrix is defined as
  follows:

 @f{equation*}
H=\begin{cases}
\begin{bmatrix} H_{11} & H_{12} \\ H_{21} & H_{22} \end{bmatrix} & \text{if $P(0) = -1.0$}\\\\
\begin{bmatrix} 1.0 & H_{12} \\ H_{21} & 1.0 \end{bmatrix} & \text{if $P(0) =
  -1.0$} \\\\
\begin{bmatrix} H_{11} & 1.0 \\  -1.0 & H_{21} \end{bmatrix} & \text{if $P(0) =
  1.0$} \\\\
\begin{bmatrix} 1.0 & 0.0 \\  0.0 & 1.0 \end{bmatrix} & \text{if $P(0) =
  -2.0$}
\end{cases}
@f}
  
  The array P is generated by a call to the routine ::gbla_blas_rotmg.

  @param[in,out] X on entry, a one-dimensional array containing the elements
                 of the vector X. On exit, if P(0) = (-2.0), X
                 is unchanged.  Otherwise, X is overwritten; X contains the
                 rotated vector X.

  @param[in,out] Y on entry, a one-dimensional array Y containing the n
                 elements of the vector Y.  On exit, if P(0) = -2.0, Y is
                 unchanged.  Otherwise, Y is overwritten; Y contains the
                 rotated vector Y.

  @param[in] P an array defining the type of transform matrix H used:
             - P(0) specifies the flag characteristic: -1.0, 0.0, 1.0, -2.0
             - P(1) specifies @f$H_{11}@f$ value
             - P(2) specifies @f$H_{21}@f$ value
             - P(3) specifies @f$H_{12}@f$ value
             - P(4) specifies @f$H_{22}@f$ value
  @return GBLA_SUCCESS
*/
GBLA_API int  gbla_blas_drotm (gbla_vector_t * X,
                      gbla_vector_t * Y,
                      const double * P);

/** Generate elements for a modified Givens transform.

 ::gbla_blas_drotmg construct a modified Givens transform that eliminates the
 second element of a two-element vector and can be used to introduce zeros
 selectively into a matrix.  This function use the modification due to
 Gentleman of the Givens plane rotations. This modification eliminates the
 square root from the construction of the plane rotation and reduces the
 operation count when the modified Givens rotation, rather than the standard
 Givens rotations are applied.  In most applications, the scale factors d1 and
 d2 are initially set to 1 and then modified by the function as necessary.

 Given real a and b in factored form:

 @f{align*}
 a =& \sqrt{d1} * x_1 \\
 b =& \sqrt{d2} * y_1
 @f}
 
 ::gbla_blas_drotmg construct the modified Givens plane rotation, @f$d_1'@f$,
 @f$d_2'@f$ and

 @f[
 H=\begin{bmatrix} H_{11} & H_{12} \\ H_{21} & H_{22}\end{bmatrix}
 @f]

 such that

 @f[
 \begin{bmatrix}
 \sqrt{d_1'} & 0 \\ 0 & \sqrt{d_2'}
 \end{bmatrix} * H * \begin{bmatrix}x_1 \\ y_1 \end{bmatrix}
 = G * \begin{bmatrix}a \\ b \end{bmatrix} = \begin{bmatrix}r \\ 0 \end{bmatrix}
 @f]

 where @f$G@f$ is a 2 by 2 Givens plane rotation matrix which annihilates
 @f$b@f$, and where @f$H@f$ is chosen for numerical stability and
 computational efficiency.

 The routine ::gbla_blas_drotm applies the matrix @f$H@f$, as constructed by
 ::gbla_blas_drotmg, to a pair of real vectors, @f$x@f$ and @f$y@f$, each
 with @f$n@f$ elements, as follows:

 @f[
 \begin{bmatrix}x_i \\ y_i \end{bmatrix}
 = H * \begin{bmatrix}x_i \\ y_i \end{bmatrix}
 @f]

 These vectors may be either rows or columns of matrices.


 The routines ::gbla_blas_drotmg and ::gbla_blas_drotm perform similar tasks
 to the routines ::gbla_blas_drotg and ::gbla_blas_drot, which construct and
 apply the standard Givens plane rotations.  The modified Givens rotations
 reduce the operation count of constructing and applying the rotations at the
 cost of increased storage to represent the rotations.

 @param[in,out] d1 On entry, the first scale factor, @f$d_1@f$, for the
               modified Givens transform.  On exit, d1 is updated with
               @f$d_1'@f$.

 @param[in,out] d2 On entry, the second scale factor, @f$d_2@f$, for the
               modified Givens transform.  On exit, d2 is updated with
               @f$d_2'@f$.

 @param[in,out] x1 On entry, the first element @f$x_1@f$ of the input vector.
                   On exit, x1 is overwritten with the rotated element.

 @param[in] y1 On entry, the second element @f$y_1@f$ of the input vector.

 @param[out] P On exit, P contains an array defining the type of transform
               matrix @f$H@f$ constructed:
             - P(0) specifies the flag characteristic: -1.0, 0.0, 1.0, -2.0
             - P(1) specifies @f$H_{11}@f$ value
             - P(2) specifies @f$H_{21}@f$ value
             - P(3) specifies @f$H_{12}@f$ value
             - P(4) specifies @f$H_{22}@f$ value
 @return GBLA_SUCCESS
 */
GBLA_API int  gbla_blas_drotmg (double *d1, double *d2,
                       double *x1, const double *y1, double *P);
/* gbla_blas_rotmg */

/** Compute a vector by a scalar product: @f$X = \alpha * X@f$.

 This function perform the following operation: @f$ X = \alpha *x@f$.

 @param[in] alpha the scalar @f$\alpha@f$ used to multiply the ele-
            ments of vector x.

 @param[in,out] X on entry, a one-dimensional array containing the elements of
                the vector X.  On exit, X is overwritten; @f$X(i)@f$ is
                replaced by @f$\alpha * x(i)@f$.
 */
GBLA_API void gbla_blas_dscal  (double alpha, gbla_vector_t *X);

/** Swapa a vector with another vector.
  
 This function swap n elements of the vector X with n elements of vector Y:
 @f$X\leftrightarrow Y@f$

 If any element of x shares a memory location with an element of y, the
 results are unpredictable.

 @param[in,out] X on entry, a one-dimensional array X. On exit, it is
                overwritten by the vector Y.

 @param[in,out] Y on entry, a one-dimensional array Y. On exit, it is
                overwritten by the vector X.
 @return GBLA_SUCCESS
 */
GBLA_API int  gbla_blas_dswap (gbla_vector_t * X,
                      gbla_vector_t * Y);

/** Finds the element of a vector that have the largest absolute value.
  
 This functions determine the first integer i among the elements of the vector
 X such that: @f$|x(i)| = MAX\{|x(j)|, j = 1,2, ...,n\}@f$.  You can use this
 functions to obtain the pivots in Gaussian elimination.

 @param[in] X the vector containing the real numbers.
 @return the index of the element with the maximun value.
 */
GBLA_API int gbla_blas_idamax (const gbla_vector_t * X);

__GBLA_END_DECLS

#endif

